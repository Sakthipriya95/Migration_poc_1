/*
 * Copyright (c) Robert Bosch GmbH. All rights reserved.
 */
package com.bosch.caltool.icdm.common.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;

import org.junit.Test;

import com.bosch.calcomp.junittestframework.JUnitTest;
import com.bosch.caltool.icdm.common.exception.IcdmException;

/**
 * @author bne4cob
 */
public class FileIOUtilTest extends JUnitTest {

  private static final String INPUT_FILE_SAMPLE = "testdata/SampleFile.txt";
  private static final String INPUT_DIR = "testdata/test";
  private static final String INPUT_DIR_DEST = "testdata/test/SampleFile.txt";

  /**
   * Test method for {@link FileIOUtil#getFileExtension(String) }
   */
  @Test
  public void testGetFileExtension() {
    assertEquals("FileExtension check 1", "hex", FileIOUtil.getFileExtension("abc.hex"));
    assertEquals("FileExtension check 2", "HEX", FileIOUtil.getFileExtension("abc.HEX"));
    assertEquals("FileExtension check 3", "hex", FileIOUtil.getFileExtension(".hex"));
    assertEquals("FileExtension check 3", "hex", FileIOUtil.getFileExtension("abc.def.hex"));

    assertEquals("FileExtension check Negative 1", "", FileIOUtil.getFileExtension("abc"));
    assertEquals("FileExtension check Negative 2", "", FileIOUtil.getFileExtension("abc."));
    assertEquals("FileExtension check Negative 3", "", FileIOUtil.getFileExtension("."));
    assertEquals("FileExtension check Negative 4", "", FileIOUtil.getFileExtension(".."));
    assertEquals("FileExtension check Negative 5", "", FileIOUtil.getFileExtension(null));
    assertEquals("FileExtension check Negative 6", "", FileIOUtil.getFileExtension(""));
  }

  /**
   * Test method for {@link FileIOUtil#convertHtmlToString(InputStream) }
   *
   * @throws FileNotFoundException when file doesnot exist
   */
  @Test
  public void testConvertHtmlToString() throws FileNotFoundException {
    InputStream inputStream = new FileInputStream(INPUT_FILE_SAMPLE);
    assertEquals("Test Data", FileIOUtil.convertHtmlToString(inputStream));
  }

  /**
   * Test method for {@link FileIOUtil#convertHtmlToString(InputStream) } negative scenario
   */
  public void testConvertHtmlToStringException() {
    InputStream failInput = new InputStream() {

      @Override
      public int read() throws IOException {
        throw new IOException("Exception generated by test class");
      }
    };
    assertEquals("", FileIOUtil.convertHtmlToString(failInput));
  }

  /**
   * Test method for {@link FileIOUtil#convertHtmlByteToString(byte[]) }
   */
  @Test
  public void testconvertHtmlByteToString() {
    assertNotNull(FileIOUtil.convertHtmlByteToString(new byte[6]));

  }

  /**
   * Test method for { @link FileIOUtil#createDir(String) and FileIOUtil#copy(String, String)}
   *
   * @throws IOException in case of any exception
   */
  @Test
  public void testCreateDir() throws IOException {
    File inputDir = new File(INPUT_DIR);
    File inputDirDest = new File(INPUT_DIR_DEST);
    // To test createDir() method
    assertFalse(inputDir.exists());
    FileIOUtil.createDir(INPUT_DIR);
    assertTrue(inputDir.exists());
    // To make sure directory is not created again if it already exists
    FileIOUtil.createDir(INPUT_DIR);

    // To test the copy() method - Copy file fro souce to destination
    FileIOUtil.copy(INPUT_FILE_SAMPLE, INPUT_DIR_DEST);
    assertTrue(inputDirDest.exists());

    // Deleting the temp folder and copied temp file
    Files.delete(inputDirDest.toPath());
    assertFalse(inputDirDest.exists());
    Files.delete(inputDir.toPath());
    assertFalse(inputDir.exists());
  }


  /**
   * Test method for { @link FileIOUtil#checkIfFileIsLocked()) }
   *
   * @throws IOException
   * @throws FileNotFoundException
   */
  @Test
  public void testCheckIfFileIsLocked() {
    assertFalse("File is not locked", FileIOUtil.checkIfFileIsLocked(INPUT_FILE_SAMPLE));
  }

  /**
   * Test method for { @link FileIOUtil#toByteArray()) }()
   *
   * @throws IcdmException in case of any exception
   * @throws IOException in case of exception with input file
   */
  @Test
  public void testToByteArray() throws IcdmException, IOException {
    assertNotNull(FileIOUtil.toByteArray(INPUT_FILE_SAMPLE));
    assertNotNull(FileIOUtil.toByteArray(new FileInputStream(INPUT_FILE_SAMPLE)));
    assertNotNull(FileIOUtil.toByteArray(new File(INPUT_FILE_SAMPLE)));
  }

  /**
   * Test method for { @link FileIOUtil#touch()) }()
   *
   * @throws IcdmException in case of any exception
   */
  @Test
  public void testTouch() throws IcdmException {
    FileIOUtil.touch(INPUT_FILE_SAMPLE);
  }

}

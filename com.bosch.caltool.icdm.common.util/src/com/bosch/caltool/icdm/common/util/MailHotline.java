/*
 * Copyright (c) Robert Bosch GmbH. All rights reserved.
 */
package com.bosch.caltool.icdm.common.util;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import com.bosch.calcomp.mail.client.BodyType;
import com.bosch.calcomp.mail.client.SystemMailSender;
import com.bosch.caltool.icdm.common.exception.MailException;
import com.bosch.caltool.icdm.logger.CDMLogger;


/**
 * iCDM-834
 *
 * @author adn1cob
 */
public class MailHotline {

  /**
   *
   */
  private static final String MAIL_FOOTER_TEXT =
      "<br><br> Thank you! <br> <font size=2>This is an Autogenerated mail from iCDM client</font><br><br></html>";
  /**
   *
   */
  public static final String TWO_LINE_BREAKS = "<br><br>";
  /**
  *
  */
  public static final String ONE_LINE_BREAK = "<br>";
  /**
   * Initial size of String Builder for mail body
   */
  private static final int SB_MAIL_BODY_SIZE = 200;
  /**
   * Mail sender object
   */
  private final MailSender mailSender;
  /**
   * Mail subject line
   */
  private String subjectLine;
  /**
   * Mail content
   */
  private String mailContent;

  /**
   * Mail content - Attribute and value place holder
   */
  private static final String ATTR_VALUE = "#ATTRIBUTE_AND_VALUE#";

  /**
   * Mail content - PIDC and Version place holder
   */
  private static final String PIDC_VERSION = "#PIDC_AND_VERSION#";

  /**
   * Mail content - Current User place holder
   */
  private static final String CURR_USER = "#CURRUSER#";

  /**
   * iCDM-946 TRUE if if automatic mail notification enabled
   */
  private final boolean notifyEnabled;
  // flag to send mail with high priority
  private boolean highPriority;
  /**
   * CC User email Addr
   */
  private String ccAddr;

  /**
   * @param from logged in user email address
   * @param toAddr hotlineAddr
   * @param canNotify true if mail notification is enabled
   */
  public MailHotline(final String from, final String toAddr, final boolean canNotify) {
    this.mailSender = new MailSender(CDMLogger.getInstance(), toAddr, from);
    this.notifyEnabled = canNotify;
  }

  /**
   * @param from from address(iCDM hotline address)
   * @param toAddr receipients
   * @param canNotify true if mail notification is enabled
   */
  public MailHotline(final String from, final Set<String> toAddr, final boolean canNotify) {
    this.mailSender = new MailSender(CDMLogger.getInstance(), toAddr, from);
    this.notifyEnabled = canNotify;
  }

  /**
   * Sends mail to clear the attribute value
   *
   * @param attrName Attribute name
   * @param attrValue Attribute value
   * @param isGroupedAttr is attribute grouped
   */
  public void send4Clearance(final String attrName, final String attrValue, final boolean isGroupedAttr) {
    // frame the mail content with the parameters
    ConcurrentMap<String, String> attrValMap = new ConcurrentHashMap<>();
    attrValMap.put(attrName, attrValue);
    // ICDM-2624
    setRequestDetails(attrValMap, isGroupedAttr);
    if (sendMail()) {
      CDMLogger.getInstance().info("Mail request sent to iCDM clearing hotline for attribute value(s)",
          Activator.PLUGIN_ID);
    }
  }

  /**
   * Sends mail to owner of attr value for change from In-Clearing to Deleted
   *
   * @param attrName Attribute name
   * @param attrValue Attribute value
   */
  public void notifyRejection(final String attrName, final String attrValue) {
    // frame the mail content with the parameters
    ConcurrentMap<String, String> attrValMap = new ConcurrentHashMap<>();
    attrValMap.put(attrName, attrValue);
    setRejectionDetails(attrValMap);
    // create mail from outlook
    OutlookMail outlookMail = new OutlookMail(CDMLogger.getInstance());
    try {
      outlookMail.composeEmail(this.mailSender.getRecipAddr(), this.subjectLine, this.mailContent);
    }
    catch (MailException exp) {
      CDMLogger.getInstance().warn("Failed to send mail notification to the owner of attribute value : " + attrValue,
          exp, Activator.PLUGIN_ID);
    }

  }


  /**
   * Notify users on deletion of attribute values
   *
   * @param attrName Attribute name
   * @param attrValue Attribute value
   * @param map names od PID Cards
   * @param nameOfCurrentUser Last name of current user
   * @param deptName Department name
   * @param delAttrValUpdatedMail Mail template for deletion of Attribute value
   */
  public void notifyDeletionToOwner(final String attrName, final String attrValue,
      final Map<String, Map<String, Long>> map, final String nameOfCurrentUser, final String deptName,
      final String delAttrValUpdatedMail) {
    // frame the mail content with the parameters
    ConcurrentMap<String, String> attrValMap = new ConcurrentHashMap<>();
    attrValMap.put(attrName, attrValue);
    setNotificationDetails(attrValMap, map, nameOfCurrentUser, deptName, delAttrValUpdatedMail);
    if (sendMail()) {
      CDMLogger.getInstance().info(
          "Mail notification sent to PIDC owner(s) using attribute value - " + attrValue + " which are deleted!",
          Activator.PLUGIN_ID);
    }
  }

  /**
   * @return boolean true if mail was sent successfully
   */
  public boolean sendMail() {
    // send the mail
    try {
      this.mailSender.setContent(this.mailContent);
      this.mailSender.setSubject(this.subjectLine);
      this.mailSender.setCcAddr(this.ccAddr);
      if (this.notifyEnabled) {
        SystemMailSender systemMailSender = new SystemMailSender("ICDM");
        String senderAddr = this.mailSender.getSenderAddr();
        Set<String> recipAddr = this.mailSender.getRecipAddr();
        Set<String> ccAddress = new HashSet<>();
        boolean checkCCAdress = CommonUtils.isNotNull(this.ccAddr);
        String userDetail = "This mail is send by : ";
        if (CommonUtils.isEqualIgnoreCase(senderAddr, "iCDM_Hotline-Clearing@de.bosch.com")) {
          if (checkCCAdress) {
            ccAddress.add(this.ccAddr);
          }
          systemMailSender.send(recipAddr, this.mailContent, BodyType.HTML, this.subjectLine, ccAddress, null, null,
              null, this.highPriority);
        }
        else {
          if (checkCCAdress) {
            ccAddress.add(this.ccAddr);
            ccAddress.add(senderAddr);
          }
          else {
            ccAddress.add(senderAddr);
          }
          systemMailSender.send(recipAddr, userDetail + senderAddr + "<br>" + "<br>" + this.mailContent, BodyType.HTML,
              this.subjectLine + " - " + userDetail + senderAddr, ccAddress, null, null, null, this.highPriority);
        }
      }
      else {
        CDMLogger.getInstance().info("Automatic mail notifications are currently disabled!", Activator.PLUGIN_ID);
        return false;
      }
      return true;
    }
    catch (Exception e) {
      CDMLogger.getInstance().error("Exception sending mail : ", e);
    }
    return false;
  }

  /**
   * Build the content of the mail with parameters, when new attribute value added for clearance
   *
   * @param isGroupedAttr
   * @param attrName
   * @param attrValue
   */
  private void setRequestDetails(final Map<String, String> attrValueMap, final boolean isGroupedAttr) {
    if (this.subjectLine == null) {
      this.subjectLine = "#CLEARING - iCDM Attribute Value(s) clearing request";
    }
    if (this.mailContent == null) {
      StringBuilder sbContent = new StringBuilder(SB_MAIL_BODY_SIZE);
      sbContent.append(
          "<html> Hello Hotline, <br><br> The following attribute value has been added. Please verify. <br><br> ");

      for (Map.Entry<String, String> entry : attrValueMap.entrySet()) {
        sbContent.append("<b>Attribute name : </b>" + entry.getKey() + "<br> <b> Attribute value : </b>" +
            entry.getValue() + TWO_LINE_BREAKS);
      }
      // ICDM-2624
      if (isGroupedAttr) {
        sbContent.append("<br><br> <b> Note: This attribute is a grouped attribute. </b>");
      }
      sbContent.append(MAIL_FOOTER_TEXT);
      this.mailContent = sbContent.toString();
    }
  }

  /**
   * Build the content of the mail with parameters, when used attribute values are deleted
   *
   * @param map names of pid cards
   * @param nameOfCurrentUser String
   * @param deptName Department name
   * @param delAttrValUpdMailTemplate
   * @param attrName attribute name
   * @param attrValue attribute value which is deleted
   */
  private void setNotificationDetails(final Map<String, String> attrValueMap, final Map<String, Map<String, Long>> map,
      final String nameOfCurrentUser, final String deptName, final String delAttrValUpdMailTemplate) {
    if (this.subjectLine == null) {
      this.subjectLine = "#INFO - iCDM Attribute Value Deleted!";
    }
    if (this.mailContent == null) {

      StringBuilder attrValPair = new StringBuilder(SB_MAIL_BODY_SIZE);
      StringBuilder pidcVerPair = new StringBuilder(SB_MAIL_BODY_SIZE);

      // Add the deleted attribute value and its attribute in mail
      for (Map.Entry<String, String> entry : attrValueMap.entrySet()) {
        attrValPair.append("<b>Attribute : </b>").append(entry.getKey()).append(ONE_LINE_BREAK)
            .append("<b> Attribute Value : </b>").append(entry.getValue()).append(TWO_LINE_BREAKS);
      }
      // Add the PIDC name and version name in mail
      for (Entry<String, Map<String, Long>> pidcVerEntry : map.entrySet()) {
        pidcVerPair.append("<b>Project ID Card : </b>").append(" ").append(pidcVerEntry.getKey()).append(ONE_LINE_BREAK)
            .append("<b> Version(s) : </b>");
        for (Entry<String, Long> pidcVersionName : pidcVerEntry.getValue().entrySet()) {
          pidcVerPair.append(pidcVersionName.getKey());
          pidcVerPair.append("&emsp;").append("<a href=\"icdm:pidvID,").append(pidcVersionName.getValue()).append("\">")
              .append("(Link)").append("</a>").append(ONE_LINE_BREAK);
        }
        pidcVerPair.append(TWO_LINE_BREAKS);
      }

      this.mailContent = "<html>" + delAttrValUpdMailTemplate;
      this.mailContent = this.mailContent.replaceAll("\n", ONE_LINE_BREAK);
      this.mailContent = this.mailContent.replace(ATTR_VALUE, attrValPair.toString());
      this.mailContent = this.mailContent.replace(PIDC_VERSION, pidcVerPair.toString());
      this.mailContent = this.mailContent.replace(CURR_USER, nameOfCurrentUser + ONE_LINE_BREAK + deptName);
    }
  }

  /**
   * Build the content of the mail with parameters, when used attribute values are deleted
   *
   * @param attrName
   * @param attrValue
   */
  private void setRejectionDetails(final Map<String, String> attrValueMap) {
    if (this.subjectLine == null) {
      this.subjectLine = "#INFO - iCDM Attribute Value(s) Deleted!";
    }
    if (this.mailContent == null) {
      StringBuilder sbContent = new StringBuilder(SB_MAIL_BODY_SIZE);
      sbContent.append(
          "<html> Hello iCDM User, <br><br> The following attribute value created and sent for clearance is DELETED! <br>" +
              "Please contact iCDM Hotline for more information.<br><br> ");

      for (Map.Entry<String, String> entry : attrValueMap.entrySet()) {
        sbContent.append("<b>Attribute name : </b>" + entry.getKey() + "<br> <b> Attribute value : </b>" +
            entry.getValue() + TWO_LINE_BREAKS);
      }
      sbContent.append(
          "<br> Thank you! <br> <font size=2>This e-mail is sent on behalf of iCDM Clearing Hotline</font><br><br></html>");
      this.mailContent = sbContent.toString();
    }
  }

  /**
   * Set the customized subject
   *
   * @param subject string
   */
  public void setSubject(final String subject) {
    this.subjectLine = subject;
  }

  /**
   * Set the customized content of mail
   *
   * @param content string
   */
  public void setContent(final String content) {
    this.mailContent = content;
  }

  /**
   * Send mail for clearance, for mutiple values
   *
   * @param nameValMap attrName and values
   * @param isGroupedAttr is attribute grouped
   */
  public void send4Clearance(final Map<String, String> nameValMap, final Boolean isGroupedAttr) {
    setRequestDetails(nameValMap, isGroupedAttr);
    sendMail();
  }

  /**
   * @param attrLevelStr attrLevelStr
   * @param pidName pidName
   * @param userDep DepName
   * @param firstName firstName
   * @param lastName lastName
   */
  public void notifyNewPIDC(final String attrLevelStr, final String pidName, final String userDep,
      final String firstName, final String lastName) {
    setNewPidcDetails(attrLevelStr, pidName, userDep, firstName, lastName);
    if (sendMail()) {
      CDMLogger.getInstance().info("Mail request sent to iCDM  hotline for new PIDC", Activator.PLUGIN_ID);
    }

  }


  /**
   * @param lastName
   * @param firstName
   * @param userDep
   * @param nodeStack
   */
  private void setNewPidcDetails(final String attrLevelStr, final String pidName, final String userDep,
      final String firstName, final String lastName) {
    if (this.subjectLine == null) {
      this.subjectLine = "#INFO - iCDM new Project Id Card added";
    }
    if (this.mailContent == null) {
      String content = CommonUtils.concatenate("<html> Hello Hotline, <br><br>PIDC: ", pidName, " is created at ",
          attrLevelStr, ".<br><br> ", "User: ", userDep, " - ", lastName, " , ", firstName, ".",
          "<br><br> Thank you! <br><br><br> <font size=2>This is an auto-generated mail from iCDM client. </font><br><br></html>");

      this.mailContent = content;
    }

  }

  /**
   * @param attrMap attrMap
   * @param dep dep
   * @param fullName fullName
   * @param firstName firstName
   */
  public void sendMailForMappingAttr(final Map<Long, String> attrMap, final String dep, final String fullName,
      final String firstName) {
    if (this.subjectLine == null) {
      this.subjectLine = "#CLEARING - Mapping between iCDM attribute values and SSD values required (automated)";
    }
    if (this.mailContent == null) {
      StringBuilder sbContent = new StringBuilder(SB_MAIL_BODY_SIZE);
      sbContent.append(
          "<html> A mapping betweeen iCDM Attributes and SSD features should be done for these attributes! <br><br> ");

      for (Map.Entry<Long, String> entry : attrMap.entrySet()) {
        sbContent.append("<b>Attribute ID : </b>" + entry.getKey() + "<br> <b> Attribute name : </b>" +
            entry.getValue() + TWO_LINE_BREAKS);
      }

      sbContent.append("Requested by User " + dep + "-" + fullName + " , " + firstName + TWO_LINE_BREAKS);
      sbContent.append(MAIL_FOOTER_TEXT);
      this.mailContent = sbContent.toString();
    }
    sendMail();
  }


  /**
   * Send Emr File details in case of upload errors
   *
   * @param link pidc version link
   * @param fileDetails emr file details
   */
  public void sendEmrFileUploadError(final String link, final Map<Long, String> fileDetails) {
    this.subjectLine = "#EMR - Upload for Codex Measurement Program Sheet failed";
    this.highPriority = true;

    if (CommonUtils.isNotEmpty(fileDetails)) {
      StringBuilder sbContent = new StringBuilder(SB_MAIL_BODY_SIZE);
      sbContent.append(
          "<html> Upload for Codex Measurement Program Sheet had failed. Find below the details:" + TWO_LINE_BREAKS);
      if (link != null) {
        sbContent.append("<b> PIDC-Version: : </b>" + link + TWO_LINE_BREAKS);
      }
      for (Map.Entry<Long, String> entry : fileDetails.entrySet()) {
        sbContent.append(
            "<b> Sheet-ID : </b>" + entry.getKey() + "<br> <b> Sheet-Name : </b>" + entry.getValue() + TWO_LINE_BREAKS);
      }
      sbContent.append(MAIL_FOOTER_TEXT);
      this.mailContent = sbContent.toString();
      sendMail();
    }
  }


  /**
   * @param invalidGrpNameList List of AD Group Name and Id
   */
  public void sendADGroupMissingMail(final List<String> invalidGrpNameList) {
    this.subjectLine = "Active Directory Groups Renamed or Deleted";
    this.highPriority = true;

    StringBuilder sbContent = new StringBuilder(SB_MAIL_BODY_SIZE);
    sbContent.append(
        "<html> The Following Active Directory Groups are present in iCDM <b> T_ACTIVE_DIRECTORY_GROUPS </b> Table, but not found in LDAP search,");
    sbContent.append(" these Groups might be deleted or renamed.");
    sbContent.append("<br> Kindly do the needful in iCDM.</br>");
    sbContent.append("<br> The affected groups are listed below <br> ");
    invalidGrpNameList.stream().forEach(grpName -> {
      sbContent.append("<li>");
      sbContent.append(grpName);
      sbContent.append("</li>");
    });

    sbContent.append(MAIL_FOOTER_TEXT);
    this.mailContent = sbContent.toString();
    sendMail();
  }


  /**
   * @return the ccAddr
   */
  public String getCcAddr() {
    return this.ccAddr;
  }


  /**
   * @param ccAddr the ccAddr to set
   */
  public void setCcAddr(final String ccAddr) {
    this.ccAddr = ccAddr;
  }
}

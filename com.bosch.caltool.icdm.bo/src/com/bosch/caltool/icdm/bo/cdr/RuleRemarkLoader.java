package com.bosch.caltool.icdm.bo.cdr;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.persistence.EntityManager;import javax.persistence.Query;import javax.persistence.TypedQuery;import com.bosch.caltool.dmframework.bo.AbstractBusinessObject;import com.bosch.caltool.dmframework.bo.ServiceData;import com.bosch.caltool.dmframework.common.ObjectStore;import com.bosch.caltool.icdm.common.exception.DataException;import com.bosch.caltool.icdm.database.entity.cdr.GttRuleRemark;import com.bosch.caltool.icdm.database.entity.cdr.TRuleRemark;import com.bosch.caltool.icdm.model.MODEL_TYPE;import com.bosch.caltool.icdm.model.cdr.RuleRemark;import com.bosch.ssd.icdm.model.CDRRule;/** * Loader class for RuleRemarks * * @author dja7cob */public class RuleRemarkLoader extends AbstractBusinessObject<RuleRemark, TRuleRemark> {  /**   * Constructor   *   * @param serviceData Service Data   */  public RuleRemarkLoader(final ServiceData serviceData) {    super(serviceData, MODEL_TYPE.RULE_REMARK, TRuleRemark.class);  }  /**   * {@inheritDoc}   */  @Override  protected RuleRemark createDataObject(final TRuleRemark entity) throws DataException {    RuleRemark object = new RuleRemark();    setCommonFields(object, entity);    object.setRuleId(entity.getRuleId());    object.setRevId(entity.getRevId());    object.setRemark(entity.getRemark());    return object;  }  /**   * @param ruleList rules to get unicode remarks   * @return Map of cdr rule, review rule   * @throws DataException exception from DB   */  public Map<CDRRule, RuleRemark> getRulesWithUnicodeRemarks(final List<CDRRule> ruleList) throws DataException {    Map<CDRRule, RuleRemark> ruleRemMap = new HashMap<>();    Map<Long, CDRRule> cdrRuleMap = new HashMap<>();    ruleList.forEach(cdr -> cdrRuleMap.put(cdr.getRuleId().longValue(), cdr));    List<TRuleRemark> results = getByRuleRevIds(ruleList);    for (TRuleRemark ruleRemarkEntity : results) {      ruleRemMap.put(cdrRuleMap.get(ruleRemarkEntity.getRuleId()), createDataObject(ruleRemarkEntity));    }    return ruleRemMap;  }  /**   * @param ruleList rules to get unicode remarks   * @return Map of cdr rule, review rule   * @throws DataException exception from DB   */  public Map<Long, RuleRemark> getRuleIdUnicodeRemarkMap(final List<CDRRule> ruleList) throws DataException {    Map<Long, RuleRemark> ruleRemMap = new HashMap<>();    Map<Long, CDRRule> cdrRuleMap = new HashMap<>();    ruleList.forEach(cdr -> cdrRuleMap.put(cdr.getRuleId().longValue(), cdr));    List<TRuleRemark> results = getByRuleRevIds(ruleList);    for (TRuleRemark ruleRemarkEntity : results) {      ruleRemMap.put(ruleRemarkEntity.getRuleId(), createDataObject(ruleRemarkEntity));    }    return ruleRemMap;  }  /**   * @param ruleId Method to get unicode remarks for all revisions of a rule   * @return Map of rev id, rule remarks   * @throws DataException exception from DB   */  public Map<Long, RuleRemark> getByRuleId(final long ruleId) throws DataException {    TypedQuery<TRuleRemark> query = getEntMgr().createNamedQuery(TRuleRemark.NQ_GET_BY_RULE_ID, TRuleRemark.class);    query.setParameter("ruleId", ruleId);    Map<Long, RuleRemark> ruleIdRuleRmrkMap = new HashMap<>();    for (TRuleRemark entity : query.getResultList()) {      ruleIdRuleRmrkMap.put(entity.getRevId(), createDataObject(entity));    }    return ruleIdRuleRmrkMap;  }  /**   * @param set   * @return   * @throws Exception   */  private List<TRuleRemark> getByRuleRevIds(final List<CDRRule> ruleList) throws DataException {    List<TRuleRemark> resultList = new ArrayList<>();    if (ruleList.size() < 2) {      for (CDRRule cdr : ruleList) {        TypedQuery<TRuleRemark> namedQuery =            getEntMgr().createNamedQuery(TRuleRemark.NQ_GET_BY_RULE_REV_ID, TRuleRemark.class);        namedQuery.setParameter("ruleId", cdr.getRuleId());        namedQuery.setParameter("revId", cdr.getRevId());        resultList.addAll(namedQuery.getResultList());      }    }    else {      EntityManager entMgr = null;      try {        entMgr = ObjectStore.getInstance().getEntityManagerFactory().createEntityManager();        entMgr.getTransaction().begin();        deleteGttRuleRemarks(entMgr);        createTempObjects(ruleList, entMgr);        entMgr.flush();        TypedQuery<TRuleRemark> namedQuery =            entMgr.createNamedQuery(TRuleRemark.NQ_GET_BY_RULE_ID_GTT, TRuleRemark.class);        resultList = namedQuery.getResultList();        deleteGttRuleRemarks(entMgr);        entMgr.getTransaction().rollback();      }      catch (Exception exp) {        throw new DataException(exp.getMessage(), exp);      }      finally {        if ((entMgr != null) && entMgr.isOpen()) {          entMgr.close();        }      }    }    return resultList;  }  /**   * @param ruleList   * @param entMgr   */  private void createTempObjects(final List<CDRRule> ruleList, final EntityManager entMgr) {    GttRuleRemark tempRuleRemark;    long recID = 1;    // Create entities for all the parameters    for (CDRRule rule : ruleList) {      tempRuleRemark = new GttRuleRemark();      tempRuleRemark.setId(recID);      tempRuleRemark.setRuleId(rule.getRuleId().longValue());      tempRuleRemark.setRevId(rule.getRevId().longValue());      entMgr.persist(tempRuleRemark);      recID++;    }  }  /**   * @param entMgr   */  private void deleteGttRuleRemarks(final EntityManager entMgr) {    // Delete the existing records in this temp table, if any    final Query delQuery = entMgr.createNamedQuery(GttRuleRemark.NQ_DELETE_GTT_REMARKS);    delQuery.executeUpdate();  }}
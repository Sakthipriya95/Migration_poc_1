/* * Copyright (c) Robert Bosch GmbH. All rights reserved. */package com.bosch.caltool.icdm.bo.cdr;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.SortedSet;import java.util.TreeSet;import com.bosch.calmodel.caldata.CalData;import com.bosch.caltool.dmframework.bo.AbstractSimpleBusinessObject;import com.bosch.caltool.dmframework.bo.ServiceData;import com.bosch.caltool.icdm.bo.apic.attr.AttributeLoader;import com.bosch.caltool.icdm.bo.apic.attr.AttributeValueLoader;import com.bosch.caltool.icdm.bo.apic.pidc.PidcA2lLoader;import com.bosch.caltool.icdm.bo.apic.pidc.PidcVariantLoader;import com.bosch.caltool.icdm.bo.apic.pidc.PidcVersionAttributeModel;import com.bosch.caltool.icdm.bo.apic.pidc.ProjectAttributeLoader;import com.bosch.caltool.icdm.bo.apic.pidc.ProjectAttributeLoader.LOAD_LEVEL;import com.bosch.caltool.icdm.bo.user.UserLoader;import com.bosch.caltool.icdm.common.exception.DataException;import com.bosch.caltool.icdm.common.exception.IcdmException;import com.bosch.caltool.icdm.common.util.CalDataUtil;import com.bosch.caltool.icdm.common.util.CommonUtils;import com.bosch.caltool.icdm.model.a2l.IParamRuleResponse;import com.bosch.caltool.icdm.model.a2l.ParameterRulesResponse;import com.bosch.caltool.icdm.model.a2l.RuleSetRulesResponse;import com.bosch.caltool.icdm.model.apic.attr.Attribute;import com.bosch.caltool.icdm.model.apic.attr.AttributeValue;import com.bosch.caltool.icdm.model.apic.attr.AttributeValueModel;import com.bosch.caltool.icdm.model.apic.pidc.PidcVariant;import com.bosch.caltool.icdm.model.apic.pidc.PidcVariantAttribute;import com.bosch.caltool.icdm.model.apic.pidc.PidcVersionAttribute;import com.bosch.caltool.icdm.model.cdr.CDRResultFunction;import com.bosch.caltool.icdm.model.cdr.CDRResultParameter;import com.bosch.caltool.icdm.model.cdr.CDRReviewResult;import com.bosch.caltool.icdm.model.cdr.CreateCheckValRuleModel;import com.bosch.caltool.icdm.model.cdr.IParameterAttribute;import com.bosch.caltool.icdm.model.cdr.ParamCollection;import com.bosch.caltool.icdm.model.cdr.ReviewRule;import com.bosch.caltool.icdm.model.cdr.ReviewRuleExt;import com.bosch.caltool.icdm.model.cdr.RuleLinkWrapperData;import com.bosch.caltool.icdm.model.cdr.RuleLinks;import com.bosch.caltool.icdm.model.cdr.RuleRemark;import com.bosch.ssd.icdm.model.CDRRule;import com.bosch.ssd.icdm.model.CDRRuleExt;import com.bosch.ssd.icdm.model.FeatureValueModel;import com.bosch.ssd.icdm.model.SSDCase;import com.bosch.ssd.icdm.model.SSDConfigEnums.ParameterClass;/** * @author rgo7cob */public class ReviewRuleAdapter extends AbstractSimpleBusinessObject {  /**   * @param serviceData ServiceData   */  public ReviewRuleAdapter(final ServiceData serviceData) {    super(serviceData);  }  /**   * @param ruleList Cdr rule list ruleList   * @return the review rule list from icdm model   * @throws DataException DataException   */  public List<ReviewRule> convertSSDRule(final List<CDRRule> ruleList) throws DataException {    List<ReviewRule> reviewRuleList = new ArrayList<>();    RuleRemarkLoader ruleRemarksLoader = new RuleRemarkLoader(new ServiceData());    Map<Long, RuleRemark> ruleRemarksMap = ruleRemarksLoader.getRuleIdUnicodeRemarkMap(ruleList);    for (CDRRule rule : ruleList) {      ReviewRule reviewRule = createReviewRule(rule);      if (null != ruleRemarksMap.get(rule.getRuleId().longValue())) {        RuleRemark ruleRemarks = ruleRemarksMap.get(rule.getRuleId().longValue());        reviewRule.setUnicodeRemarks(ruleRemarks.getRemark());      }      reviewRuleList.add(reviewRule);    }    return reviewRuleList;  }  /**   * @param newCdrRuleList Cdr rule list ruleList   * @param cdrRuleList   * @param list   * @return the review rule list from icdm model   * @throws DataException DataException   */  private Map<CDRRule, ReviewRule> convertSSDRules(final List<CDRRule> ruleList) throws DataException {    Map<CDRRule, ReviewRule> cdrReviewRuleMap = new HashMap<>();    for (CDRRule rule : ruleList) {      ReviewRule reviewRule = createReviewRule(rule);      cdrReviewRuleMap.put(rule, reviewRule);    }    return cdrReviewRuleMap;  }  /**   * Convert CDR Rules to Review Rules   *   * @param cdrRuleList list of CDR Rules   * @return List of Revview rules   * @throws DataException rule convertion error   */  public List<ReviewRuleExt> convertSSDRuleExt(final List<CDRRuleExt> cdrRuleList) throws DataException {    List<ReviewRuleExt> reviewRuleList = new ArrayList<>();    RuleRemarkLoader ruleRmrksLoader = new RuleRemarkLoader(getServiceData());    Map<Long, RuleRemark> revIdRuleRemarkMap = ruleRmrksLoader.getByRuleId(cdrRuleList.get(0).getRuleId().longValue());    for (CDRRuleExt cdrRuleExt : cdrRuleList) {      long revId = cdrRuleExt.getRevId().longValue();      // set the common fields as that of ReviewRule object      ReviewRuleExt reviewRuleExt = null == revIdRuleRemarkMap.get(revId) ? (ReviewRuleExt) createReviewRule(cdrRuleExt)          : (ReviewRuleExt) createReviewRuleWithUnicodeRmrks(cdrRuleExt, revIdRuleRemarkMap.get(revId));      // set the extra fields for the ReviewRuleExt object      setExtraFields(cdrRuleExt, reviewRuleExt);      reviewRuleList.add(reviewRuleExt);    }    return reviewRuleList;  }  /**   * @param cdrRuleExt   * @param ruleRemarks   * @return   * @throws DataException   */  private ReviewRule createReviewRuleWithUnicodeRmrks(final CDRRuleExt cdrRuleExt, final RuleRemark ruleRemarks)      throws DataException {    ReviewRule revRule = createReviewRule(cdrRuleExt);    revRule.setUnicodeRemarks(ruleRemarks.getRemark());    return revRule;  }  /**   * @param cdrRuleExt   * @param reviewRuleExt   */  private void setExtraFields(final CDRRuleExt cdrRuleExt, final ReviewRuleExt reviewRuleExt) {    reviewRuleExt.setRuleOwner(cdrRuleExt.getRuleOwner());    reviewRuleExt.setCoc(cdrRuleExt.getCoc());    reviewRuleExt.setInternalAdaptationDescription(cdrRuleExt.getInternalAdaptationDescription());    reviewRuleExt.setDataDescription(cdrRuleExt.getDataDescription());    reviewRuleExt.setHistorieDescription(cdrRuleExt.getHistorieDescription());    reviewRuleExt.setRuleCreatedUserDispName(        new UserLoader(getServiceData()).getDisplayName(reviewRuleExt.getRuleCreatedUser()));  }  /**   * @param rule   * @return   */  private ReviewRule getReviewRuleObj(final CDRRule rule) {    if (rule instanceof CDRRuleExt) {      return new ReviewRuleExt();    }    return new ReviewRule();  }  /**   * Convert CDRRule to Review Rule   *   * @param rule CDR Rule   * @return Review Rule   * @throws DataException Review rule creation error   */  public ReviewRule createReviewRule(final CDRRule rule) throws DataException {    FeatureAttributeAdapterNew feaAdapter = new FeatureAttributeAdapterNew(getServiceData());    ReviewRule reviewRule = getReviewRuleObj(rule);    reviewRule.setBitWiseRule(rule.getBitWiseRule());    reviewRule.setDcm2ssd(rule.isDcm2ssd());    reviewRule.setDependenciesForDisplay(rule.getDependenciesForDisplay());    List<FeatureValueModel> feaValModelList = rule.getDependencyList();    // To be done.    reviewRule.setDependencyList(feaAdapter.getAttrValSet(feaValModelList, getServiceData()));    reviewRule.setFormula(rule.getFormula());    reviewRule.setFormulaDesc(rule.getFormulaDesc());    reviewRule.setHint(rule.getHint());    reviewRule.setLabelFunction(rule.getLabelFunction());    reviewRule.setLabelId(rule.getLabelId());    reviewRule.setLowerLimit(rule.getLowerLimit());    reviewRule.setMaturityLevel(rule.getMaturityLevel());    if (rule.getParamClass() != null) {      reviewRule.setParamClass(rule.getParamClass().name());    }    reviewRule.setRefValueDispString(rule.getRefValueDispString());    reviewRule.setRefValueDcmString(rule.getRefValueDCMString());    reviewRule.setParameterName(rule.getParameterName());    if (rule.getRefValueCalData() != null) {      reviewRule.setRefValCalData(CalDataUtil.convertCalDataToZippedByteArr(rule.getRefValueCalData(), getLogger()));    }    reviewRule.setRefValue(rule.getRefValue());    reviewRule.setRevId(rule.getRevId());    reviewRule.setReviewMethod(rule.getReviewMethod());    reviewRule.setRuleCreatedDate(rule.getRuleCreatedDate());    reviewRule.setRuleCreatedUser(rule.getRuleCreatedUser());    reviewRule.setRuleId(rule.getRuleId());    if (rule.getSsdCase() != null) {      reviewRule.setSsdCase(rule.getSsdCase().getCharacter());    }    reviewRule.setUnit(rule.getUnit());    reviewRule.setUpperLimit(rule.getUpperLimit());    reviewRule.setValueType(rule.getValueType());    return reviewRule;  }  /**   * @param reviewRuleList reviewRuleList   * @return the Cdr rule   * @throws DataException DataException   */  public List<CDRRule> convertReviewRule(final List<ReviewRule> reviewRuleList) throws DataException {    List<CDRRule> ruleList = new ArrayList<>();    for (ReviewRule reviewRule : reviewRuleList) {      CDRRule rule = createCdrRule(reviewRule);      ruleList.add(rule);    }    return ruleList;  }  /**   * @param reviewRuleList reviewRuleList   * @return the Cdr rule   * @throws DataException DataException   */  public Map<CDRRule, ReviewRule> convertReviewRules(final List<ReviewRule> reviewRuleList) throws DataException {    Map<CDRRule, ReviewRule> cdrRuleRvwRuleMap = new HashMap<>();    for (ReviewRule reviewRule : reviewRuleList) {      CDRRule rule = createCdrRule(reviewRule);      cdrRuleRvwRuleMap.put(rule, reviewRule);    }    return cdrRuleRvwRuleMap;  }  /**   * @param reviewRule reviewRule   * @return the new Rule   * @throws DataException DataException   */  public CDRRule createCdrRule(final ReviewRule reviewRule) throws DataException {    FeatureAttributeAdapterNew feaAdapter = new FeatureAttributeAdapterNew(getServiceData());    CDRRule rule = new CDRRule();    // 1st setting the param name as it is used for Bitwise formula desc    rule.setParameterName(reviewRule.getParameterName());    // If complex rule was earlier used , now it is removed then remove bit wise rule text also    if (CommonUtils.isNull(reviewRule.getFormulaDesc()) && CommonUtils.isNotEmptyString(reviewRule.getBitWiseRule()) &&        reviewRule.getBitWiseRule().equals("COMPLEX RULE!")) {      rule.setBitWiseRule(null);    }    else {      rule.setBitWiseRule(reviewRule.getBitWiseRule());    }    rule.setDcm2ssd(reviewRule.isDcm2ssd());    rule.setDependenciesForDisplay(reviewRule.getDependenciesForDisplay());    // to be done    rule.setDependencyList(feaAdapter.getFeaValModelList(reviewRule.getDependencyList()));    rule.setFormula(reviewRule.getFormula());    // If it is bit wise rule , then formula desc need not be set as it is already set while setting bitwise text    if (!(CommonUtils.isNotNull(rule.getBitWiseRule()) && CommonUtils.isNotNull(rule.getFormulaDesc()) &&        rule.getFormulaDesc().contains(CDRRule.BIT))) {      rule.setFormulaDesc(reviewRule.getFormulaDesc());    }    rule.setHint(reviewRule.getHint());    rule.setLabelFunction(reviewRule.getLabelFunction());    rule.setLabelId(reviewRule.getLabelId());    rule.setLowerLimit(reviewRule.getLowerLimit());    rule.setMaturityLevel(reviewRule.getMaturityLevel());    if (reviewRule.getParamClass() != null) {      rule.setParamClass(ParameterClass.getType(reviewRule.getParamClass()));    }    rule.setRefValCalData(getRefValForRule(reviewRule));    rule.setRefValue(reviewRule.getRefValue());    rule.setRefValueDCMString(reviewRule.getRefValueDcmString());    rule.setRevId(reviewRule.getRevId());    rule.setReviewMethod(reviewRule.getReviewMethod());    rule.setRuleCreatedDate(reviewRule.getRuleCreatedDate());    rule.setRuleCreatedUser(reviewRule.getRuleCreatedUser());    rule.setRuleId(reviewRule.getRuleId());    rule.setSsdCase(SSDCase.getType(reviewRule.getSsdCase()));    rule.setUnit(reviewRule.getUnit());    rule.setUpperLimit(reviewRule.getUpperLimit());    rule.setValueType(reviewRule.getValueType());    return rule;  }  /**   * Get Refvalue as cal data from the review rule   *   * @param rule review rule   * @return caldata   * @throws DataException cal data creation error   */  public CalData getRefValForRule(final ReviewRule rule) throws DataException {    CalData caldataObj = null;    try {      caldataObj = CalDataUtil.getCalDataObj(rule.getRefValueCalData());    }    catch (ClassNotFoundException | IOException exp) {      throw new DataException("error when creating cal data object" + exp);    }    return caldataObj;  }  /**   * @param cdrRuleMap cdrRuleMap   * @return the Converted SSD rule map   * @throws DataException DataException   */  public Map<String, List<ReviewRule>> convertSSDRule(final Map<String, List<CDRRule>> cdrRuleMap)      throws DataException {    Map<String, List<ReviewRule>> convertedMap = new HashMap<>();    for (Entry<String, List<CDRRule>> entry : cdrRuleMap.entrySet()) {      String paramName = entry.getKey();      List<ReviewRule> reviewRuleList = convertSSDRule(entry.getValue());      convertedMap.put(paramName, reviewRuleList);    }    return convertedMap;  }  /**   * @param paramID parameter ID   * @param ruleSetId rule set ID   * @return check value model   * @throws IcdmException data retrieval error   */  public CreateCheckValRuleModel createCheclValueRule(final Long paramID, final Long ruleSetId) throws IcdmException {    CreateCheckValRuleModel ruleModel = new CreateCheckValRuleModel();    CDRResultParameter param = new CDRResultParameterLoader(getServiceData()).getDataObjectByID(paramID);    CDRReviewResult reviewResult = new CDRReviewResultLoader(getServiceData()).getDataObjectByID(param.getResultId());    ruleModel.setResultName(reviewResult.getName());    ruleModel.setCheckedValueObj(param.getCheckedValue());    ParamCollection paramCollection;    if (ruleSetId != null) {      paramCollection = new RuleSetLoader(getServiceData()).getDataObjectByID(reviewResult.getRsetId());      createChkValRuleForRuleSet(param, paramCollection, ruleModel);    }    else {      createChkValRuleForFuncParams(param, ruleModel);    }    return ruleModel;  }  /**   * @param param   * @param paramCollection   * @throws IcdmException   */  private void createChkValRuleForRuleSet(final CDRResultParameter param, final ParamCollection paramCollection,      final CreateCheckValRuleModel ruleModel)      throws IcdmException {    ParameterRuleFetcher ruleFetcher = new ParameterRuleFetcher(getServiceData());    // Fetch all functions    RuleSetRulesResponse rulesOutput = ruleFetcher.createRuleSetRulesOutput(paramCollection.getId());    ruleModel.setRulesetRules(rulesOutput);    boolean canCreateEditRule = createOrEditRule(param, rulesOutput, ruleModel);    ruleModel.setCanCreateRule(canCreateEditRule);  }  /**   * c   *   * @param param   * @param ruleModel   * @param cdrRuleList   * @throws IcdmException   */  private void createChkValRuleForFuncParams(final CDRResultParameter param, final CreateCheckValRuleModel ruleModel)      throws IcdmException {    CDRResultFunction resultFunc = new CDRResultFunctionLoader(getServiceData()).getDataObjectByID(param.getRvwFunId());    ParameterRuleFetcher ruleFetcher = new ParameterRuleFetcher(getServiceData());    ParameterRulesResponse paramRulesOutput =        ruleFetcher.createParamRulesOutput(resultFunc.getName(), resultFunc.getFunctionVers(), "true", null);    ruleModel.setParamRules(paramRulesOutput);    boolean canCreateEditRule = createOrEditRule(param, paramRulesOutput, ruleModel);    ruleModel.setCanCreateRule(canCreateEditRule);  }  /**   * @param param   * @param ruleModel   * @param selParam   * @param cdrRuleList   * @param canCreateEditRule   * @return   * @throws IcdmException   */  private boolean createOrEditRule(final CDRResultParameter param, final IParamRuleResponse paramRules,      final CreateCheckValRuleModel ruleModel)      throws IcdmException {    boolean canCreateEditRule = true;    List<ReviewRule> ruleList = (List<ReviewRule>) paramRules.getReviewRuleMap().get(param.getName());    if (!paramRules.getAttrMap().isEmpty()) {      Map<Attribute, AttributeValue> attrDepForRule = new HashMap<>();      canCreateEditRule = getRuleToEdit(param, ruleList, attrDepForRule, paramRules, ruleModel);      // new rule to be created with the dependancy      if (ruleModel.getRuleToBeEdited() == null) {        SortedSet<AttributeValueModel> attrValModel = new TreeSet<>();        for (Map.Entry<Attribute, AttributeValue> entry : attrDepForRule.entrySet()) {          AttributeValueModel attrVal = new AttributeValueModel();          attrVal.setAttr(entry.getKey());          attrVal.setValue(entry.getValue());          attrValModel.add(attrVal);        }        ruleModel.setAttrValModel(attrValModel);      }    }    else {      if ((ruleList != null) && !ruleList.isEmpty()) {        ruleModel.setRuleToBeEdited(ruleList.get(0));      }    }    return canCreateEditRule;  }  /**   * @param param   * @param cdrRuleList   * @param functionParameter   * @param canCreateRule   * @param var   * @param attrDepForRule   * @param attrDepForRule   * @param paramRules   * @param ruleModel   * @return   * @throws IcdmException   */  private boolean getRuleToEdit(final CDRResultParameter param, final List<ReviewRule> cdrRuleList,      final Map<Attribute, AttributeValue> attrDepForRule, final IParamRuleResponse paramRules,      final CreateCheckValRuleModel ruleModel)      throws IcdmException {    boolean canCreateRule = true;    CDRReviewResult reviewResult = new CDRReviewResultLoader(getServiceData()).getDataObjectByID(param.getResultId());    PidcVariant var = null;    if (reviewResult.getPrimaryVariantId() != null) {      var = new PidcVariantLoader(getServiceData()).getDataObjectByID(reviewResult.getPrimaryVariantId());    }    // load pidc details    ProjectAttributeLoader pidcAttrLoader = new ProjectAttributeLoader(getServiceData());    PidcVersionAttributeModel versAttrModel = pidcAttrLoader.createModel(        new PidcA2lLoader(getServiceData()).getDataObjectByID(reviewResult.getPidcA2lId()).getPidcVersId(),        LOAD_LEVEL.L3_VAR_ATTRS);    ruleModel.setPidcVersName(versAttrModel.getPidcVersion().getName());    Map<Long, PidcVersionAttribute> attributesAll = versAttrModel.getPidcVersAttrMap();    if ((cdrRuleList == null) || cdrRuleList.isEmpty()) {      canCreateRule =          paramWithDepNoRule(param.getName(), var, attrDepForRule, attributesAll, paramRules, ruleModel, versAttrModel);    }    else {      for (ReviewRule rule : cdrRuleList) {        boolean sameAttrValDep = true;        // get the dependent attr values for the rule        SortedSet<AttributeValueModel> attrVal = rule.getDependencyList();        if (attrVal.isEmpty()) {          sameAttrValDep = false;          getAttrDepInDefRuleCase(param.getName(), attrVal, paramRules);        }        for (AttributeValueModel depAttrVal : attrVal) {          PidcVersionAttribute pidcAttr = attributesAll.get(depAttrVal.getAttr().getId());          AttributeValue attributeValue = null;          if (pidcAttr != null) {            attributeValue = getPIDCDepAttrVal(var, pidcAttr, versAttrModel);          }          if (attributeValue == null) {            ruleModel.setErroMsg("Dependant attributes values are not set in pidc/defined in sub-variant level");            canCreateRule = false;            break;          }          // add dep attr values to map inorder to create new rule          attrDepForRule.put(depAttrVal.getAttr(), attributeValue);          // same attr value -> rule edit else rule create          if ((depAttrVal.getValue() != null) && (attributeValue.getId().equals(depAttrVal.getValue().getId())) &&              sameAttrValDep) {            sameAttrValDep = true;          }          else {            sameAttrValDep = false;          }        }        if (sameAttrValDep) {          ruleModel.setRuleToBeEdited(rule);          break;        }      }    }    return canCreateRule;  }  /**   * @param functionParameter   * @param var   * @param attrDepForRule   * @param canCreateRule   * @param attributesAll   * @param paramRules   * @param ruleModel   * @return   * @throws DataException   * @throws ApicWebServiceException   */  private boolean paramWithDepNoRule(final String paramName, final PidcVariant var,      final Map<Attribute, AttributeValue> attrDepForRule, final Map<Long, PidcVersionAttribute> attributesAll,      final IParamRuleResponse paramRules, final CreateCheckValRuleModel ruleModel,      final PidcVersionAttributeModel versAttrModel)      throws DataException {    boolean canCreateRule = true;    SortedSet<AttributeValueModel> attrValSet = new TreeSet<>();    getAttrDepInDefRuleCase(paramName, attrValSet, paramRules);    for (AttributeValueModel depAttrVal : attrValSet) {      PidcVersionAttribute pidcAttr = attributesAll.get(depAttrVal.getAttr().getId());      AttributeValue attributeValue = getPIDCDepAttrVal(var, pidcAttr, versAttrModel);      if (attributeValue == null) {        ruleModel.setErroMsg("Dependant attributes values are not set in pidc/defined in sub-variant level");        canCreateRule = false;        break;      }      // add dep attr values to map inorder to create new rule      attrDepForRule.put(depAttrVal.getAttr(), attributeValue);    }    return canCreateRule;  }  /**   * @param var   * @param pidcAttr   * @param versAttrModel   * @param attributeValue   * @return   * @throws DataException   */  private AttributeValue getPIDCDepAttrVal(final PidcVariant var, final PidcVersionAttribute pidcAttr,      final PidcVersionAttributeModel versAttrModel)      throws DataException {    Long attrValId = null;    if (pidcAttr.isAtChildLevel() && (var != null)) {      PidcVariantAttribute pidcAttributeVar =          versAttrModel.getAllVariantAttributeMap().get(var.getId()).get(pidcAttr.getAttrId());      // get the attribute value if its not in sub-variant      if (!pidcAttributeVar.isAtChildLevel()) {        attrValId = pidcAttributeVar.getValueId();      }    }    else {      attrValId = pidcAttr.getValueId();    }    if (attrValId == null) {      return null;    }    return new AttributeValueLoader(getServiceData()).getDataObjectByID(attrValId);  }  /**   * @param cdrRuleList   * @param functionParameter   * @param attrVal   * @param paramRules   * @throws DataException   */  private void getAttrDepInDefRuleCase(final String paramName, final SortedSet<AttributeValueModel> attrVal,      final IParamRuleResponse paramRules)      throws DataException {    List<IParameterAttribute> dependencyAttrset = (List<IParameterAttribute>) paramRules.getAttrMap().get(paramName);    if (null != dependencyAttrset) {      for (IParameterAttribute paramAttr : dependencyAttrset) {        AttributeValueModel attrValModel = new AttributeValueModel();        attrValModel.setAttr(new AttributeLoader(getServiceData()).getDataObjectByID(paramAttr.getAttrId()));        attrValModel.setValue(null);        attrVal.add(attrValModel);      }    }  }  /**   * Converts DCM String to CalData object   *   * @param dcmStr DCM String   * @param paramName Parameter name   * @return CalData   */  public CalData dcmToCalData(final String dcmStr, final String paramName) {    return CalDataUtil.dcmToCalDataExt(dcmStr, paramName, getLogger());  }  /**   * @param rulesMap param cdr map   * @return param reviewrule map for cdr rule   * @throws DataException exception   */  public Map<String, List<ReviewRule>> fetchReviewRuleForCdr(final Map<String, List<CDRRule>> rulesMap)      throws DataException {    Map<String, List<ReviewRule>> reviewRuleMap = new HashMap<>();    List<CDRRule> cdrRuleList = new ArrayList<>();    Map<String, Map<CDRRule, ReviewRule>> paramCdrRevRuleMap = new HashMap<>();    RuleRemarkLoader rmksLoader = new RuleRemarkLoader(getServiceData());    for (Entry<String, List<CDRRule>> ruleEntry : rulesMap.entrySet()) {      String paramName = ruleEntry.getKey();      Map<CDRRule, ReviewRule> cdrRvwRuleMap = convertSSDRules(ruleEntry.getValue());      if (null == paramCdrRevRuleMap.get(paramName)) {        paramCdrRevRuleMap.put(paramName, cdrRvwRuleMap);      }      else {        paramCdrRevRuleMap.get(paramName).putAll(cdrRvwRuleMap);      }      cdrRuleList.addAll(cdrRvwRuleMap.keySet());    }    Map<Long, RuleRemark> cdrUnicodeRmksMap = rmksLoader.getRuleIdUnicodeRemarkMap(cdrRuleList);    // Map - Rule Id, Value - List of RuleLinks    Map<Long, List<RuleLinks>> ruleIdLinksMap = new RuleLinksLoader(getServiceData()).getRuleIdLinksMap(cdrRuleList);    for (Entry<String, Map<CDRRule, ReviewRule>> cdrRevRule : paramCdrRevRuleMap.entrySet()) {      List<ReviewRule> revRuleList = new ArrayList<>();      for (Entry<CDRRule, ReviewRule> map : cdrRevRule.getValue().entrySet()) {        ReviewRule revRule = map.getValue();        long ruleId = map.getKey().getRuleId().longValue();        if (CommonUtils.isNotNull(cdrUnicodeRmksMap.get(ruleId))) {          revRule.setUnicodeRemarks(cdrUnicodeRmksMap.get(ruleId).getRemark());        }        List<RuleLinks> ruleLinksList = ruleIdLinksMap.get(ruleId);        if (CommonUtils.isNotEmpty(ruleLinksList)) {          RuleLinkWrapperData ruleLinksWrapperData = new RuleLinkWrapperData();          ruleLinksWrapperData.setListOfExistingLinksForSelRule(ruleLinksList);          revRule.setRuleLinkWrapperData(ruleLinksWrapperData);        }        revRuleList.add(revRule);      }      reviewRuleMap.put(cdrRevRule.getKey(), revRuleList);    }    return reviewRuleMap;  }}
/* * Copyright (c) Robert Bosch GmbH. All rights reserved. */package com.bosch.caltool.apic.ws.rest.service.cdr;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.SortedSet;import javax.ws.rs.POST;import javax.ws.rs.PUT;import javax.ws.rs.Path;import javax.ws.rs.Produces;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.Response;import com.bosch.caltool.apic.ws.common.WsCommonConstants;import com.bosch.caltool.apic.ws.rest.annotation.CompressData;import com.bosch.caltool.cdfwriter.exception.CDFWriterException;import com.bosch.caltool.icdm.bo.cdr.FeatureAttributeAdapterNew;import com.bosch.caltool.icdm.bo.cdr.IRuleManager;import com.bosch.caltool.icdm.bo.cdr.ReviewRuleAdapter;import com.bosch.caltool.icdm.bo.cdr.RuleRemarkHandler;import com.bosch.caltool.icdm.bo.cdr.RuleSetHandler;import com.bosch.caltool.icdm.common.exception.IcdmException;import com.bosch.caltool.icdm.model.apic.attr.AttributeValueModel;import com.bosch.caltool.icdm.model.cdr.ConfigBasedRuleInput;import com.bosch.caltool.icdm.model.cdr.ExportCDFxInputData;import com.bosch.caltool.icdm.model.cdr.ReviewRule;import com.bosch.caltool.icdm.model.cdr.ReviewRuleExt;import com.bosch.caltool.icdm.model.cdr.ReviewRuleParamCol;import com.bosch.caltool.icdm.model.cdr.RuleSet;import com.bosch.ssd.icdm.model.CDRRule;import com.bosch.ssd.icdm.model.CDRRuleExt;import com.bosch.ssd.icdm.model.FeatureValueModel;import com.bosch.ssd.icdm.model.SSDMessage;/** * Services for maintenance and retrieval of Rule-Set rules * * @author rgo7cob */@Path("/" + WsCommonConstants.RWS_CONTEXT_CDR + "/" + WsCommonConstants.RWS_REVIEW_RULE_SET_RULE)public class RuleSetRuleService extends AbstractRuleService {  /**   * @param reviewRuleParamCol reviewRuleParamCol   * @return Response sucess or failure   * @throws IcdmException IcdmException   */  @POST  @Produces({ MediaType.APPLICATION_JSON })  @CompressData  public Response create(final ReviewRuleParamCol<RuleSet> reviewRuleParamCol) throws IcdmException {    Map<CDRRule, ReviewRule> inputCdrRuleMap =        newRuleAdapter().convertReviewRules(reviewRuleParamCol.getReviewRuleList());    IRuleManager ruleManager = newRuleManager(reviewRuleParamCol);    List<CDRRule> cdrRuleList = new ArrayList<>(inputCdrRuleMap.keySet());    validateComplexRules(cdrRuleList);    SSDMessage ssdMessage = ruleManager.createMultipleRules(cdrRuleList);    getLogger().info("Rule creation finished. SSD Message : {}", ssdMessage);    // Create Unicode Remarks and Links For the Rule created    Map<CDRRule, ReviewRule> unicodermksAndLinksTobeCreatedMap =        collectUnicodeRmrksAndLinksForCreate(inputCdrRuleMap, ruleManager.readRule(getParamNames(cdrRuleList)));    // Create Unicode Remarks    new RuleRemarkHandler(getServiceData()).createUpdDelRmrks(unicodermksAndLinksTobeCreatedMap);    // Create Links    new RuleSetHandler(getServiceData()).createUpdDelLinks(unicodermksAndLinksTobeCreatedMap);    getLogger().info("Unicode and Links creation finished.");    return Response.ok(toSSDMessageWrapper(ssdMessage)).build();  }  /**   * @param reviewRuleParamCol param collection with rules, input   * @return Response with list of functions   * @throws IcdmException IcdmException   */  @PUT  @Produces({ MediaType.APPLICATION_JSON })  @CompressData  public Response update(final ReviewRuleParamCol<RuleSet> reviewRuleParamCol) throws IcdmException {    ReviewRule inputReviewRule = reviewRuleParamCol.getReviewRule();    CDRRule inputCdrRule = newRuleAdapter().createCdrRule(inputReviewRule);    validateComplexRule(inputCdrRule);    IRuleManager ruleManager = newRuleManager(reviewRuleParamCol);    SSDMessage ssdMessage = SSDMessage.SUCCESS;    boolean ruleUpdateRequired = isRuleUpdateRequired(inputCdrRule, ruleManager);    //Update the Input Review Rule    new RuleSetHandler(getServiceData()).getUpdInputRvwRule(inputReviewRule, ruleUpdateRequired);    if (ruleUpdateRequired) {      ssdMessage = ruleManager.updateRule(inputCdrRule);    }    getLogger().info("Rule Updation finished. SSD Message : {}", ssdMessage);    // Update Unicode Remarks and Links For the Rule updated    Map<CDRRule, ReviewRule> unicodeRmrksAndLinksForUpd =        collectUnicodeRmrksAndLinksForUpd(inputCdrRule, inputReviewRule, ruleManager, ruleUpdateRequired);    // Update or delete Unicode Remarks    new RuleRemarkHandler(getServiceData()).createUpdDelRmrks(unicodeRmrksAndLinksForUpd);    // Update or delete Links    new RuleSetHandler(getServiceData()).createUpdDelLinks(unicodeRmrksAndLinksForUpd);    getLogger().info("Unicode and Links Updation finished.");    return Response.ok(toSSDMessageWrapper(ssdMessage)).build();  }  /**   * @param reviewRuleParamCol param collection with rules, input   * @return Response with list of functions   * @throws IcdmException IcdmException   */  @POST  @Path(WsCommonConstants.RWS_DELETE)  @Produces({ MediaType.APPLICATION_JSON })  @CompressData  public Response delete(final ReviewRuleParamCol<RuleSet> reviewRuleParamCol) throws IcdmException {    List<CDRRule> cdrRules = newRuleAdapter().convertReviewRule(reviewRuleParamCol.getReviewRuleList());    SSDMessage ssdMessage = newRuleManager(reviewRuleParamCol).deleteMultipleRules(cdrRules);    getLogger().info("Rule deletion finished. SSD Message = {}", ssdMessage);    return Response.ok(toSSDMessageWrapper(ssdMessage)).build();  }  /**   * @param reviewRuleParamCol param collection with rules, input   * @return Response with list of functions   * @throws IcdmException IcdmException   */  @POST  @Path(WsCommonConstants.RWS_RULES_FOR_PARAM)  @Produces({ MediaType.APPLICATION_JSON })  @CompressData  public Response readRuleForParam(final ReviewRuleParamCol<RuleSet> reviewRuleParamCol) throws IcdmException {    List<CDRRule> cdrRules =        newRuleManager(reviewRuleParamCol).readRule(reviewRuleParamCol.getReviewRule().getParameterName());    List<ReviewRule> reviewRuleList = newRuleAdapter().convertSSDRule(cdrRules);    reviewRuleParamCol.setReviewRuleList(reviewRuleList);    getLogger().info("Number of rules retrieved = {}", reviewRuleList.size());    return Response.ok(reviewRuleParamCol).build();  }  /**   * @param configInput search input   * @return Response with list of functions   * @throws IcdmException IcdmException   */  @POST  @Path(WsCommonConstants.RWS_RULES_FOR_PARAM_WITH_DEP)  @Produces({ MediaType.APPLICATION_JSON })  @CompressData  public Response readRuleForParamWithDep(final ConfigBasedRuleInput<RuleSet> configInput) throws IcdmException {    FeatureAttributeAdapterNew featureAttributeAdapter = new FeatureAttributeAdapterNew(getServiceData());    List<FeatureValueModel> feaValModelList = new ArrayList<>();    feaValModelList.addAll(featureAttributeAdapter.createFeaValModel(configInput.getAttrValueModSet()).values());    Map<String, List<CDRRule>> cdrRules =        newRuleManager(configInput.getParamCol()).readRuleForDependency(configInput.getLabelNames(), feaValModelList);    Map<String, List<ReviewRule>> retMap = newRuleAdapter().convertSSDRule(cdrRules);    getLogger().info("Number of parameters in response = {}", retMap.size());    return Response.ok(retMap).build();  }  /**   * @param exportInputData conigInput   * @return Response with list of functions   * @throws IcdmException IcdmException   * @throws CDFWriterException exception   */  @POST  @Path(WsCommonConstants.RWS_EXPORT_RULESET_AS_CDFX)  @Produces({ MediaType.APPLICATION_OCTET_STREAM })  @CompressData  public Response exportRuleSetCalDataAsCdfx(final ExportCDFxInputData exportInputData)      throws IcdmException, CDFWriterException {    FeatureAttributeAdapterNew featureAttributeAdapter = new FeatureAttributeAdapterNew(getServiceData());    List<FeatureValueModel> feaValModelList = new ArrayList<>();    feaValModelList.addAll(featureAttributeAdapter.createFeaValModel(exportInputData.getAttrValueModSet()).values());    // Fetch CDRRules for given params and attribute value dependency    Map<String, List<CDRRule>> cdrRules = newRuleManager(exportInputData.getParamCol())        .readRuleForDependency(exportInputData.getLabelNames(), feaValModelList);    return Response.ok(new RuleSetHandler(getServiceData()).exportCaldataFromCdrRuleAsCdfxFile(cdrRules)).build();  }  /**   * @param configInput search input   * @return Response with list of functions   * @throws IcdmException IcdmException   */  @POST  @Path(WsCommonConstants.RWS_SEARCH)  @Produces({ MediaType.APPLICATION_JSON })  @CompressData  public Response searchRuleForDep(final ConfigBasedRuleInput<RuleSet> configInput) throws IcdmException {    SortedSet<AttributeValueModel> attrValueModSet = configInput.getAttrValueModSet();    FeatureAttributeAdapterNew adapter = new FeatureAttributeAdapterNew(getServiceData());    List<FeatureValueModel> feaValModelList = adapter.getFeaValModelList(attrValueModSet);    Map<String, List<CDRRule>> cdrRuleMap =        newRuleManager(configInput.getParamCol()).readRuleForDependency(configInput.getLabelNames(), feaValModelList);    Map<String, List<ReviewRule>> retMap = newRuleAdapter().convertSSDRule(cdrRuleMap);    getLogger().info("Number of parameters in response = {}", retMap.size());    return Response.ok(retMap).build();  }  /**   * @param reviewRuleParamCol param collection with rules, input   * @return Response with list of rules   * @throws IcdmException IcdmException   */  @POST  @Path(WsCommonConstants.RWS_RULE_HISTORY)  @Produces({ MediaType.APPLICATION_JSON })  @CompressData  public Response getRuleHistory(final ReviewRuleParamCol<RuleSet> reviewRuleParamCol) throws IcdmException {    ReviewRuleAdapter adapter = newRuleAdapter();    List<CDRRuleExt> cdrRuleList =        newRuleManager(reviewRuleParamCol).getRuleHistory(reviewRuleParamCol.getReviewRule());    List<ReviewRuleExt> reviewRuleList = adapter.convertSSDRuleExt(cdrRuleList);    getLogger().info("Number of rule history records = {}", reviewRuleList.size());    return Response.ok(reviewRuleList).build();  }  /**   * @param reviewRuleParamCol param collection with rules, input   * @return Response with list of rules   * @throws IcdmException IcdmException   */  @POST  @Path(WsCommonConstants.RWS_COMPLI_RULE_HISTORY)  @Produces({ MediaType.APPLICATION_JSON })  @CompressData  public Response getCompliRuleHistory(final ReviewRuleParamCol<RuleSet> reviewRuleParamCol) throws IcdmException {    ReviewRuleAdapter adapter = newRuleAdapter();    List<CDRRuleExt> cdrRuleList =        newRuleManager(reviewRuleParamCol).getRuleHistoryForNodeCompli(reviewRuleParamCol.getReviewRule());    List<ReviewRuleExt> reviewRuleList = adapter.convertSSDRuleExt(cdrRuleList);    getLogger().info("Number of rule history records = {}", reviewRuleList.size());    return Response.ok(reviewRuleList).build();  }}
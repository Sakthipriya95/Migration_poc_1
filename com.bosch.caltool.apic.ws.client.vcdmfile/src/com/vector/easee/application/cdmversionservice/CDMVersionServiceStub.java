/**
 * CDMVersionServiceStub.java This file was auto-generated from WSDL by the Apache Axis2 version: 1.6.2 Built on : Apr
 * 17, 2012 (05:33:49 IST)
 */
package com.vector.easee.application.cdmversionservice;

import javax.xml.namespace.QName;


/*
 * CDMVersionServiceStub java implementation
 */


public class CDMVersionServiceStub extends org.apache.axis2.client.Stub {

  protected org.apache.axis2.description.AxisOperation[] _operations;

  // hashmaps to keep the fault mapping
  private final java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
  private final java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
  private final java.util.HashMap faultMessageMap = new java.util.HashMap();

  private static int counter = 0;

  private static synchronized java.lang.String getUniqueSuffix() {
    // reset the counter if it is greater than 99999
    if (counter > 99999) {
      counter = 0;
    }
    counter = counter + 1;
    return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
  }


  private void populateAxisService() throws org.apache.axis2.AxisFault {

    // creating the Service with a unique name
    this._service = new org.apache.axis2.description.AxisService("CDMVersionService" + getUniqueSuffix());
    addAnonymousOperations();

    // creating the operations
    org.apache.axis2.description.AxisOperation __operation;

    this._operations = new org.apache.axis2.description.AxisOperation[18];

    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "setElementAttributes"));
    this._service.addOperation(__operation);


    this._operations[0] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "getElementAttributes"));
    this._service.addOperation(__operation);


    this._operations[1] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "getVersionAttributes"));
    this._service.addOperation(__operation);


    this._operations[2] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "searchContent"));
    this._service.addOperation(__operation);


    this._operations[3] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "getContentAttributes"));
    this._service.addOperation(__operation);


    this._operations[4] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "fetchArtifact"));
    this._service.addOperation(__operation);


    this._operations[5] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "checkOut"));
    this._service.addOperation(__operation);


    this._operations[6] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "getConfigState"));
    this._service.addOperation(__operation);


    this._operations[7] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "getSystemAttributes"));
    this._service.addOperation(__operation);


    this._operations[8] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "checkIn"));
    this._service.addOperation(__operation);


    this._operations[9] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "insertIntoContainer"));
    this._service.addOperation(__operation);


    this._operations[10] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "setLifecycleState"));
    this._service.addOperation(__operation);


    this._operations[11] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "deleteObject"));
    this._service.addOperation(__operation);


    this._operations[12] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "setContentAttributes"));
    this._service.addOperation(__operation);


    this._operations[13] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "setVersionAttributes"));
    this._service.addOperation(__operation);


    this._operations[14] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "isCheckedIn"));
    this._service.addOperation(__operation);


    this._operations[15] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "removeFromContainer"));
    this._service.addOperation(__operation);


    this._operations[16] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
        "createObject"));
    this._service.addOperation(__operation);


    this._operations[17] = __operation;


  }

  // populates the faults
  private void populateFaults() {

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetElementAttributes"),
        "com.vector.easee.application.cdmversionservice.SetElementAttributes_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetElementAttributes"),
        "com.vector.easee.application.cdmversionservice.SetElementAttributes_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetElementAttributes"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetElementAttributes"),
        "com.vector.easee.application.cdmversionservice.GetElementAttributes_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetElementAttributes"),
        "com.vector.easee.application.cdmversionservice.GetElementAttributes_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetElementAttributes"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetVersionAttributes"),
        "com.vector.easee.application.cdmversionservice.GetVersionAttributes_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetVersionAttributes"),
        "com.vector.easee.application.cdmversionservice.GetVersionAttributes_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetVersionAttributes"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SearchContent"),
        "com.vector.easee.application.cdmversionservice.SearchContent_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SearchContent"),
        "com.vector.easee.application.cdmversionservice.SearchContent_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SearchContent"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetContentAttributes"),
        "com.vector.easee.application.cdmversionservice.GetContentAttributes_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetContentAttributes"),
        "com.vector.easee.application.cdmversionservice.GetContentAttributes_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetContentAttributes"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "FetchArtifact"),
        "com.vector.easee.application.cdmversionservice.FetchArtifact_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "FetchArtifact"),
        "com.vector.easee.application.cdmversionservice.FetchArtifact_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "FetchArtifact"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "CheckOut"),
        "com.vector.easee.application.cdmversionservice.CheckOutFault");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "CheckOut"),
        "com.vector.easee.application.cdmversionservice.CheckOutFault");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "CheckOut"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetConfigState"),
        "com.vector.easee.application.cdmversionservice.GetConfigState_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetConfigState"),
        "com.vector.easee.application.cdmversionservice.GetConfigState_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetConfigState"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetSystemAttributes"),
        "com.vector.easee.application.cdmversionservice.GetSystemAttributes_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetSystemAttributes"),
        "com.vector.easee.application.cdmversionservice.GetSystemAttributes_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "GetSystemAttributes"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "CheckIn"),
        "com.vector.easee.application.cdmversionservice.CheckInFault");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "CheckIn"),
        "com.vector.easee.application.cdmversionservice.CheckInFault");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "CheckIn"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "InsertIntoContainer"),
        "com.vector.easee.application.cdmversionservice.InsertIntoContainerFault");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "InsertIntoContainer"),
        "com.vector.easee.application.cdmversionservice.InsertIntoContainerFault");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "InsertIntoContainer"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetLifecycleState"),
        "com.vector.easee.application.cdmversionservice.SetLifecycleState_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetLifecycleState"),
        "com.vector.easee.application.cdmversionservice.SetLifecycleState_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetLifecycleState"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "DeleteObject"),
        "com.vector.easee.application.cdmversionservice.DeleteObjectFault");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "DeleteObject"),
        "com.vector.easee.application.cdmversionservice.DeleteObjectFault");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "DeleteObject"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetContentAttributes"),
        "com.vector.easee.application.cdmversionservice.SetContentAttributes_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetContentAttributes"),
        "com.vector.easee.application.cdmversionservice.SetContentAttributes_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetContentAttributes"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetVersionAttributes"),
        "com.vector.easee.application.cdmversionservice.SetVersionAttributes_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetVersionAttributes"),
        "com.vector.easee.application.cdmversionservice.SetVersionAttributes_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "SetVersionAttributes"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "IsCheckedIn"),
        "com.vector.easee.application.cdmversionservice.IsCheckedIn_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "IsCheckedIn"),
        "com.vector.easee.application.cdmversionservice.IsCheckedIn_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "IsCheckedIn"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "RemoveFromContainer"),
        "com.vector.easee.application.cdmversionservice.RemoveFromContainer_faultMsg");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "RemoveFromContainer"),
        "com.vector.easee.application.cdmversionservice.RemoveFromContainer_faultMsg");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "RemoveFromContainer"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");

    this.faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "CreateObject"),
        "com.vector.easee.application.cdmversionservice.CreateObjectFault");
    this.faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "CreateObject"),
        "com.vector.easee.application.cdmversionservice.CreateObjectFault");
    this.faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType"), "CreateObject"),
        "com.vector.easee.application.cdmversionservice.CDMVersionServiceStub$ErrorType");


  }

  /**
   * Constructor that takes in a configContext
   */

  public CDMVersionServiceStub(final org.apache.axis2.context.ConfigurationContext configurationContext,
      final java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
    this(configurationContext, targetEndpoint, false);
  }


  /**
   * Constructor that takes in a configContext and useseperate listner
   */
  public CDMVersionServiceStub(final org.apache.axis2.context.ConfigurationContext configurationContext,
      final java.lang.String targetEndpoint, final boolean useSeparateListener) throws org.apache.axis2.AxisFault {
    // To populate AxisService
    populateAxisService();
    populateFaults();

    this._serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext, this._service);


    this._serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(targetEndpoint));
    this._serviceClient.getOptions().setUseSeparateListener(useSeparateListener);


  }

  /**
   * Default Constructor
   */
  public CDMVersionServiceStub(final org.apache.axis2.context.ConfigurationContext configurationContext)
      throws org.apache.axis2.AxisFault {

    this(configurationContext, "http://localhost:4760/CDMServiceApp/services/CDMService");

  }

  /**
   * Default Constructor
   */
  public CDMVersionServiceStub() throws org.apache.axis2.AxisFault {

    this("http://localhost:4760/CDMServiceApp/services/CDMService");

  }

  /**
   * Constructor taking the target endpoint
   */
  public CDMVersionServiceStub(final java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
    this(null, targetEndpoint);
  }


  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#setElementAttributes
   * @param setElementAttributesRequestType0
   * @throws com.vector.easee.application.cdmversionservice.SetElementAttributes_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesResponseType setElementAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesRequestType setElementAttributesRequestType0)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.SetElementAttributes_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[0].getName());
      _operationClient.getOptions().setAction(
          "http://easee.vector.com/application/cdmversionservice/SetElementAttributes");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setElementAttributesRequestType0,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "setElementAttributes")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "setElementAttributes"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(
              _returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "SetElementAttributes"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "SetElementAttributes"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "SetElementAttributes"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.SetElementAttributes_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.SetElementAttributes_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startsetElementAttributes
   * @param setElementAttributesRequestType0
   */
  public void startsetElementAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesRequestType setElementAttributesRequestType0,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[0].getName());
    _operationClient.getOptions().setAction(
        "http://easee.vector.com/application/cdmversionservice/SetElementAttributes");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setElementAttributesRequestType0,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "setElementAttributes")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "setElementAttributes"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultsetElementAttributes((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorsetElementAttributes(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "SetElementAttributes"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SetElementAttributes"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SetElementAttributes"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.SetElementAttributes_faultMsg) {
                  callback.receiveErrorsetElementAttributes(ex);
                  return;
                }


                callback.receiveErrorsetElementAttributes(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetElementAttributes(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetElementAttributes(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetElementAttributes(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetElementAttributes(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetElementAttributes(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetElementAttributes(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetElementAttributes(f);
              }
            }
            else {
              callback.receiveErrorsetElementAttributes(f);
            }
          }
          else {
            callback.receiveErrorsetElementAttributes(f);
          }
        }
        else {
          callback.receiveErrorsetElementAttributes(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorsetElementAttributes(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[0].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[0].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#getElementAttributes
   * @param getElementAttributesRequestType2
   * @throws com.vector.easee.application.cdmversionservice.GetElementAttributes_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesResponseType getElementAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesRequestType getElementAttributesRequestType2)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.GetElementAttributes_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[1].getName());
      _operationClient.getOptions().setAction(
          "http://easee.vector.com/application/cdmversionservice/GetElementAttributes");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getElementAttributesRequestType2,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "getElementAttributes")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "getElementAttributes"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(
              _returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "GetElementAttributes"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "GetElementAttributes"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "GetElementAttributes"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.GetElementAttributes_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.GetElementAttributes_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startgetElementAttributes
   * @param getElementAttributesRequestType2
   */
  public void startgetElementAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesRequestType getElementAttributesRequestType2,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[1].getName());
    _operationClient.getOptions().setAction(
        "http://easee.vector.com/application/cdmversionservice/GetElementAttributes");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getElementAttributesRequestType2,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "getElementAttributes")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "getElementAttributes"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultgetElementAttributes((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorgetElementAttributes(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "GetElementAttributes"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetElementAttributes"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetElementAttributes"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.GetElementAttributes_faultMsg) {
                  callback.receiveErrorgetElementAttributes(ex);
                  return;
                }


                callback.receiveErrorgetElementAttributes(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetElementAttributes(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetElementAttributes(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetElementAttributes(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetElementAttributes(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetElementAttributes(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetElementAttributes(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetElementAttributes(f);
              }
            }
            else {
              callback.receiveErrorgetElementAttributes(f);
            }
          }
          else {
            callback.receiveErrorgetElementAttributes(f);
          }
        }
        else {
          callback.receiveErrorgetElementAttributes(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorgetElementAttributes(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[1].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[1].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#getVersionAttributes
   * @param getVersionAttributesRequestType4
   * @throws com.vector.easee.application.cdmversionservice.GetVersionAttributes_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesResponseType getVersionAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesRequestType getVersionAttributesRequestType4)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.GetVersionAttributes_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[2].getName());
      _operationClient.getOptions().setAction(
          "http://easee.vector.com/application/cdmversionservice/GetVersionAttributes");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getVersionAttributesRequestType4,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "getVersionAttributes")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "getVersionAttributes"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(
              _returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "GetVersionAttributes"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "GetVersionAttributes"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "GetVersionAttributes"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.GetVersionAttributes_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.GetVersionAttributes_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startgetVersionAttributes
   * @param getVersionAttributesRequestType4
   */
  public void startgetVersionAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesRequestType getVersionAttributesRequestType4,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[2].getName());
    _operationClient.getOptions().setAction(
        "http://easee.vector.com/application/cdmversionservice/GetVersionAttributes");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getVersionAttributesRequestType4,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "getVersionAttributes")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "getVersionAttributes"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultgetVersionAttributes((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorgetVersionAttributes(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "GetVersionAttributes"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetVersionAttributes"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetVersionAttributes"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.GetVersionAttributes_faultMsg) {
                  callback.receiveErrorgetVersionAttributes(ex);
                  return;
                }


                callback.receiveErrorgetVersionAttributes(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetVersionAttributes(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetVersionAttributes(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetVersionAttributes(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetVersionAttributes(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetVersionAttributes(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetVersionAttributes(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetVersionAttributes(f);
              }
            }
            else {
              callback.receiveErrorgetVersionAttributes(f);
            }
          }
          else {
            callback.receiveErrorgetVersionAttributes(f);
          }
        }
        else {
          callback.receiveErrorgetVersionAttributes(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorgetVersionAttributes(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[2].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[2].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#searchContent
   * @param searchContentRequestType6
   * @throws com.vector.easee.application.cdmversionservice.SearchContent_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentResponseType searchContent(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentRequestType searchContentRequestType6)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.SearchContent_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[3].getName());
      _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/SearchContent");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), searchContentRequestType6,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "searchContent")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "searchContent"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(_returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "SearchContent"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "SearchContent"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "SearchContent"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.SearchContent_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.SearchContent_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startsearchContent
   * @param searchContentRequestType6
   */
  public void startsearchContent(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentRequestType searchContentRequestType6,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[3].getName());
    _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/SearchContent");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), searchContentRequestType6,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "searchContent")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "searchContent"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultsearchContent((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorsearchContent(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "SearchContent"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SearchContent"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SearchContent"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.SearchContent_faultMsg) {
                  callback.receiveErrorsearchContent(ex);
                  return;
                }


                callback.receiveErrorsearchContent(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsearchContent(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsearchContent(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsearchContent(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsearchContent(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsearchContent(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsearchContent(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsearchContent(f);
              }
            }
            else {
              callback.receiveErrorsearchContent(f);
            }
          }
          else {
            callback.receiveErrorsearchContent(f);
          }
        }
        else {
          callback.receiveErrorsearchContent(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorsearchContent(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[3].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[3].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#getContentAttributes
   * @param getContentAttributesRequestType8
   * @throws com.vector.easee.application.cdmversionservice.GetContentAttributes_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesResponseType getContentAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesRequestType getContentAttributesRequestType8)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.GetContentAttributes_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[4].getName());
      _operationClient.getOptions().setAction(
          "http://easee.vector.com/application/cdmversionservice/GetContentAttributes");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getContentAttributesRequestType8,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "getContentAttributes")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "getContentAttributes"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(
              _returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "GetContentAttributes"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "GetContentAttributes"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "GetContentAttributes"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.GetContentAttributes_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.GetContentAttributes_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startgetContentAttributes
   * @param getContentAttributesRequestType8
   */
  public void startgetContentAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesRequestType getContentAttributesRequestType8,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[4].getName());
    _operationClient.getOptions().setAction(
        "http://easee.vector.com/application/cdmversionservice/GetContentAttributes");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getContentAttributesRequestType8,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "getContentAttributes")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "getContentAttributes"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultgetContentAttributes((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorgetContentAttributes(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "GetContentAttributes"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetContentAttributes"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetContentAttributes"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.GetContentAttributes_faultMsg) {
                  callback.receiveErrorgetContentAttributes(ex);
                  return;
                }


                callback.receiveErrorgetContentAttributes(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetContentAttributes(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetContentAttributes(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetContentAttributes(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetContentAttributes(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetContentAttributes(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetContentAttributes(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetContentAttributes(f);
              }
            }
            else {
              callback.receiveErrorgetContentAttributes(f);
            }
          }
          else {
            callback.receiveErrorgetContentAttributes(f);
          }
        }
        else {
          callback.receiveErrorgetContentAttributes(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorgetContentAttributes(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[4].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[4].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#fetchArtifact
   * @param fetchArtifactRequestType10
   * @throws com.vector.easee.application.cdmversionservice.FetchArtifact_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactResponseType fetchArtifact(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactRequestType fetchArtifactRequestType10)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.FetchArtifact_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[5].getName());
      _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/FetchArtifact");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), fetchArtifactRequestType10,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "fetchArtifact")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "fetchArtifact"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(_returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "FetchArtifact"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "FetchArtifact"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "FetchArtifact"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.FetchArtifact_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.FetchArtifact_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startfetchArtifact
   * @param fetchArtifactRequestType10
   */
  public void startfetchArtifact(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactRequestType fetchArtifactRequestType10,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[5].getName());
    _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/FetchArtifact");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), fetchArtifactRequestType10,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "fetchArtifact")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "fetchArtifact"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultfetchArtifact((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorfetchArtifact(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "FetchArtifact"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "FetchArtifact"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "FetchArtifact"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.FetchArtifact_faultMsg) {
                  callback.receiveErrorfetchArtifact(ex);
                  return;
                }


                callback.receiveErrorfetchArtifact(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorfetchArtifact(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorfetchArtifact(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorfetchArtifact(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorfetchArtifact(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorfetchArtifact(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorfetchArtifact(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorfetchArtifact(f);
              }
            }
            else {
              callback.receiveErrorfetchArtifact(f);
            }
          }
          else {
            callback.receiveErrorfetchArtifact(f);
          }
        }
        else {
          callback.receiveErrorfetchArtifact(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorfetchArtifact(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[5].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[5].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#checkOut
   * @param checkOutRequestType12
   * @throws com.vector.easee.application.cdmversionservice.CheckOutFault :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutResponseType checkOut(

  final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutRequestType checkOutRequestType12)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.CheckOutFault {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[6].getName());
      _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/CheckOut");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), checkOutRequestType12,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "checkOut")), new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "checkOut"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(_returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "CheckOut"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "CheckOut"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "CheckOut"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.CheckOutFault) {
              throw (com.vector.easee.application.cdmversionservice.CheckOutFault) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startcheckOut
   * @param checkOutRequestType12
   */
  public void startcheckOut(

  final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutRequestType checkOutRequestType12,

  final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[6].getName());
    _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/CheckOut");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), checkOutRequestType12,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "checkOut")), new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "checkOut"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultcheckOut((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorcheckOut(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "CheckOut"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "CheckOut"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "CheckOut"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.CheckOutFault) {
                  callback.receiveErrorcheckOut(ex);
                  return;
                }


                callback.receiveErrorcheckOut(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckOut(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckOut(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckOut(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckOut(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckOut(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckOut(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckOut(f);
              }
            }
            else {
              callback.receiveErrorcheckOut(f);
            }
          }
          else {
            callback.receiveErrorcheckOut(f);
          }
        }
        else {
          callback.receiveErrorcheckOut(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorcheckOut(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[6].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[6].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#getConfigState
   * @param getConfigStateRequestType14
   * @throws com.vector.easee.application.cdmversionservice.GetConfigState_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateResponseType getConfigState(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateRequestType getConfigStateRequestType14)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.GetConfigState_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[7].getName());
      _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/GetConfigState");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getConfigStateRequestType14,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "getConfigState")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "getConfigState"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(_returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "GetConfigState"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "GetConfigState"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "GetConfigState"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.GetConfigState_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.GetConfigState_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startgetConfigState
   * @param getConfigStateRequestType14
   */
  public void startgetConfigState(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateRequestType getConfigStateRequestType14,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[7].getName());
    _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/GetConfigState");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getConfigStateRequestType14,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "getConfigState")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "getConfigState"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultgetConfigState((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorgetConfigState(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "GetConfigState"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetConfigState"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetConfigState"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.GetConfigState_faultMsg) {
                  callback.receiveErrorgetConfigState(ex);
                  return;
                }


                callback.receiveErrorgetConfigState(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetConfigState(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetConfigState(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetConfigState(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetConfigState(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetConfigState(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetConfigState(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetConfigState(f);
              }
            }
            else {
              callback.receiveErrorgetConfigState(f);
            }
          }
          else {
            callback.receiveErrorgetConfigState(f);
          }
        }
        else {
          callback.receiveErrorgetConfigState(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorgetConfigState(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[7].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[7].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#getSystemAttributes
   * @param getSystemAttributesRequestType16
   * @throws com.vector.easee.application.cdmversionservice.GetSystemAttributes_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesResponseType getSystemAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesRequestType getSystemAttributesRequestType16)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.GetSystemAttributes_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[8].getName());
      _operationClient.getOptions().setAction(
          "http://easee.vector.com/application/cdmversionservice/GetSystemAttributes");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getSystemAttributesRequestType16,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "getSystemAttributes")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "getSystemAttributes"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(
              _returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "GetSystemAttributes"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "GetSystemAttributes"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "GetSystemAttributes"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.GetSystemAttributes_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.GetSystemAttributes_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startgetSystemAttributes
   * @param getSystemAttributesRequestType16
   */
  public void startgetSystemAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesRequestType getSystemAttributesRequestType16,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[8].getName());
    _operationClient.getOptions()
        .setAction("http://easee.vector.com/application/cdmversionservice/GetSystemAttributes");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), getSystemAttributesRequestType16,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "getSystemAttributes")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "getSystemAttributes"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultgetSystemAttributes((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorgetSystemAttributes(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "GetSystemAttributes"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetSystemAttributes"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "GetSystemAttributes"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.GetSystemAttributes_faultMsg) {
                  callback.receiveErrorgetSystemAttributes(ex);
                  return;
                }


                callback.receiveErrorgetSystemAttributes(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetSystemAttributes(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetSystemAttributes(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetSystemAttributes(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetSystemAttributes(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetSystemAttributes(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetSystemAttributes(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorgetSystemAttributes(f);
              }
            }
            else {
              callback.receiveErrorgetSystemAttributes(f);
            }
          }
          else {
            callback.receiveErrorgetSystemAttributes(f);
          }
        }
        else {
          callback.receiveErrorgetSystemAttributes(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorgetSystemAttributes(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[8].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[8].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#checkIn
   * @param checkInRequestType18
   * @throws com.vector.easee.application.cdmversionservice.CheckInFault :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInResponseType checkIn(

  final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInRequestType checkInRequestType18)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.CheckInFault {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[9].getName());
      _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/CheckIn");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), checkInRequestType18,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "checkIn")), new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "checkIn"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(_returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "CheckIn"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "CheckIn"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "CheckIn"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.CheckInFault) {
              throw (com.vector.easee.application.cdmversionservice.CheckInFault) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startcheckIn
   * @param checkInRequestType18
   */
  public void startcheckIn(

  final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInRequestType checkInRequestType18,

  final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[9].getName());
    _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/CheckIn");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), checkInRequestType18,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "checkIn")), new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "checkIn"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultcheckIn((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorcheckIn(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "CheckIn"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "CheckIn"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "CheckIn"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.CheckInFault) {
                  callback.receiveErrorcheckIn(ex);
                  return;
                }


                callback.receiveErrorcheckIn(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckIn(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckIn(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckIn(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckIn(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckIn(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckIn(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcheckIn(f);
              }
            }
            else {
              callback.receiveErrorcheckIn(f);
            }
          }
          else {
            callback.receiveErrorcheckIn(f);
          }
        }
        else {
          callback.receiveErrorcheckIn(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorcheckIn(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[9].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[9].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#insertIntoContainer
   * @param insertIntoContainerRequestType20
   * @throws com.vector.easee.application.cdmversionservice.InsertIntoContainerFault :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerResponseType insertIntoContainer(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerRequestType insertIntoContainerRequestType20)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.InsertIntoContainerFault {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[10].getName());
      _operationClient.getOptions().setAction(
          "http://easee.vector.com/application/cdmversionservice/InsertIntoContainer");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), insertIntoContainerRequestType20,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "insertIntoContainer")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "insertIntoContainer"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(
              _returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "InsertIntoContainer"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "InsertIntoContainer"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "InsertIntoContainer"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.InsertIntoContainerFault) {
              throw (com.vector.easee.application.cdmversionservice.InsertIntoContainerFault) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startinsertIntoContainer
   * @param insertIntoContainerRequestType20
   */
  public void startinsertIntoContainer(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerRequestType insertIntoContainerRequestType20,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[10].getName());
    _operationClient.getOptions()
        .setAction("http://easee.vector.com/application/cdmversionservice/InsertIntoContainer");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), insertIntoContainerRequestType20,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "insertIntoContainer")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "insertIntoContainer"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultinsertIntoContainer((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorinsertIntoContainer(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "InsertIntoContainer"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "InsertIntoContainer"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "InsertIntoContainer"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.InsertIntoContainerFault) {
                  callback.receiveErrorinsertIntoContainer(ex);
                  return;
                }


                callback.receiveErrorinsertIntoContainer(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorinsertIntoContainer(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorinsertIntoContainer(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorinsertIntoContainer(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorinsertIntoContainer(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorinsertIntoContainer(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorinsertIntoContainer(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorinsertIntoContainer(f);
              }
            }
            else {
              callback.receiveErrorinsertIntoContainer(f);
            }
          }
          else {
            callback.receiveErrorinsertIntoContainer(f);
          }
        }
        else {
          callback.receiveErrorinsertIntoContainer(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorinsertIntoContainer(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[10].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[10].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#setLifecycleState
   * @param setLifecycleStateType22
   * @throws com.vector.easee.application.cdmversionservice.SetLifecycleState_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateResponseType setLifecycleState(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateType setLifecycleStateType22)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.SetLifecycleState_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[11].getName());
      _operationClient.getOptions()
          .setAction("http://easee.vector.com/application/cdmversionservice/SetLifecycleState");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setLifecycleStateType22,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "setLifecycleState")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "setLifecycleState"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(_returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "SetLifecycleState"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "SetLifecycleState"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "SetLifecycleState"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.SetLifecycleState_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.SetLifecycleState_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startsetLifecycleState
   * @param setLifecycleStateType22
   */
  public void startsetLifecycleState(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateType setLifecycleStateType22,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[11].getName());
    _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/SetLifecycleState");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setLifecycleStateType22,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "setLifecycleState")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "setLifecycleState"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultsetLifecycleState((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorsetLifecycleState(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "SetLifecycleState"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SetLifecycleState"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SetLifecycleState"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.SetLifecycleState_faultMsg) {
                  callback.receiveErrorsetLifecycleState(ex);
                  return;
                }


                callback.receiveErrorsetLifecycleState(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetLifecycleState(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetLifecycleState(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetLifecycleState(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetLifecycleState(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetLifecycleState(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetLifecycleState(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetLifecycleState(f);
              }
            }
            else {
              callback.receiveErrorsetLifecycleState(f);
            }
          }
          else {
            callback.receiveErrorsetLifecycleState(f);
          }
        }
        else {
          callback.receiveErrorsetLifecycleState(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorsetLifecycleState(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[11].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[11].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#deleteObject
   * @param deleteObjectRequestType24
   * @throws com.vector.easee.application.cdmversionservice.DeleteObjectFault :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectResponseType deleteObject(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectRequestType deleteObjectRequestType24)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.DeleteObjectFault {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[12].getName());
      _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/DeleteObject");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteObjectRequestType24,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "deleteObject")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "deleteObject"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(_returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "DeleteObject"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "DeleteObject"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "DeleteObject"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.DeleteObjectFault) {
              throw (com.vector.easee.application.cdmversionservice.DeleteObjectFault) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startdeleteObject
   * @param deleteObjectRequestType24
   */
  public void startdeleteObject(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectRequestType deleteObjectRequestType24,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[12].getName());
    _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/DeleteObject");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), deleteObjectRequestType24,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "deleteObject")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "deleteObject"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultdeleteObject((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrordeleteObject(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "DeleteObject"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "DeleteObject"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "DeleteObject"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.DeleteObjectFault) {
                  callback.receiveErrordeleteObject(ex);
                  return;
                }


                callback.receiveErrordeleteObject(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrordeleteObject(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrordeleteObject(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrordeleteObject(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrordeleteObject(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrordeleteObject(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrordeleteObject(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrordeleteObject(f);
              }
            }
            else {
              callback.receiveErrordeleteObject(f);
            }
          }
          else {
            callback.receiveErrordeleteObject(f);
          }
        }
        else {
          callback.receiveErrordeleteObject(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrordeleteObject(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[12].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[12].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#setContentAttributes
   * @param setContentAttributesRequestType26
   * @throws com.vector.easee.application.cdmversionservice.SetContentAttributes_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesResponseType setContentAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesRequestType setContentAttributesRequestType26)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.SetContentAttributes_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[13].getName());
      _operationClient.getOptions().setAction(
          "http://easee.vector.com/application/cdmversionservice/SetContentAttributes");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setContentAttributesRequestType26,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "setContentAttributes")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "setContentAttributes"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(
              _returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "SetContentAttributes"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "SetContentAttributes"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "SetContentAttributes"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.SetContentAttributes_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.SetContentAttributes_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startsetContentAttributes
   * @param setContentAttributesRequestType26
   */
  public void startsetContentAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesRequestType setContentAttributesRequestType26,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[13].getName());
    _operationClient.getOptions().setAction(
        "http://easee.vector.com/application/cdmversionservice/SetContentAttributes");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setContentAttributesRequestType26,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "setContentAttributes")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "setContentAttributes"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultsetContentAttributes((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorsetContentAttributes(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "SetContentAttributes"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SetContentAttributes"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SetContentAttributes"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.SetContentAttributes_faultMsg) {
                  callback.receiveErrorsetContentAttributes(ex);
                  return;
                }


                callback.receiveErrorsetContentAttributes(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetContentAttributes(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetContentAttributes(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetContentAttributes(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetContentAttributes(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetContentAttributes(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetContentAttributes(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetContentAttributes(f);
              }
            }
            else {
              callback.receiveErrorsetContentAttributes(f);
            }
          }
          else {
            callback.receiveErrorsetContentAttributes(f);
          }
        }
        else {
          callback.receiveErrorsetContentAttributes(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorsetContentAttributes(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[13].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[13].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#setVersionAttributes
   * @param setVersionAttributesRequestType28
   * @throws com.vector.easee.application.cdmversionservice.SetVersionAttributes_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesResponseType setVersionAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesRequestType setVersionAttributesRequestType28)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.SetVersionAttributes_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[14].getName());
      _operationClient.getOptions().setAction(
          "http://easee.vector.com/application/cdmversionservice/SetVersionAttributes");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setVersionAttributesRequestType28,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "setVersionAttributes")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "setVersionAttributes"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(
              _returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "SetVersionAttributes"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "SetVersionAttributes"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "SetVersionAttributes"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.SetVersionAttributes_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.SetVersionAttributes_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startsetVersionAttributes
   * @param setVersionAttributesRequestType28
   */
  public void startsetVersionAttributes(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesRequestType setVersionAttributesRequestType28,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[14].getName());
    _operationClient.getOptions().setAction(
        "http://easee.vector.com/application/cdmversionservice/SetVersionAttributes");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), setVersionAttributesRequestType28,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "setVersionAttributes")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "setVersionAttributes"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultsetVersionAttributes((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorsetVersionAttributes(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "SetVersionAttributes"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SetVersionAttributes"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "SetVersionAttributes"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.SetVersionAttributes_faultMsg) {
                  callback.receiveErrorsetVersionAttributes(ex);
                  return;
                }


                callback.receiveErrorsetVersionAttributes(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetVersionAttributes(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetVersionAttributes(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetVersionAttributes(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetVersionAttributes(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetVersionAttributes(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetVersionAttributes(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorsetVersionAttributes(f);
              }
            }
            else {
              callback.receiveErrorsetVersionAttributes(f);
            }
          }
          else {
            callback.receiveErrorsetVersionAttributes(f);
          }
        }
        else {
          callback.receiveErrorsetVersionAttributes(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorsetVersionAttributes(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[14].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[14].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#isCheckedIn
   * @param isCheckedInRequestType30
   * @throws com.vector.easee.application.cdmversionservice.IsCheckedIn_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInResponseType isCheckedIn(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInRequestType isCheckedInRequestType30)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.IsCheckedIn_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[15].getName());
      _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/IsCheckedIn");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), isCheckedInRequestType30,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "isCheckedIn")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "isCheckedIn"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(_returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "IsCheckedIn"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "IsCheckedIn"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "IsCheckedIn"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.IsCheckedIn_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.IsCheckedIn_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startisCheckedIn
   * @param isCheckedInRequestType30
   */
  public void startisCheckedIn(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInRequestType isCheckedInRequestType30,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[15].getName());
    _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/IsCheckedIn");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), isCheckedInRequestType30,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "isCheckedIn")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "isCheckedIn"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultisCheckedIn((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorisCheckedIn(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "IsCheckedIn"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "IsCheckedIn"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "IsCheckedIn"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.IsCheckedIn_faultMsg) {
                  callback.receiveErrorisCheckedIn(ex);
                  return;
                }


                callback.receiveErrorisCheckedIn(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorisCheckedIn(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorisCheckedIn(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorisCheckedIn(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorisCheckedIn(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorisCheckedIn(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorisCheckedIn(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorisCheckedIn(f);
              }
            }
            else {
              callback.receiveErrorisCheckedIn(f);
            }
          }
          else {
            callback.receiveErrorisCheckedIn(f);
          }
        }
        else {
          callback.receiveErrorisCheckedIn(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorisCheckedIn(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[15].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[15].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#removeFromContainer
   * @param removeFromContainerRequestType32
   * @throws com.vector.easee.application.cdmversionservice.RemoveFromContainer_faultMsg :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerResponseType removeFromContainer(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerRequestType removeFromContainerRequestType32)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.RemoveFromContainer_faultMsg {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[16].getName());
      _operationClient.getOptions().setAction(
          "http://easee.vector.com/application/cdmversionservice/RemoveFromContainer");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), removeFromContainerRequestType32,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "removeFromContainer")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "removeFromContainer"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(
              _returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "RemoveFromContainer"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "RemoveFromContainer"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "RemoveFromContainer"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.RemoveFromContainer_faultMsg) {
              throw (com.vector.easee.application.cdmversionservice.RemoveFromContainer_faultMsg) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startremoveFromContainer
   * @param removeFromContainerRequestType32
   */
  public void startremoveFromContainer(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerRequestType removeFromContainerRequestType32,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[16].getName());
    _operationClient.getOptions()
        .setAction("http://easee.vector.com/application/cdmversionservice/RemoveFromContainer");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), removeFromContainerRequestType32,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "removeFromContainer")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "removeFromContainer"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(
                  resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultremoveFromContainer((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorremoveFromContainer(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "RemoveFromContainer"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "RemoveFromContainer"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "RemoveFromContainer"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.RemoveFromContainer_faultMsg) {
                  callback.receiveErrorremoveFromContainer(ex);
                  return;
                }


                callback.receiveErrorremoveFromContainer(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorremoveFromContainer(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorremoveFromContainer(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorremoveFromContainer(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorremoveFromContainer(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorremoveFromContainer(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorremoveFromContainer(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorremoveFromContainer(f);
              }
            }
            else {
              callback.receiveErrorremoveFromContainer(f);
            }
          }
          else {
            callback.receiveErrorremoveFromContainer(f);
          }
        }
        else {
          callback.receiveErrorremoveFromContainer(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorremoveFromContainer(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[16].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[16].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }

  /**
   * Auto generated method signature
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#createObject
   * @param createObjectRequestType34
   * @throws com.vector.easee.application.cdmversionservice.CreateObjectFault :
   */


  public com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectResponseType createObject(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectRequestType createObjectRequestType34)


  throws java.rmi.RemoteException


  , com.vector.easee.application.cdmversionservice.CreateObjectFault {
    org.apache.axis2.context.MessageContext _messageContext = null;
    try {
      org.apache.axis2.client.OperationClient _operationClient =
          this._serviceClient.createClient(this._operations[17].getName());
      _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/CreateObject");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


      addPropertyToOperationClient(_operationClient,
          org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


      // create a message context
      _messageContext = new org.apache.axis2.context.MessageContext();


      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;


      env =
          toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), createObjectRequestType34,
              optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                  "createObject")), new javax.xml.namespace.QName(
                  "http://easee.vector.com/application/cdmversionservice/", "createObject"));

      // adding SOAP soap_headers
      this._serviceClient.addHeadersToEnvelope(env);
      // set the message context with that soap envelope
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext =
          _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();


      java.lang.Object object =
          fromOM(_returnEnv.getBody().getFirstElement(),
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectResponseType.class,
              getEnvelopeNamespaces(_returnEnv));


      return (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectResponseType) object;

    }
    catch (org.apache.axis2.AxisFault f) {

      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),
            "CreateObject"))) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName =
                (java.lang.String) this.faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt
                    .getQName(), "CreateObject"));
            java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
            java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
            java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
            // message class
            java.lang.String messageClassName =
                (java.lang.String) this.faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                    faultElt.getQName(), "CreateObject"));
            java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
            java.lang.reflect.Method m =
                exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
            m.invoke(ex, new java.lang.Object[] { messageObject });

            if (ex instanceof com.vector.easee.application.cdmversionservice.CreateObjectFault) {
              throw (com.vector.easee.application.cdmversionservice.CreateObjectFault) ex;
            }


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          }
          catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
          catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        }
        else {
          throw f;
        }
      }
      else {
        throw f;
      }
    }
    finally {
      if (_messageContext.getTransportOut() != null) {
        _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      }
    }
  }

  /**
   * Auto generated method signature for Asynchronous Invocations
   * 
   * @see com.vector.easee.application.cdmversionservice.CDMVersionService#startcreateObject
   * @param createObjectRequestType34
   */
  public void startcreateObject(

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectRequestType createObjectRequestType34,

      final com.vector.easee.application.cdmversionservice.CDMVersionServiceCallbackHandler callback)

  throws java.rmi.RemoteException {

    org.apache.axis2.client.OperationClient _operationClient =
        this._serviceClient.createClient(this._operations[17].getName());
    _operationClient.getOptions().setAction("http://easee.vector.com/application/cdmversionservice/CreateObject");
    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);


    addPropertyToOperationClient(_operationClient,
        org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");


    // create SOAP envelope with that payload
    org.apache.axiom.soap.SOAPEnvelope env = null;
    final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();


    // Style is Doc.


    env =
        toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()), createObjectRequestType34,
            optimizeContent(new javax.xml.namespace.QName("http://easee.vector.com/application/cdmversionservice/",
                "createObject")), new javax.xml.namespace.QName(
                "http://easee.vector.com/application/cdmversionservice/", "createObject"));

    // adding SOAP soap_headers
    this._serviceClient.addHeadersToEnvelope(env);
    // create message context with that soap envelope
    _messageContext.setEnvelope(env);

    // add the message context to the operation client
    _operationClient.addMessageContext(_messageContext);


    _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {

      public void onMessage(final org.apache.axis2.context.MessageContext resultContext) {
        try {
          org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

          java.lang.Object object =
              fromOM(resultEnv.getBody().getFirstElement(),
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectResponseType.class,
                  getEnvelopeNamespaces(resultEnv));
          callback
              .receiveResultcreateObject((com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectResponseType) object);

        }
        catch (org.apache.axis2.AxisFault e) {
          callback.receiveErrorcreateObject(e);
        }
      }

      public void onError(final java.lang.Exception error) {
        if (error instanceof org.apache.axis2.AxisFault) {
          org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
          org.apache.axiom.om.OMElement faultElt = f.getDetail();
          if (faultElt != null) {
            if (CDMVersionServiceStub.this.faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(
                faultElt.getQName(), "CreateObject"))) {
              // make the fault by reflection
              try {
                java.lang.String exceptionClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultExceptionClassNameMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "CreateObject"));
                java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                // message class
                java.lang.String messageClassName =
                    (java.lang.String) CDMVersionServiceStub.this.faultMessageMap
                        .get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(), "CreateObject"));
                java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                java.lang.reflect.Method m =
                    exceptionClass.getMethod("setFaultMessage", new java.lang.Class[] { messageClass });
                m.invoke(ex, new java.lang.Object[] { messageObject });

                if (ex instanceof com.vector.easee.application.cdmversionservice.CreateObjectFault) {
                  callback.receiveErrorcreateObject(ex);
                  return;
                }


                callback.receiveErrorcreateObject(new java.rmi.RemoteException(ex.getMessage(), ex));
              }
              catch (java.lang.ClassCastException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcreateObject(f);
              }
              catch (java.lang.ClassNotFoundException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcreateObject(f);
              }
              catch (java.lang.NoSuchMethodException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcreateObject(f);
              }
              catch (java.lang.reflect.InvocationTargetException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcreateObject(f);
              }
              catch (java.lang.IllegalAccessException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcreateObject(f);
              }
              catch (java.lang.InstantiationException e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcreateObject(f);
              }
              catch (org.apache.axis2.AxisFault e) {
                // we cannot intantiate the class - throw the original Axis fault
                callback.receiveErrorcreateObject(f);
              }
            }
            else {
              callback.receiveErrorcreateObject(f);
            }
          }
          else {
            callback.receiveErrorcreateObject(f);
          }
        }
        else {
          callback.receiveErrorcreateObject(error);
        }
      }

      public void onFault(final org.apache.axis2.context.MessageContext faultContext) {
        org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
        onError(fault);
      }

      public void onComplete() {
        try {
          _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
        catch (org.apache.axis2.AxisFault axisFault) {
          callback.receiveErrorcreateObject(axisFault);
        }
      }
    });


    org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
    if ((this._operations[17].getMessageReceiver() == null) && _operationClient.getOptions().isUseSeparateListener()) {
      _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
      this._operations[17].setMessageReceiver(_callbackReceiver);
    }

    // execute the operation client
    _operationClient.execute(false);

  }


  /**
   * A utility method that copies the namepaces from the SOAPEnvelope
   */
  private java.util.Map getEnvelopeNamespaces(final org.apache.axiom.soap.SOAPEnvelope env) {
    java.util.Map returnMap = new java.util.HashMap();
    java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
    while (namespaceIterator.hasNext()) {
      org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
      returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
    }
    return returnMap;
  }


  private final javax.xml.namespace.QName[] opNameArray = null;

  private boolean optimizeContent(final javax.xml.namespace.QName opName) {


    if (this.opNameArray == null) {
      return false;
    }
    for (QName element : this.opNameArray) {
      if (opName.equals(element)) {
        return true;
      }
    }
    return false;
  }

  // http://localhost:4760/CDMServiceApp/services/CDMService
  public static class NFOCreationInfoType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = NFOCreationInfoType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for File
     */


    protected AttachmentType localFile;


    /**
     * Auto generated getter method
     * 
     * @return AttachmentType
     */
    public AttachmentType getFile() {
      return this.localFile;
    }


    /**
     * Auto generated setter method
     * 
     * @param param File
     */
    public void setFile(final AttachmentType param) {

      this.localFile = param;


    }


    /**
     * field for ObjName
     */


    protected java.lang.String localObjName;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjNameTracker = false;

    public boolean isObjNameSpecified() {
      return this.localObjNameTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjName() {
      return this.localObjName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjName
     */
    public void setObjName(final java.lang.String param) {
      this.localObjNameTracker = param != null;

      this.localObjName = param;


    }


    /**
     * field for ObjVariant
     */


    protected java.lang.String localObjVariant;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjVariantTracker = false;

    public boolean isObjVariantSpecified() {
      return this.localObjVariantTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjVariant() {
      return this.localObjVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjVariant
     */
    public void setObjVariant(final java.lang.String param) {
      this.localObjVariantTracker = param != null;

      this.localObjVariant = param;


    }


    /**
     * field for ObjClass
     */


    protected java.lang.String localObjClass;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjClass() {
      return this.localObjClass;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjClass
     */
    public void setObjClass(final java.lang.String param) {

      this.localObjClass = param;


    }


    /**
     * field for ObjType
     */


    protected java.lang.String localObjType;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjTypeTracker = false;

    public boolean isObjTypeSpecified() {
      return this.localObjTypeTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjType() {
      return this.localObjType;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjType
     */
    public void setObjType(final java.lang.String param) {
      this.localObjTypeTracker = param != null;

      this.localObjType = param;


    }


    /**
     * field for VersionAttrs This was an Array!
     */


    protected MapEntryType[] localVersionAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localVersionAttrsTracker = false;

    public boolean isVersionAttrsSpecified() {
      return this.localVersionAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getVersionAttrs() {
      return this.localVersionAttrs;
    }


    /**
     * validate the array for VersionAttrs
     */
    protected void validateVersionAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionAttrs
     */
    public void setVersionAttrs(final MapEntryType[] param) {

      validateVersionAttrs(param);

      this.localVersionAttrsTracker = param != null;

      this.localVersionAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addVersionAttrs(final MapEntryType param) {
      if (this.localVersionAttrs == null) {
        this.localVersionAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localVersionAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localVersionAttrs);
      list.add(param);
      this.localVersionAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * field for ElemAttrs This was an Array!
     */


    protected MapEntryType[] localElemAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localElemAttrsTracker = false;

    public boolean isElemAttrsSpecified() {
      return this.localElemAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getElemAttrs() {
      return this.localElemAttrs;
    }


    /**
     * validate the array for ElemAttrs
     */
    protected void validateElemAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ElemAttrs
     */
    public void setElemAttrs(final MapEntryType[] param) {

      validateElemAttrs(param);

      this.localElemAttrsTracker = param != null;

      this.localElemAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addElemAttrs(final MapEntryType param) {
      if (this.localElemAttrs == null) {
        this.localElemAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localElemAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localElemAttrs);
      list.add(param);
      this.localElemAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * field for ContentAttrs This was an Array!
     */


    protected MapEntryType[] localContentAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localContentAttrsTracker = false;

    public boolean isContentAttrsSpecified() {
      return this.localContentAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getContentAttrs() {
      return this.localContentAttrs;
    }


    /**
     * validate the array for ContentAttrs
     */
    protected void validateContentAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ContentAttrs
     */
    public void setContentAttrs(final MapEntryType[] param) {

      validateContentAttrs(param);

      this.localContentAttrsTracker = param != null;

      this.localContentAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addContentAttrs(final MapEntryType param) {
      if (this.localContentAttrs == null) {
        this.localContentAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localContentAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localContentAttrs);
      list.add(param);
      this.localContentAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":NFOCreationInfoType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "NFOCreationInfoType", xmlWriter);
        }


      }

      if (this.localFile == null) {
        throw new org.apache.axis2.databinding.ADBException("File cannot be null!!");
      }
      this.localFile.serialize(new javax.xml.namespace.QName("", "File"), xmlWriter);
      if (this.localObjNameTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objName", xmlWriter);


        if (this.localObjName == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjName);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localObjVariantTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objVariant", xmlWriter);


        if (this.localObjVariant == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjVariant);

        }

        xmlWriter.writeEndElement();
      }
      namespace = "";
      writeStartElement(null, namespace, "objClass", xmlWriter);


      if (this.localObjClass == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjClass);

      }

      xmlWriter.writeEndElement();
      if (this.localObjTypeTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objType", xmlWriter);


        if (this.localObjType == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objType cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjType);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localVersionAttrsTracker) {
        if (this.localVersionAttrs != null) {
          for (MapEntryType localVersionAttr : this.localVersionAttrs) {
            if (localVersionAttr != null) {
              localVersionAttr.serialize(new javax.xml.namespace.QName("", "versionAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("versionAttrs cannot be null!!");

        }
      }
      if (this.localElemAttrsTracker) {
        if (this.localElemAttrs != null) {
          for (MapEntryType localElemAttr : this.localElemAttrs) {
            if (localElemAttr != null) {
              localElemAttr.serialize(new javax.xml.namespace.QName("", "elemAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("elemAttrs cannot be null!!");

        }
      }
      if (this.localContentAttrsTracker) {
        if (this.localContentAttrs != null) {
          for (MapEntryType localContentAttr : this.localContentAttrs) {
            if (localContentAttr != null) {
              localContentAttr.serialize(new javax.xml.namespace.QName("", "contentAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("contentAttrs cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "File"));


      if (this.localFile == null) {
        throw new org.apache.axis2.databinding.ADBException("File cannot be null!!");
      }
      elementList.add(this.localFile);
      if (this.localObjNameTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objName"));

        if (this.localObjName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjName));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");
        }
      }
      if (this.localObjVariantTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objVariant"));

        if (this.localObjVariant != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjVariant));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");
        }
      }
      elementList.add(new javax.xml.namespace.QName("", "objClass"));

      if (this.localObjClass != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjClass));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");
      }
      if (this.localObjTypeTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objType"));

        if (this.localObjType != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjType));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objType cannot be null!!");
        }
      }
      if (this.localVersionAttrsTracker) {
        if (this.localVersionAttrs != null) {
          for (MapEntryType localVersionAttr : this.localVersionAttrs) {

            if (localVersionAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "versionAttrs"));
              elementList.add(localVersionAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("versionAttrs cannot be null!!");

        }

      }
      if (this.localElemAttrsTracker) {
        if (this.localElemAttrs != null) {
          for (MapEntryType localElemAttr : this.localElemAttrs) {

            if (localElemAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "elemAttrs"));
              elementList.add(localElemAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("elemAttrs cannot be null!!");

        }

      }
      if (this.localContentAttrsTracker) {
        if (this.localContentAttrs != null) {
          for (MapEntryType localContentAttr : this.localContentAttrs) {

            if (localContentAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "contentAttrs"));
              elementList.add(localContentAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("contentAttrs cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static NFOCreationInfoType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        NFOCreationInfoType object = new NFOCreationInfoType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"NFOCreationInfoType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (NFOCreationInfoType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list6 = new java.util.ArrayList();

          java.util.ArrayList list7 = new java.util.ArrayList();

          java.util.ArrayList list8 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "File").equals(reader.getName())) {

            object.setFile(AttachmentType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objVariant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objVariant" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objClass").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objClass" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjClass(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objType").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objType" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list6.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone6 = false;
            while (!loopDone6) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone6 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "versionAttrs").equals(reader.getName())) {
                  list6.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone6 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setVersionAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list6));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "elemAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list7.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone7 = false;
            while (!loopDone7) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone7 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "elemAttrs").equals(reader.getName())) {
                  list7.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone7 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setElemAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list7));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "contentAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list8.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone8 = false;
            while (!loopDone8) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone8 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "contentAttrs").equals(reader.getName())) {
                  list8.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone8 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setContentAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list8));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteProgramKeysResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DeleteProgramKeysResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteProgramKeysResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DeleteProgramKeysResponseType",
              xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteProgramKeysResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteProgramKeysResponseType object = new DeleteProgramKeysResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteProgramKeysResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteProgramKeysResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameEcuSoftwareVersionRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameEcuSoftwareVersionRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for OldEcuSwVersion
     */


    protected java.lang.String localOldEcuSwVersion;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getOldEcuSwVersion() {
      return this.localOldEcuSwVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param OldEcuSwVersion
     */
    public void setOldEcuSwVersion(final java.lang.String param) {

      this.localOldEcuSwVersion = param;


    }


    /**
     * field for NewEcuSwVersion
     */


    protected java.lang.String localNewEcuSwVersion;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewEcuSwVersion() {
      return this.localNewEcuSwVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewEcuSwVersion
     */
    public void setNewEcuSwVersion(final java.lang.String param) {

      this.localNewEcuSwVersion = param;


    }


    /**
     * field for PreValidation
     */


    protected boolean localPreValidation;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getPreValidation() {
      return this.localPreValidation;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PreValidation
     */
    public void setPreValidation(final boolean param) {

      this.localPreValidation = param;


    }


    /**
     * field for PostValidation
     */


    protected boolean localPostValidation;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getPostValidation() {
      return this.localPostValidation;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PostValidation
     */
    public void setPostValidation(final boolean param) {

      this.localPostValidation = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameEcuSoftwareVersionRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameEcuSoftwareVersionRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "oldEcuSwVersion", xmlWriter);


      if (this.localOldEcuSwVersion == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("oldEcuSwVersion cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localOldEcuSwVersion);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "newEcuSwVersion", xmlWriter);


      if (this.localNewEcuSwVersion == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("newEcuSwVersion cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localNewEcuSwVersion);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "preValidation", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("preValidation cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localPreValidation));
      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "postValidation", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("postValidation cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localPostValidation));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "oldEcuSwVersion"));

      if (this.localOldEcuSwVersion != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localOldEcuSwVersion));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("oldEcuSwVersion cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "newEcuSwVersion"));

      if (this.localNewEcuSwVersion != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewEcuSwVersion));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("newEcuSwVersion cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "preValidation"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPreValidation));

      elementList.add(new javax.xml.namespace.QName("", "postValidation"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPostValidation));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameEcuSoftwareVersionRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameEcuSoftwareVersionRequestType object = new RenameEcuSoftwareVersionRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameEcuSoftwareVersionRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameEcuSoftwareVersionRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "oldEcuSwVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "oldEcuSwVersion"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setOldEcuSwVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newEcuSwVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newEcuSwVersion"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewEcuSwVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "preValidation").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "preValidation"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPreValidation(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "postValidation").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "postValidation"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPostValidation(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class MessageType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "MessageType", "ns1");


    /**
     * field for MessageType
     */


    protected java.lang.String localMessageType;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected MessageType(final java.lang.String value, final boolean isRegisterValue) {
      this.localMessageType = value;
      if (isRegisterValue) {

        _table_.put(this.localMessageType, this);

      }

    }

    public static final java.lang.String _INFO = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("INFO");

    public static final java.lang.String _WARNING = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("WARNING");

    public static final java.lang.String _ERROR = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("ERROR");

    public static final MessageType INFO = new MessageType(_INFO, true);

    public static final MessageType WARNING = new MessageType(_WARNING, true);

    public static final MessageType ERROR = new MessageType(_ERROR, true);


    public java.lang.String getValue() {
      return this.localMessageType;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localMessageType.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix + ":MessageType",
              xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "MessageType", xmlWriter);
        }
      }

      if (this.localMessageType == null) {

        throw new org.apache.axis2.databinding.ADBException("MessageType cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localMessageType);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localMessageType) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static MessageType fromValue(final java.lang.String value) throws java.lang.IllegalArgumentException {
        MessageType enumeration = (MessageType)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static MessageType fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static MessageType fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return MessageType.Factory.fromString(content, namespaceUri);
        }
        else {
          return MessageType.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static MessageType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        MessageType object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "MessageType"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = MessageType.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = MessageType.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetContentAttributesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetContentAttributesResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetContentAttributesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "SetContentAttributesResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetContentAttributesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetContentAttributesResponseType object = new SetContentAttributesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetContentAttributesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetContentAttributesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateProductAttributesAndValuesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateProductAttributesAndValuesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * field for ValuesArr This was an Array!
     */


    protected java.lang.String[] localValuesArr;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localValuesArrTracker = false;

    public boolean isValuesArrSpecified() {
      return this.localValuesArrTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getValuesArr() {
      return this.localValuesArr;
    }


    /**
     * validate the array for ValuesArr
     */
    protected void validateValuesArr(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ValuesArr
     */
    public void setValuesArr(final java.lang.String[] param) {

      validateValuesArr(param);

      this.localValuesArrTracker = param != null;

      this.localValuesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addValuesArr(final java.lang.String param) {
      if (this.localValuesArr == null) {
        this.localValuesArr = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localValuesArrTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localValuesArr);
      list.add(param);
      this.localValuesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateProductAttributesAndValuesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "CreateProductAttributesAndValuesRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          namespace = "";
          for (String element : this.localValuesArr) {

            if (element != null) {

              writeStartElement(null, namespace, "valuesArr", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          for (String element : this.localValuesArr) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "valuesArr"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateProductAttributesAndValuesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateProductAttributesAndValuesRequestType object = new CreateProductAttributesAndValuesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateProductAttributesAndValuesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateProductAttributesAndValuesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {
                  list3.add(reader.getElementText());

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setValuesArr((java.lang.String[]) list3.toArray(new java.lang.String[list3.size()]));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class IntegrationLevel_type0 implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("",
        "integrationLevel_type0", "");


    /**
     * field for IntegrationLevel_type0
     */


    protected int localIntegrationLevel_type0;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected IntegrationLevel_type0(final int value, final boolean isRegisterValue) {
      this.localIntegrationLevel_type0 = value;
      if (isRegisterValue) {

        _table_.put(this.localIntegrationLevel_type0 + "", this);

      }

    }

    public static final int _value1 = org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("0");

    public static final int _value2 = org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("1");

    public static final int _value3 = org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("2");

    public static final IntegrationLevel_type0 value1 = new IntegrationLevel_type0(_value1, true);

    public static final IntegrationLevel_type0 value2 = new IntegrationLevel_type0(_value2, true);

    public static final IntegrationLevel_type0 value3 = new IntegrationLevel_type0(_value3, true);


    public int getValue() {
      return this.localIntegrationLevel_type0;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIntegrationLevel_type0);


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":integrationLevel_type0", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "integrationLevel_type0",
              xmlWriter);
        }
      }

      if (this.localIntegrationLevel_type0 == java.lang.Integer.MIN_VALUE) {

        throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localIntegrationLevel_type0));
      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("")) {
        return "";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIntegrationLevel_type0) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static IntegrationLevel_type0 fromValue(final int value) throws java.lang.IllegalArgumentException {
        IntegrationLevel_type0 enumeration = (IntegrationLevel_type0)

        _table_.get(value + "");


        if ((enumeration == null) && !(value == 0)) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static IntegrationLevel_type0 fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static IntegrationLevel_type0 fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return IntegrationLevel_type0.Factory.fromString(content, namespaceUri);
        }
        else {
          return IntegrationLevel_type0.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static IntegrationLevel_type0 parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        IntegrationLevel_type0 object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "integrationLevel_type0"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = IntegrationLevel_type0.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = IntegrationLevel_type0.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class VariantKeyDataType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = VariantKeyDataType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for StateFlag
     */


    protected boolean localStateFlag;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getStateFlag() {
      return this.localStateFlag;
    }


    /**
     * Auto generated setter method
     * 
     * @param param StateFlag
     */
    public void setStateFlag(final boolean param) {

      this.localStateFlag = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":VariantKeyDataType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "VariantKeyDataType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "stateFlag", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("stateFlag cannot be null!!");

      }
      else {
        xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "stateFlag"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static VariantKeyDataType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        VariantKeyDataType object = new VariantKeyDataType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"VariantKeyDataType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (VariantKeyDataType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "stateFlag").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "stateFlag" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setStateFlag(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SearchObjectsByExprRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SearchObjectsByExprRequestType", "ns1");


    /**
     * field for SqlString
     */


    protected java.lang.String localSqlString;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSqlString() {
      return this.localSqlString;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SqlString
     */
    public void setSqlString(final java.lang.String param) {

      this.localSqlString = param;


    }


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SearchObjectsByExprRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SearchObjectsByExprRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sqlString", xmlWriter);


      if (this.localSqlString == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sqlString cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSqlString);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sqlString"));

      if (this.localSqlString != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSqlString));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sqlString cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SearchObjectsByExprRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SearchObjectsByExprRequestType object = new SearchObjectsByExprRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SearchObjectsByExprRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SearchObjectsByExprRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sqlString").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sqlString" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSqlString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class IsCheckedInResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "IsCheckedInResponseType", "ns1");


    /**
     * field for ReturnValue
     */


    protected boolean localReturnValue;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final boolean param) {

      this.localReturnValue = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":IsCheckedInResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "IsCheckedInResponseType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "returnValue", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localReturnValue));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "returnValue"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localReturnValue));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static IsCheckedInResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        IsCheckedInResponseType object = new IsCheckedInResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"IsCheckedInResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (IsCheckedInResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "returnValue" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setReturnValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameCalibrationVariantRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameCalibrationVariantRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for OldCalibrationVariant
     */


    protected java.lang.String localOldCalibrationVariant;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getOldCalibrationVariant() {
      return this.localOldCalibrationVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param OldCalibrationVariant
     */
    public void setOldCalibrationVariant(final java.lang.String param) {

      this.localOldCalibrationVariant = param;


    }


    /**
     * field for NewCalibrationVariant
     */


    protected java.lang.String localNewCalibrationVariant;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewCalibrationVariant() {
      return this.localNewCalibrationVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewCalibrationVariant
     */
    public void setNewCalibrationVariant(final java.lang.String param) {

      this.localNewCalibrationVariant = param;


    }


    /**
     * field for PreValidation
     */


    protected boolean localPreValidation;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getPreValidation() {
      return this.localPreValidation;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PreValidation
     */
    public void setPreValidation(final boolean param) {

      this.localPreValidation = param;


    }


    /**
     * field for PostValidation
     */


    protected boolean localPostValidation;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getPostValidation() {
      return this.localPostValidation;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PostValidation
     */
    public void setPostValidation(final boolean param) {

      this.localPostValidation = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameCalibrationVariantRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameCalibrationVariantRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "oldCalibrationVariant", xmlWriter);


      if (this.localOldCalibrationVariant == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("oldCalibrationVariant cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localOldCalibrationVariant);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "newCalibrationVariant", xmlWriter);


      if (this.localNewCalibrationVariant == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("newCalibrationVariant cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localNewCalibrationVariant);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "preValidation", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("preValidation cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localPreValidation));
      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "postValidation", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("postValidation cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localPostValidation));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "oldCalibrationVariant"));

      if (this.localOldCalibrationVariant != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localOldCalibrationVariant));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("oldCalibrationVariant cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "newCalibrationVariant"));

      if (this.localNewCalibrationVariant != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localNewCalibrationVariant));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("newCalibrationVariant cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "preValidation"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPreValidation));

      elementList.add(new javax.xml.namespace.QName("", "postValidation"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPostValidation));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameCalibrationVariantRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameCalibrationVariantRequestType object = new RenameCalibrationVariantRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameCalibrationVariantRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameCalibrationVariantRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "oldCalibrationVariant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "oldCalibrationVariant"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setOldCalibrationVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "newCalibrationVariant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newCalibrationVariant"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewCalibrationVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "preValidation").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "preValidation"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPreValidation(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "postValidation").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "postValidation"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPostValidation(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteObjectItemType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = DeleteObjectItemType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for TryToDeleteContainerContent
     */


    protected boolean localTryToDeleteContainerContent;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getTryToDeleteContainerContent() {
      return this.localTryToDeleteContainerContent;
    }


    /**
     * Auto generated setter method
     * 
     * @param param TryToDeleteContainerContent
     */
    public void setTryToDeleteContainerContent(final boolean param) {

      this.localTryToDeleteContainerContent = param;


    }


    /**
     * field for PermanentDeletion
     */


    protected boolean localPermanentDeletion;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getPermanentDeletion() {
      return this.localPermanentDeletion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PermanentDeletion
     */
    public void setPermanentDeletion(final boolean param) {

      this.localPermanentDeletion = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteObjectItemType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DeleteObjectItemType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "tryToDeleteContainerContent", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("tryToDeleteContainerContent cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localTryToDeleteContainerContent));
      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "permanentDeletion", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("permanentDeletion cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localPermanentDeletion));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "tryToDeleteContainerContent"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
          .convertToString(this.localTryToDeleteContainerContent));

      elementList.add(new javax.xml.namespace.QName("", "permanentDeletion"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPermanentDeletion));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteObjectItemType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteObjectItemType object = new DeleteObjectItemType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteObjectItemType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteObjectItemType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "tryToDeleteContainerContent").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "tryToDeleteContainerContent"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setTryToDeleteContainerContent(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "permanentDeletion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "permanentDeletion"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPermanentDeletion(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreatePVDResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreatePVDResponseType", "ns1");


    /**
     * field for ValidationResult
     */


    protected ValidationResultType localValidationResult;


    /**
     * Auto generated getter method
     * 
     * @return ValidationResultType
     */
    public ValidationResultType getValidationResult() {
      return this.localValidationResult;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ValidationResult
     */
    public void setValidationResult(final ValidationResultType param) {

      this.localValidationResult = param;


    }


    /**
     * field for CreatedVersion
     */


    protected ObjInfoEntryType localCreatedVersion;


    /**
     * Auto generated getter method
     * 
     * @return ObjInfoEntryType
     */
    public ObjInfoEntryType getCreatedVersion() {
      return this.localCreatedVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param CreatedVersion
     */
    public void setCreatedVersion(final ObjInfoEntryType param) {

      this.localCreatedVersion = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreatePVDResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreatePVDResponseType", xmlWriter);
        }


      }

      if (this.localValidationResult == null) {
        throw new org.apache.axis2.databinding.ADBException("validationResult cannot be null!!");
      }
      this.localValidationResult.serialize(new javax.xml.namespace.QName("", "validationResult"), xmlWriter);

      if (this.localCreatedVersion == null) {
        throw new org.apache.axis2.databinding.ADBException("createdVersion cannot be null!!");
      }
      this.localCreatedVersion.serialize(new javax.xml.namespace.QName("", "createdVersion"), xmlWriter);

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "validationResult"));


      if (this.localValidationResult == null) {
        throw new org.apache.axis2.databinding.ADBException("validationResult cannot be null!!");
      }
      elementList.add(this.localValidationResult);

      elementList.add(new javax.xml.namespace.QName("", "createdVersion"));


      if (this.localCreatedVersion == null) {
        throw new org.apache.axis2.databinding.ADBException("createdVersion cannot be null!!");
      }
      elementList.add(this.localCreatedVersion);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreatePVDResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreatePVDResponseType object = new CreatePVDResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreatePVDResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreatePVDResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "validationResult").equals(reader.getName())) {

            object.setValidationResult(ValidationResultType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "createdVersion").equals(reader.getName())) {

            object.setCreatedVersion(ObjInfoEntryType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameCalibrationProjectRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameCalibrationProjectRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for NewProjectName
     */


    protected java.lang.String localNewProjectName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewProjectName() {
      return this.localNewProjectName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewProjectName
     */
    public void setNewProjectName(final java.lang.String param) {

      this.localNewProjectName = param;


    }


    /**
     * field for PreValidation
     */


    protected boolean localPreValidation;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getPreValidation() {
      return this.localPreValidation;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PreValidation
     */
    public void setPreValidation(final boolean param) {

      this.localPreValidation = param;


    }


    /**
     * field for PostValidation
     */


    protected boolean localPostValidation;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getPostValidation() {
      return this.localPostValidation;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PostValidation
     */
    public void setPostValidation(final boolean param) {

      this.localPostValidation = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameCalibrationProjectRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameCalibrationProjectRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "newProjectName", xmlWriter);


      if (this.localNewProjectName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("newProjectName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localNewProjectName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "preValidation", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("preValidation cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localPreValidation));
      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "postValidation", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("postValidation cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localPostValidation));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "newProjectName"));

      if (this.localNewProjectName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewProjectName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("newProjectName cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "preValidation"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPreValidation));

      elementList.add(new javax.xml.namespace.QName("", "postValidation"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPostValidation));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameCalibrationProjectRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameCalibrationProjectRequestType object = new RenameCalibrationProjectRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameCalibrationProjectRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameCalibrationProjectRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newProjectName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newProjectName"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewProjectName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "preValidation").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "preValidation"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPreValidation(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "postValidation").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "postValidation"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPostValidation(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateProductKeyRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateProductKeyRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * field for AttrAndValuesArr This was an Array!
     */


    protected ProductAttributeValueDataType[] localAttrAndValuesArr;


    /**
     * Auto generated getter method
     * 
     * @return ProductAttributeValueDataType[]
     */
    public ProductAttributeValueDataType[] getAttrAndValuesArr() {
      return this.localAttrAndValuesArr;
    }


    /**
     * validate the array for AttrAndValuesArr
     */
    protected void validateAttrAndValuesArr(final ProductAttributeValueDataType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param AttrAndValuesArr
     */
    public void setAttrAndValuesArr(final ProductAttributeValueDataType[] param) {

      validateAttrAndValuesArr(param);


      this.localAttrAndValuesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ProductAttributeValueDataType
     */
    public void addAttrAndValuesArr(final ProductAttributeValueDataType param) {
      if (this.localAttrAndValuesArr == null) {
        this.localAttrAndValuesArr = new ProductAttributeValueDataType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAttrAndValuesArr);
      list.add(param);
      this.localAttrAndValuesArr =
          (ProductAttributeValueDataType[]) list.toArray(new ProductAttributeValueDataType[list.size()]);

    }


    /**
     * field for StateFlag
     */


    protected boolean localStateFlag;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getStateFlag() {
      return this.localStateFlag;
    }


    /**
     * Auto generated setter method
     * 
     * @param param StateFlag
     */
    public void setStateFlag(final boolean param) {

      this.localStateFlag = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateProductKeyRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreateProductKeyRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();

      if (this.localAttrAndValuesArr != null) {
        for (ProductAttributeValueDataType element : this.localAttrAndValuesArr) {
          if (element != null) {
            element.serialize(new javax.xml.namespace.QName("", "attrAndValuesArr"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null!!");

      }

      namespace = "";
      writeStartElement(null, namespace, "stateFlag", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("stateFlag cannot be null!!");

      }
      else {
        xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }

      if (this.localAttrAndValuesArr != null) {
        for (ProductAttributeValueDataType element : this.localAttrAndValuesArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "attrAndValuesArr"));
            elementList.add(element);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null!!");

      }


      elementList.add(new javax.xml.namespace.QName("", "stateFlag"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateProductKeyRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateProductKeyRequestType object = new CreateProductKeyRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateProductKeyRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateProductKeyRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list4 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "attrAndValuesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list4.add(ProductAttributeValueDataType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone4 = false;
            while (!loopDone4) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone4 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "attrAndValuesArr").equals(reader.getName())) {
                  list4.add(ProductAttributeValueDataType.Factory.parse(reader));

                }
                else {
                  loopDone4 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object
                .setAttrAndValuesArr((ProductAttributeValueDataType[]) org.apache.axis2.databinding.utils.ConverterUtil
                    .convertToArray(ProductAttributeValueDataType.class, list4));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "stateFlag").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "stateFlag" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setStateFlag(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetActivatedProductAttributeValuesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetActivatedProductAttributeValuesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNameTracker = false;

    public boolean isNameSpecified() {
      return this.localNameTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {
      this.localNameTracker = param != null;

      this.localName = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetActivatedProductAttributeValuesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetActivatedProductAttributeValuesRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();
      if (this.localNameTracker) {
        namespace = "";
        writeStartElement(null, namespace, "name", xmlWriter);


        if (this.localName == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localName);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }
      if (this.localNameTracker) {
        elementList.add(new javax.xml.namespace.QName("", "name"));

        if (this.localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetActivatedProductAttributeValuesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetActivatedProductAttributeValuesRequestType object = new GetActivatedProductAttributeValuesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetActivatedProductAttributeValuesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetActivatedProductAttributeValuesRequestType) ExtensionMapper.getTypeObject(nsUri, type,
                    reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class LogoutResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "LogoutResponseType", "ns1");


    /**
     * field for ReturnValue
     */


    protected boolean localReturnValue;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final boolean param) {

      this.localReturnValue = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":LogoutResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "LogoutResponseType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "returnValue", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localReturnValue));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "returnValue"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localReturnValue));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static LogoutResponseType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        LogoutResponseType object = new LogoutResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"LogoutResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (LogoutResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "returnValue" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setReturnValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetSystemAttributesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetSystemAttributesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetSystemAttributesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetSystemAttributesRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetSystemAttributesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetSystemAttributesRequestType object = new GetSystemAttributesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetSystemAttributesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetSystemAttributesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameEcuSoftwareVersionResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameEcuSoftwareVersionResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameEcuSoftwareVersionResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameEcuSoftwareVersionResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameEcuSoftwareVersionResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameEcuSoftwareVersionResponseType object = new RenameEcuSoftwareVersionResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameEcuSoftwareVersionResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameEcuSoftwareVersionResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetLifecycleStateType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetLifecycleStateType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for NewStateName
     */


    protected java.lang.String localNewStateName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewStateName() {
      return this.localNewStateName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewStateName
     */
    public void setNewStateName(final java.lang.String param) {

      this.localNewStateName = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetLifecycleStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetLifecycleStateType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "newStateName", xmlWriter);


      if (this.localNewStateName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("newStateName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localNewStateName);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "newStateName"));

      if (this.localNewStateName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewStateName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("newStateName cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetLifecycleStateType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetLifecycleStateType object = new SetLifecycleStateType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetLifecycleStateType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetLifecycleStateType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newStateName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newStateName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewStateName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class UpdateProgramKeyResponse implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "UpdateProgramKeyResponse", "ns1");


    /**
     * field for UpdateProgramKeyResponse
     */


    protected ProgramKeyDataType localUpdateProgramKeyResponse;


    /**
     * Auto generated getter method
     * 
     * @return ProgramKeyDataType
     */
    public ProgramKeyDataType getUpdateProgramKeyResponse() {
      return this.localUpdateProgramKeyResponse;
    }


    /**
     * Auto generated setter method
     * 
     * @param param UpdateProgramKeyResponse
     */
    public void setUpdateProgramKeyResponse(final ProgramKeyDataType param) {

      this.localUpdateProgramKeyResponse = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      if (this.localUpdateProgramKeyResponse == null) {
        throw new org.apache.axis2.databinding.ADBException("UpdateProgramKeyResponse cannot be null!");
      }
      this.localUpdateProgramKeyResponse.serialize(MY_QNAME, xmlWriter);


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return this.localUpdateProgramKeyResponse.getPullParser(MY_QNAME);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static UpdateProgramKeyResponse parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        UpdateProgramKeyResponse object = new UpdateProgramKeyResponse();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement()) {

              if (reader.isStartElement() &&
                  new javax.xml.namespace.QName("http://easee.vector.com/application/cdmservice/",
                      "UpdateProgramKeyResponse").equals(reader.getName())) {

                object.setUpdateProgramKeyResponse(ProgramKeyDataType.Factory.parse(reader));

              } // End of if for expected property start element

              else {
                // A start element we are not expecting indicates an invalid parameter was passed
                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
              }

            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class UpdateProgramKeyRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "UpdateProgramKeyRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for OldName
     */


    protected java.lang.String localOldName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getOldName() {
      return this.localOldName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param OldName
     */
    public void setOldName(final java.lang.String param) {

      this.localOldName = param;


    }


    /**
     * field for NewName
     */


    protected java.lang.String localNewName;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNewNameTracker = false;

    public boolean isNewNameSpecified() {
      return this.localNewNameTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewName() {
      return this.localNewName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewName
     */
    public void setNewName(final java.lang.String param) {
      this.localNewNameTracker = param != null;

      this.localNewName = param;


    }


    /**
     * field for NewPstVersionNo
     */


    protected java.lang.String localNewPstVersionNo;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNewPstVersionNoTracker = false;

    public boolean isNewPstVersionNoSpecified() {
      return this.localNewPstVersionNoTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewPstVersionNo() {
      return this.localNewPstVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewPstVersionNo
     */
    public void setNewPstVersionNo(final java.lang.String param) {
      this.localNewPstVersionNoTracker = param != null;

      this.localNewPstVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":UpdateProgramKeyRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "UpdateProgramKeyRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "oldName", xmlWriter);


      if (this.localOldName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("oldName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localOldName);

      }

      xmlWriter.writeEndElement();
      if (this.localNewNameTracker) {
        namespace = "";
        writeStartElement(null, namespace, "newName", xmlWriter);


        if (this.localNewName == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("newName cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localNewName);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localNewPstVersionNoTracker) {
        namespace = "";
        writeStartElement(null, namespace, "newPstVersionNo", xmlWriter);


        if (this.localNewPstVersionNo == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("newPstVersionNo cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localNewPstVersionNo);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "oldName"));

      if (this.localOldName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localOldName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("oldName cannot be null!!");
      }
      if (this.localNewNameTracker) {
        elementList.add(new javax.xml.namespace.QName("", "newName"));

        if (this.localNewName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewName));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("newName cannot be null!!");
        }
      }
      if (this.localNewPstVersionNoTracker) {
        elementList.add(new javax.xml.namespace.QName("", "newPstVersionNo"));

        if (this.localNewPstVersionNo != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewPstVersionNo));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("newPstVersionNo cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static UpdateProgramKeyRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        UpdateProgramKeyRequestType object = new UpdateProgramKeyRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"UpdateProgramKeyRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (UpdateProgramKeyRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "oldName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "oldName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setOldName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newPstVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newPstVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewPstVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DoHexDeliveryRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DoHexDeliveryRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for DstVersion
     */


    protected java.lang.String localDstVersion;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getDstVersion() {
      return this.localDstVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param DstVersion
     */
    public void setDstVersion(final java.lang.String param) {

      this.localDstVersion = param;


    }


    /**
     * field for HexDeliveryInfo
     */


    protected NFODeliveryInfoType localHexDeliveryInfo;


    /**
     * Auto generated getter method
     * 
     * @return NFODeliveryInfoType
     */
    public NFODeliveryInfoType getHexDeliveryInfo() {
      return this.localHexDeliveryInfo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param HexDeliveryInfo
     */
    public void setHexDeliveryInfo(final NFODeliveryInfoType param) {

      this.localHexDeliveryInfo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DoHexDeliveryRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DoHexDeliveryRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "dstVersion", xmlWriter);


      if (this.localDstVersion == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("dstVersion cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localDstVersion);

      }

      xmlWriter.writeEndElement();

      if (this.localHexDeliveryInfo == null) {
        throw new org.apache.axis2.databinding.ADBException("hexDeliveryInfo cannot be null!!");
      }
      this.localHexDeliveryInfo.serialize(new javax.xml.namespace.QName("", "hexDeliveryInfo"), xmlWriter);

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "dstVersion"));

      if (this.localDstVersion != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localDstVersion));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("dstVersion cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "hexDeliveryInfo"));


      if (this.localHexDeliveryInfo == null) {
        throw new org.apache.axis2.databinding.ADBException("hexDeliveryInfo cannot be null!!");
      }
      elementList.add(this.localHexDeliveryInfo);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DoHexDeliveryRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DoHexDeliveryRequestType object = new DoHexDeliveryRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DoHexDeliveryRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DoHexDeliveryRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "dstVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "dstVersion" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setDstVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "hexDeliveryInfo").equals(reader.getName())) {

            object.setHexDeliveryInfo(NFODeliveryInfoType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class QualityDataMigrationRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "QualityDataMigrationRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for DstVersions This was an Array!
     */


    protected java.lang.String[] localDstVersions;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getDstVersions() {
      return this.localDstVersions;
    }


    /**
     * validate the array for DstVersions
     */
    protected void validateDstVersions(final java.lang.String[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param DstVersions
     */
    public void setDstVersions(final java.lang.String[] param) {

      validateDstVersions(param);


      this.localDstVersions = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addDstVersions(final java.lang.String param) {
      if (this.localDstVersions == null) {
        this.localDstVersions = new java.lang.String[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localDstVersions);
      list.add(param);
      this.localDstVersions = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":QualityDataMigrationRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "QualityDataMigrationRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localDstVersions != null) {
        namespace = "";
        for (String localDstVersion : this.localDstVersions) {

          if (localDstVersion != null) {

            writeStartElement(null, namespace, "dstVersions", xmlWriter);


            xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDstVersion));

            xmlWriter.writeEndElement();

          }
          else {

            throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

      }


      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localDstVersions != null) {
        for (String localDstVersion : this.localDstVersions) {

          if (localDstVersion != null) {
            elementList.add(new javax.xml.namespace.QName("", "dstVersions"));
            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDstVersion));
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

          }


        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static QualityDataMigrationRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        QualityDataMigrationRequestType object = new QualityDataMigrationRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"QualityDataMigrationRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (QualityDataMigrationRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "dstVersions").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "dstVersions").equals(reader.getName())) {
                  list2.add(reader.getElementText());

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setDstVersions((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SearchObjectsByExprResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SearchObjectsByExprResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected ObjInfoEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ObjInfoEntryType[]
     */
    public ObjInfoEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final ObjInfoEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final ObjInfoEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ObjInfoEntryType
     */
    public void addReturnValue(final ObjInfoEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new ObjInfoEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (ObjInfoEntryType[]) list.toArray(new ObjInfoEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SearchObjectsByExprResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SearchObjectsByExprResponseType",
              xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ObjInfoEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ObjInfoEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SearchObjectsByExprResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SearchObjectsByExprResponseType object = new SearchObjectsByExprResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SearchObjectsByExprResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SearchObjectsByExprResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(ObjInfoEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(ObjInfoEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((ObjInfoEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                ObjInfoEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteProductAttributesAndValuesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DeleteProductAttributesAndValuesResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteProductAttributesAndValuesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "DeleteProductAttributesAndValuesResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteProductAttributesAndValuesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteProductAttributesAndValuesResponseType object = new DeleteProductAttributesAndValuesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteProductAttributesAndValuesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteProductAttributesAndValuesResponseType) ExtensionMapper
                    .getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteProductKeysResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DeleteProductKeysResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteProductKeysResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DeleteProductKeysResponseType",
              xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteProductKeysResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteProductKeysResponseType object = new DeleteProductKeysResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteProductKeysResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteProductKeysResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DoHexDeliveryResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DoHexDeliveryResponseType", "ns1");


    /**
     * field for NewHexVersion
     */


    protected java.lang.String localNewHexVersion;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewHexVersion() {
      return this.localNewHexVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewHexVersion
     */
    public void setNewHexVersion(final java.lang.String param) {

      this.localNewHexVersion = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DoHexDeliveryResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DoHexDeliveryResponseType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "newHexVersion", xmlWriter);


      if (this.localNewHexVersion == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("newHexVersion cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localNewHexVersion);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "newHexVersion"));

      if (this.localNewHexVersion != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewHexVersion));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("newHexVersion cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DoHexDeliveryResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DoHexDeliveryResponseType object = new DoHexDeliveryResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DoHexDeliveryResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DoHexDeliveryResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newHexVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newHexVersion"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewHexVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class NFOReferenceInfoType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = NFOReferenceInfoType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for VersionAttrs This was an Array!
     */


    protected MapEntryType[] localVersionAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localVersionAttrsTracker = false;

    public boolean isVersionAttrsSpecified() {
      return this.localVersionAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getVersionAttrs() {
      return this.localVersionAttrs;
    }


    /**
     * validate the array for VersionAttrs
     */
    protected void validateVersionAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionAttrs
     */
    public void setVersionAttrs(final MapEntryType[] param) {

      validateVersionAttrs(param);

      this.localVersionAttrsTracker = param != null;

      this.localVersionAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addVersionAttrs(final MapEntryType param) {
      if (this.localVersionAttrs == null) {
        this.localVersionAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localVersionAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localVersionAttrs);
      list.add(param);
      this.localVersionAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * field for ElemAttrs This was an Array!
     */


    protected MapEntryType[] localElemAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localElemAttrsTracker = false;

    public boolean isElemAttrsSpecified() {
      return this.localElemAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getElemAttrs() {
      return this.localElemAttrs;
    }


    /**
     * validate the array for ElemAttrs
     */
    protected void validateElemAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ElemAttrs
     */
    public void setElemAttrs(final MapEntryType[] param) {

      validateElemAttrs(param);

      this.localElemAttrsTracker = param != null;

      this.localElemAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addElemAttrs(final MapEntryType param) {
      if (this.localElemAttrs == null) {
        this.localElemAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localElemAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localElemAttrs);
      list.add(param);
      this.localElemAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * field for ContentAttrs This was an Array!
     */


    protected MapEntryType[] localContentAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localContentAttrsTracker = false;

    public boolean isContentAttrsSpecified() {
      return this.localContentAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getContentAttrs() {
      return this.localContentAttrs;
    }


    /**
     * validate the array for ContentAttrs
     */
    protected void validateContentAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ContentAttrs
     */
    public void setContentAttrs(final MapEntryType[] param) {

      validateContentAttrs(param);

      this.localContentAttrsTracker = param != null;

      this.localContentAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addContentAttrs(final MapEntryType param) {
      if (this.localContentAttrs == null) {
        this.localContentAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localContentAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localContentAttrs);
      list.add(param);
      this.localContentAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":NFOReferenceInfoType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "NFOReferenceInfoType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();
      if (this.localVersionAttrsTracker) {
        if (this.localVersionAttrs != null) {
          for (MapEntryType localVersionAttr : this.localVersionAttrs) {
            if (localVersionAttr != null) {
              localVersionAttr.serialize(new javax.xml.namespace.QName("", "versionAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("versionAttrs cannot be null!!");

        }
      }
      if (this.localElemAttrsTracker) {
        if (this.localElemAttrs != null) {
          for (MapEntryType localElemAttr : this.localElemAttrs) {
            if (localElemAttr != null) {
              localElemAttr.serialize(new javax.xml.namespace.QName("", "elemAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("elemAttrs cannot be null!!");

        }
      }
      if (this.localContentAttrsTracker) {
        if (this.localContentAttrs != null) {
          for (MapEntryType localContentAttr : this.localContentAttrs) {
            if (localContentAttr != null) {
              localContentAttr.serialize(new javax.xml.namespace.QName("", "contentAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("contentAttrs cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }
      if (this.localVersionAttrsTracker) {
        if (this.localVersionAttrs != null) {
          for (MapEntryType localVersionAttr : this.localVersionAttrs) {

            if (localVersionAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "versionAttrs"));
              elementList.add(localVersionAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("versionAttrs cannot be null!!");

        }

      }
      if (this.localElemAttrsTracker) {
        if (this.localElemAttrs != null) {
          for (MapEntryType localElemAttr : this.localElemAttrs) {

            if (localElemAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "elemAttrs"));
              elementList.add(localElemAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("elemAttrs cannot be null!!");

        }

      }
      if (this.localContentAttrsTracker) {
        if (this.localContentAttrs != null) {
          for (MapEntryType localContentAttr : this.localContentAttrs) {

            if (localContentAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "contentAttrs"));
              elementList.add(localContentAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("contentAttrs cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static NFOReferenceInfoType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        NFOReferenceInfoType object = new NFOReferenceInfoType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"NFOReferenceInfoType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (NFOReferenceInfoType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();

          java.util.ArrayList list3 = new java.util.ArrayList();

          java.util.ArrayList list4 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "versionAttrs").equals(reader.getName())) {
                  list2.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setVersionAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list2));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "elemAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "elemAttrs").equals(reader.getName())) {
                  list3.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setElemAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list3));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "contentAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list4.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone4 = false;
            while (!loopDone4) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone4 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "contentAttrs").equals(reader.getName())) {
                  list4.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone4 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setContentAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list4));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SearchObjectsRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SearchObjectsRequestType", "ns1");


    /**
     * field for ObjClass
     */


    protected java.lang.String localObjClass;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjClass() {
      return this.localObjClass;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjClass
     */
    public void setObjClass(final java.lang.String param) {

      this.localObjClass = param;


    }


    /**
     * field for ObjName
     */


    protected java.lang.String localObjName;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjNameTracker = false;

    public boolean isObjNameSpecified() {
      return this.localObjNameTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjName() {
      return this.localObjName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjName
     */
    public void setObjName(final java.lang.String param) {
      this.localObjNameTracker = param != null;

      this.localObjName = param;


    }


    /**
     * field for ObjRevision
     */


    protected java.lang.String localObjRevision;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjRevisionTracker = false;

    public boolean isObjRevisionSpecified() {
      return this.localObjRevisionTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjRevision() {
      return this.localObjRevision;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjRevision
     */
    public void setObjRevision(final java.lang.String param) {
      this.localObjRevisionTracker = param != null;

      this.localObjRevision = param;


    }


    /**
     * field for ObjVariant
     */


    protected java.lang.String localObjVariant;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjVariantTracker = false;

    public boolean isObjVariantSpecified() {
      return this.localObjVariantTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjVariant() {
      return this.localObjVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjVariant
     */
    public void setObjVariant(final java.lang.String param) {
      this.localObjVariantTracker = param != null;

      this.localObjVariant = param;


    }


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ObjType
     */


    protected java.lang.String localObjType;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjTypeTracker = false;

    public boolean isObjTypeSpecified() {
      return this.localObjTypeTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjType() {
      return this.localObjType;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjType
     */
    public void setObjType(final java.lang.String param) {
      this.localObjTypeTracker = param != null;

      this.localObjType = param;


    }


    /**
     * field for ObjDomain
     */


    protected java.lang.String localObjDomain;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjDomainTracker = false;

    public boolean isObjDomainSpecified() {
      return this.localObjDomainTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjDomain() {
      return this.localObjDomain;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjDomain
     */
    public void setObjDomain(final java.lang.String param) {
      this.localObjDomainTracker = param != null;

      this.localObjDomain = param;


    }


    /**
     * field for ObjChkInState
     */


    protected java.math.BigInteger localObjChkInState;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjChkInStateTracker = false;

    public boolean isObjChkInStateSpecified() {
      return this.localObjChkInStateTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.math.BigInteger
     */
    public java.math.BigInteger getObjChkInState() {
      return this.localObjChkInState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjChkInState
     */
    public void setObjChkInState(final java.math.BigInteger param) {
      this.localObjChkInStateTracker = param != null;

      this.localObjChkInState = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SearchObjectsRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SearchObjectsRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "objClass", xmlWriter);


      if (this.localObjClass == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjClass);

      }

      xmlWriter.writeEndElement();
      if (this.localObjNameTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objName", xmlWriter);


        if (this.localObjName == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjName);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localObjRevisionTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objRevision", xmlWriter);


        if (this.localObjRevision == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objRevision cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjRevision);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localObjVariantTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objVariant", xmlWriter);


        if (this.localObjVariant == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjVariant);

        }

        xmlWriter.writeEndElement();
      }
      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();
      if (this.localObjTypeTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objType", xmlWriter);


        if (this.localObjType == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objType cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjType);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localObjDomainTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objDomain", xmlWriter);


        if (this.localObjDomain == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objDomain cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjDomain);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localObjChkInStateTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objChkInState", xmlWriter);


        if (this.localObjChkInState == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objChkInState cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(this.localObjChkInState));

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "objClass"));

      if (this.localObjClass != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjClass));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");
      }
      if (this.localObjNameTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objName"));

        if (this.localObjName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjName));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");
        }
      }
      if (this.localObjRevisionTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objRevision"));

        if (this.localObjRevision != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjRevision));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objRevision cannot be null!!");
        }
      }
      if (this.localObjVariantTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objVariant"));

        if (this.localObjVariant != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjVariant));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");
        }
      }
      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }
      if (this.localObjTypeTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objType"));

        if (this.localObjType != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjType));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objType cannot be null!!");
        }
      }
      if (this.localObjDomainTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objDomain"));

        if (this.localObjDomain != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjDomain));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objDomain cannot be null!!");
        }
      }
      if (this.localObjChkInStateTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objChkInState"));

        if (this.localObjChkInState != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjChkInState));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objChkInState cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SearchObjectsRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SearchObjectsRequestType object = new SearchObjectsRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SearchObjectsRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SearchObjectsRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objClass").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objClass" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjClass(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objRevision").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objRevision" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjRevision(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objVariant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objVariant" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objType").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objType" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objDomain").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objDomain" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjDomain(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objChkInState").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objChkInState"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjChkInState(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckOutResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CheckOutResponseType", "ns1");


    /**
     * field for CheckOutItemStates This was an Array!
     */


    protected CheckOutItemStateType[] localCheckOutItemStates;


    /**
     * Auto generated getter method
     * 
     * @return CheckOutItemStateType[]
     */
    public CheckOutItemStateType[] getCheckOutItemStates() {
      return this.localCheckOutItemStates;
    }


    /**
     * validate the array for CheckOutItemStates
     */
    protected void validateCheckOutItemStates(final CheckOutItemStateType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param CheckOutItemStates
     */
    public void setCheckOutItemStates(final CheckOutItemStateType[] param) {

      validateCheckOutItemStates(param);


      this.localCheckOutItemStates = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param CheckOutItemStateType
     */
    public void addCheckOutItemStates(final CheckOutItemStateType param) {
      if (this.localCheckOutItemStates == null) {
        this.localCheckOutItemStates = new CheckOutItemStateType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localCheckOutItemStates);
      list.add(param);
      this.localCheckOutItemStates = (CheckOutItemStateType[]) list.toArray(new CheckOutItemStateType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckOutResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckOutResponseType", xmlWriter);
        }


      }

      if (this.localCheckOutItemStates != null) {
        for (CheckOutItemStateType localCheckOutItemState : this.localCheckOutItemStates) {
          if (localCheckOutItemState != null) {
            localCheckOutItemState.serialize(new javax.xml.namespace.QName("", "checkOutItemStates"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("checkOutItemStates cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("checkOutItemStates cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      if (this.localCheckOutItemStates != null) {
        for (CheckOutItemStateType localCheckOutItemState : this.localCheckOutItemStates) {

          if (localCheckOutItemState != null) {
            elementList.add(new javax.xml.namespace.QName("", "checkOutItemStates"));
            elementList.add(localCheckOutItemState);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("checkOutItemStates cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("checkOutItemStates cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckOutResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CheckOutResponseType object = new CheckOutResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckOutResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckOutResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "checkOutItemStates").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(CheckOutItemStateType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "checkOutItemStates").equals(reader.getName())) {
                  list1.add(CheckOutItemStateType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setCheckOutItemStates((CheckOutItemStateType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(CheckOutItemStateType.class, list1));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class IntegrationLevel_type1 implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "integrationLevel_type1", "ns1");


    /**
     * field for IntegrationLevel_type0
     */


    protected int localIntegrationLevel_type0;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected IntegrationLevel_type1(final int value, final boolean isRegisterValue) {
      this.localIntegrationLevel_type0 = value;
      if (isRegisterValue) {

        _table_.put(this.localIntegrationLevel_type0 + "", this);

      }

    }

    public static final int _value1 = org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("0");

    public static final int _value2 = org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("1");

    public static final int _value3 = org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("2");

    public static final IntegrationLevel_type1 value1 = new IntegrationLevel_type1(_value1, true);

    public static final IntegrationLevel_type1 value2 = new IntegrationLevel_type1(_value2, true);

    public static final IntegrationLevel_type1 value3 = new IntegrationLevel_type1(_value3, true);


    public int getValue() {
      return this.localIntegrationLevel_type0;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIntegrationLevel_type0);


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":integrationLevel_type1", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "integrationLevel_type1",
              xmlWriter);
        }
      }

      if (this.localIntegrationLevel_type0 == java.lang.Integer.MIN_VALUE) {

        throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localIntegrationLevel_type0));
      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIntegrationLevel_type0) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static IntegrationLevel_type1 fromValue(final int value) throws java.lang.IllegalArgumentException {
        IntegrationLevel_type1 enumeration = (IntegrationLevel_type1)

        _table_.get(value + "");


        if ((enumeration == null) && !(value == 0)) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static IntegrationLevel_type1 fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static IntegrationLevel_type1 fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return IntegrationLevel_type1.Factory.fromString(content, namespaceUri);
        }
        else {
          return IntegrationLevel_type1.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static IntegrationLevel_type1 parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        IntegrationLevel_type1 object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "integrationLevel_type0"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = IntegrationLevel_type1.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = IntegrationLevel_type1.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ErrorType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ErrorType", "ns1");


    /**
     * field for ErrorCode
     */


    protected int localErrorCode;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localErrorCodeTracker = false;

    public boolean isErrorCodeSpecified() {
      return this.localErrorCodeTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return int
     */
    public int getErrorCode() {
      return this.localErrorCode;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ErrorCode
     */
    public void setErrorCode(final int param) {

      // setting primitive attribute tracker to true
      this.localErrorCodeTracker = param != java.lang.Integer.MIN_VALUE;

      this.localErrorCode = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix + ":ErrorType",
              xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ErrorType", xmlWriter);
        }


      }
      if (this.localErrorCodeTracker) {
        namespace = "";
        writeStartElement(null, namespace, "ErrorCode", xmlWriter);

        if (this.localErrorCode == java.lang.Integer.MIN_VALUE) {

          throw new org.apache.axis2.databinding.ADBException("ErrorCode cannot be null!!");

        }
        else {
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(this.localErrorCode));
        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localErrorCodeTracker) {
        elementList.add(new javax.xml.namespace.QName("", "ErrorCode"));

        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localErrorCode));
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ErrorType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ErrorType object = new ErrorType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ErrorType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ErrorType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "ErrorCode").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "ErrorCode" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setErrorCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));

            reader.next();

          } // End of if for expected property start element

          else {

            object.setErrorCode(java.lang.Integer.MIN_VALUE);

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class NFODeliveryInfoType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = NFODeliveryInfoType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for File
     */


    protected AttachmentType localFile;


    /**
     * Auto generated getter method
     * 
     * @return AttachmentType
     */
    public AttachmentType getFile() {
      return this.localFile;
    }


    /**
     * Auto generated setter method
     * 
     * @param param File
     */
    public void setFile(final AttachmentType param) {

      this.localFile = param;


    }


    /**
     * field for OriginalFileName
     */


    protected java.lang.String localOriginalFileName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getOriginalFileName() {
      return this.localOriginalFileName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param OriginalFileName
     */
    public void setOriginalFileName(final java.lang.String param) {

      this.localOriginalFileName = param;


    }


    /**
     * field for OriginalDate
     */


    protected java.util.Calendar localOriginalDate;


    /**
     * Auto generated getter method
     * 
     * @return java.util.Calendar
     */
    public java.util.Calendar getOriginalDate() {
      return this.localOriginalDate;
    }


    /**
     * Auto generated setter method
     * 
     * @param param OriginalDate
     */
    public void setOriginalDate(final java.util.Calendar param) {

      this.localOriginalDate = param;


    }


    /**
     * field for Activate
     */


    protected boolean localActivate;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getActivate() {
      return this.localActivate;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Activate
     */
    public void setActivate(final boolean param) {

      this.localActivate = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":NFODeliveryInfoType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "NFODeliveryInfoType", xmlWriter);
        }


      }

      if (this.localFile == null) {
        throw new org.apache.axis2.databinding.ADBException("File cannot be null!!");
      }
      this.localFile.serialize(new javax.xml.namespace.QName("", "File"), xmlWriter);

      namespace = "";
      writeStartElement(null, namespace, "originalFileName", xmlWriter);


      if (this.localOriginalFileName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("originalFileName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localOriginalFileName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "originalDate", xmlWriter);


      if (this.localOriginalDate == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("originalDate cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localOriginalDate));

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "activate", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("activate cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localActivate));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "File"));


      if (this.localFile == null) {
        throw new org.apache.axis2.databinding.ADBException("File cannot be null!!");
      }
      elementList.add(this.localFile);

      elementList.add(new javax.xml.namespace.QName("", "originalFileName"));

      if (this.localOriginalFileName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localOriginalFileName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("originalFileName cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "originalDate"));

      if (this.localOriginalDate != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localOriginalDate));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("originalDate cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "activate"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localActivate));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static NFODeliveryInfoType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        NFODeliveryInfoType object = new NFODeliveryInfoType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"NFODeliveryInfoType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (NFODeliveryInfoType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "File").equals(reader.getName())) {

            object.setFile(AttachmentType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "originalFileName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "originalFileName"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setOriginalFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "originalDate").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "originalDate" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setOriginalDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "activate").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "activate" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setActivate(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreatePSTRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreatePSTRequestType", "ns1");


    /**
     * field for HexFile
     */


    protected NFOCreationInfoType localHexFile;


    /**
     * Auto generated getter method
     * 
     * @return NFOCreationInfoType
     */
    public NFOCreationInfoType getHexFile() {
      return this.localHexFile;
    }


    /**
     * Auto generated setter method
     * 
     * @param param HexFile
     */
    public void setHexFile(final NFOCreationInfoType param) {

      this.localHexFile = param;


    }


    /**
     * field for A2LFile
     */


    protected NFOCreationInfoType localA2LFile;


    /**
     * Auto generated getter method
     * 
     * @return NFOCreationInfoType
     */
    public NFOCreationInfoType getA2LFile() {
      return this.localA2LFile;
    }


    /**
     * Auto generated setter method
     * 
     * @param param A2LFile
     */
    public void setA2LFile(final NFOCreationInfoType param) {

      this.localA2LFile = param;


    }


    /**
     * field for AdditionalFiles This was an Array!
     */


    protected NFOCreationInfoType[] localAdditionalFiles;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localAdditionalFilesTracker = false;

    public boolean isAdditionalFilesSpecified() {
      return this.localAdditionalFilesTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return NFOCreationInfoType[]
     */
    public NFOCreationInfoType[] getAdditionalFiles() {
      return this.localAdditionalFiles;
    }


    /**
     * validate the array for AdditionalFiles
     */
    protected void validateAdditionalFiles(final NFOCreationInfoType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param AdditionalFiles
     */
    public void setAdditionalFiles(final NFOCreationInfoType[] param) {

      validateAdditionalFiles(param);

      this.localAdditionalFilesTracker = param != null;

      this.localAdditionalFiles = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param NFOCreationInfoType
     */
    public void addAdditionalFiles(final NFOCreationInfoType param) {
      if (this.localAdditionalFiles == null) {
        this.localAdditionalFiles = new NFOCreationInfoType[] {};
      }


      // update the setting tracker
      this.localAdditionalFilesTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAdditionalFiles);
      list.add(param);
      this.localAdditionalFiles = (NFOCreationInfoType[]) list.toArray(new NFOCreationInfoType[list.size()]);

    }


    /**
     * field for AdditionalObjects This was an Array!
     */


    protected NFOReferenceInfoType[] localAdditionalObjects;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localAdditionalObjectsTracker = false;

    public boolean isAdditionalObjectsSpecified() {
      return this.localAdditionalObjectsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return NFOReferenceInfoType[]
     */
    public NFOReferenceInfoType[] getAdditionalObjects() {
      return this.localAdditionalObjects;
    }


    /**
     * validate the array for AdditionalObjects
     */
    protected void validateAdditionalObjects(final NFOReferenceInfoType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param AdditionalObjects
     */
    public void setAdditionalObjects(final NFOReferenceInfoType[] param) {

      validateAdditionalObjects(param);

      this.localAdditionalObjectsTracker = param != null;

      this.localAdditionalObjects = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param NFOReferenceInfoType
     */
    public void addAdditionalObjects(final NFOReferenceInfoType param) {
      if (this.localAdditionalObjects == null) {
        this.localAdditionalObjects = new NFOReferenceInfoType[] {};
      }


      // update the setting tracker
      this.localAdditionalObjectsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAdditionalObjects);
      list.add(param);
      this.localAdditionalObjects = (NFOReferenceInfoType[]) list.toArray(new NFOReferenceInfoType[list.size()]);

    }


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ObjName
     */


    protected java.lang.String localObjName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjName() {
      return this.localObjName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjName
     */
    public void setObjName(final java.lang.String param) {

      this.localObjName = param;


    }


    /**
     * field for ObjVariant
     */


    protected java.lang.String localObjVariant;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjVariantTracker = false;

    public boolean isObjVariantSpecified() {
      return this.localObjVariantTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjVariant() {
      return this.localObjVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjVariant
     */
    public void setObjVariant(final java.lang.String param) {
      this.localObjVariantTracker = param != null;

      this.localObjVariant = param;


    }


    /**
     * field for VersionAttrs This was an Array!
     */


    protected MapEntryType[] localVersionAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localVersionAttrsTracker = false;

    public boolean isVersionAttrsSpecified() {
      return this.localVersionAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getVersionAttrs() {
      return this.localVersionAttrs;
    }


    /**
     * validate the array for VersionAttrs
     */
    protected void validateVersionAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionAttrs
     */
    public void setVersionAttrs(final MapEntryType[] param) {

      validateVersionAttrs(param);

      this.localVersionAttrsTracker = param != null;

      this.localVersionAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addVersionAttrs(final MapEntryType param) {
      if (this.localVersionAttrs == null) {
        this.localVersionAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localVersionAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localVersionAttrs);
      list.add(param);
      this.localVersionAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * field for ElemAttrs This was an Array!
     */


    protected MapEntryType[] localElemAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localElemAttrsTracker = false;

    public boolean isElemAttrsSpecified() {
      return this.localElemAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getElemAttrs() {
      return this.localElemAttrs;
    }


    /**
     * validate the array for ElemAttrs
     */
    protected void validateElemAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ElemAttrs
     */
    public void setElemAttrs(final MapEntryType[] param) {

      validateElemAttrs(param);

      this.localElemAttrsTracker = param != null;

      this.localElemAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addElemAttrs(final MapEntryType param) {
      if (this.localElemAttrs == null) {
        this.localElemAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localElemAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localElemAttrs);
      list.add(param);
      this.localElemAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreatePSTRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreatePSTRequestType", xmlWriter);
        }


      }

      if (this.localHexFile == null) {
        throw new org.apache.axis2.databinding.ADBException("hexFile cannot be null!!");
      }
      this.localHexFile.serialize(new javax.xml.namespace.QName("", "hexFile"), xmlWriter);

      if (this.localA2LFile == null) {
        throw new org.apache.axis2.databinding.ADBException("a2LFile cannot be null!!");
      }
      this.localA2LFile.serialize(new javax.xml.namespace.QName("", "a2LFile"), xmlWriter);
      if (this.localAdditionalFilesTracker) {
        if (this.localAdditionalFiles != null) {
          for (NFOCreationInfoType localAdditionalFile : this.localAdditionalFiles) {
            if (localAdditionalFile != null) {
              localAdditionalFile.serialize(new javax.xml.namespace.QName("", "additionalFiles"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("additionalFiles cannot be null!!");

        }
      }
      if (this.localAdditionalObjectsTracker) {
        if (this.localAdditionalObjects != null) {
          for (NFOReferenceInfoType localAdditionalObject : this.localAdditionalObjects) {
            if (localAdditionalObject != null) {
              localAdditionalObject.serialize(new javax.xml.namespace.QName("", "additionalObjects"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("additionalObjects cannot be null!!");

        }
      }
      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objName", xmlWriter);


      if (this.localObjName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjName);

      }

      xmlWriter.writeEndElement();
      if (this.localObjVariantTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objVariant", xmlWriter);


        if (this.localObjVariant == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjVariant);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localVersionAttrsTracker) {
        if (this.localVersionAttrs != null) {
          for (MapEntryType localVersionAttr : this.localVersionAttrs) {
            if (localVersionAttr != null) {
              localVersionAttr.serialize(new javax.xml.namespace.QName("", "versionAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("versionAttrs cannot be null!!");

        }
      }
      if (this.localElemAttrsTracker) {
        if (this.localElemAttrs != null) {
          for (MapEntryType localElemAttr : this.localElemAttrs) {
            if (localElemAttr != null) {
              localElemAttr.serialize(new javax.xml.namespace.QName("", "elemAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("elemAttrs cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "hexFile"));


      if (this.localHexFile == null) {
        throw new org.apache.axis2.databinding.ADBException("hexFile cannot be null!!");
      }
      elementList.add(this.localHexFile);

      elementList.add(new javax.xml.namespace.QName("", "a2LFile"));


      if (this.localA2LFile == null) {
        throw new org.apache.axis2.databinding.ADBException("a2LFile cannot be null!!");
      }
      elementList.add(this.localA2LFile);
      if (this.localAdditionalFilesTracker) {
        if (this.localAdditionalFiles != null) {
          for (NFOCreationInfoType localAdditionalFile : this.localAdditionalFiles) {

            if (localAdditionalFile != null) {
              elementList.add(new javax.xml.namespace.QName("", "additionalFiles"));
              elementList.add(localAdditionalFile);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("additionalFiles cannot be null!!");

        }

      }
      if (this.localAdditionalObjectsTracker) {
        if (this.localAdditionalObjects != null) {
          for (NFOReferenceInfoType localAdditionalObject : this.localAdditionalObjects) {

            if (localAdditionalObject != null) {
              elementList.add(new javax.xml.namespace.QName("", "additionalObjects"));
              elementList.add(localAdditionalObject);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("additionalObjects cannot be null!!");

        }

      }
      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objName"));

      if (this.localObjName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");
      }
      if (this.localObjVariantTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objVariant"));

        if (this.localObjVariant != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjVariant));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");
        }
      }
      if (this.localVersionAttrsTracker) {
        if (this.localVersionAttrs != null) {
          for (MapEntryType localVersionAttr : this.localVersionAttrs) {

            if (localVersionAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "versionAttrs"));
              elementList.add(localVersionAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("versionAttrs cannot be null!!");

        }

      }
      if (this.localElemAttrsTracker) {
        if (this.localElemAttrs != null) {
          for (MapEntryType localElemAttr : this.localElemAttrs) {

            if (localElemAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "elemAttrs"));
              elementList.add(localElemAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("elemAttrs cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreatePSTRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreatePSTRequestType object = new CreatePSTRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreatePSTRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreatePSTRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();

          java.util.ArrayList list4 = new java.util.ArrayList();

          java.util.ArrayList list8 = new java.util.ArrayList();

          java.util.ArrayList list9 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "hexFile").equals(reader.getName())) {

            object.setHexFile(NFOCreationInfoType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "a2LFile").equals(reader.getName())) {

            object.setA2LFile(NFOCreationInfoType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "additionalFiles").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(NFOCreationInfoType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "additionalFiles").equals(reader.getName())) {
                  list3.add(NFOCreationInfoType.Factory.parse(reader));

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setAdditionalFiles((NFOCreationInfoType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(NFOCreationInfoType.class, list3));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "additionalObjects").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list4.add(NFOReferenceInfoType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone4 = false;
            while (!loopDone4) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone4 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "additionalObjects").equals(reader.getName())) {
                  list4.add(NFOReferenceInfoType.Factory.parse(reader));

                }
                else {
                  loopDone4 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setAdditionalObjects((NFOReferenceInfoType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(NFOReferenceInfoType.class, list4));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objVariant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objVariant" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list8.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone8 = false;
            while (!loopDone8) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone8 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "versionAttrs").equals(reader.getName())) {
                  list8.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone8 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setVersionAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list8));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "elemAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list9.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone9 = false;
            while (!loopDone9) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone9 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "elemAttrs").equals(reader.getName())) {
                  list9.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone9 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setElemAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list9));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ValidationMessage implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = ValidationMessage Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for MessageType
     */


    protected MessageType localMessageType;


    /**
     * Auto generated getter method
     * 
     * @return MessageType
     */
    public MessageType getMessageType() {
      return this.localMessageType;
    }


    /**
     * Auto generated setter method
     * 
     * @param param MessageType
     */
    public void setMessageType(final MessageType param) {

      this.localMessageType = param;


    }


    /**
     * field for Message
     */


    protected java.lang.String localMessage;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getMessage() {
      return this.localMessage;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Message
     */
    public void setMessage(final java.lang.String param) {

      this.localMessage = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ValidationMessage", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ValidationMessage", xmlWriter);
        }


      }

      if (this.localMessageType == null) {
        throw new org.apache.axis2.databinding.ADBException("MessageType cannot be null!!");
      }
      this.localMessageType.serialize(new javax.xml.namespace.QName("", "MessageType"), xmlWriter);

      namespace = "";
      writeStartElement(null, namespace, "message", xmlWriter);


      if (this.localMessage == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("message cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localMessage);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "MessageType"));


      if (this.localMessageType == null) {
        throw new org.apache.axis2.databinding.ADBException("MessageType cannot be null!!");
      }
      elementList.add(this.localMessageType);

      elementList.add(new javax.xml.namespace.QName("", "message"));

      if (this.localMessage != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localMessage));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("message cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ValidationMessage parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ValidationMessage object = new ValidationMessage();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ValidationMessage".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ValidationMessage) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "MessageType").equals(reader.getName())) {

            object.setMessageType(MessageType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "message").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "message" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckInPureHexDST_fault implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CheckInPureHexDST_fault", "ns1");


    /**
     * field for CheckInPureHexDST_fault
     */


    protected java.lang.String localCheckInPureHexDST_fault;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getCheckInPureHexDST_fault() {
      return this.localCheckInPureHexDST_fault;
    }


    /**
     * Auto generated setter method
     * 
     * @param param CheckInPureHexDST_fault
     */
    public void setCheckInPureHexDST_fault(final java.lang.String param) {

      this.localCheckInPureHexDST_fault = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckInPureHexDST_fault", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckInPureHexDST_fault",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "CheckInPureHexDST_fault", xmlWriter);


      if (this.localCheckInPureHexDST_fault == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("CheckInPureHexDST_fault cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localCheckInPureHexDST_fault);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "CheckInPureHexDST_fault"));

      if (this.localCheckInPureHexDST_fault != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localCheckInPureHexDST_fault));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("CheckInPureHexDST_fault cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckInPureHexDST_fault parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CheckInPureHexDST_fault object = new CheckInPureHexDST_fault();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckInPureHexDST_fault".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckInPureHexDST_fault) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "CheckInPureHexDST_fault").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "CheckInPureHexDST_fault"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object
                .setCheckInPureHexDST_fault(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetSessionStateResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetSessionStateResponseType", "ns1");


    /**
     * field for SessionState
     */


    protected SessionStateType localSessionState;


    /**
     * Auto generated getter method
     * 
     * @return SessionStateType
     */
    public SessionStateType getSessionState() {
      return this.localSessionState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SessionState
     */
    public void setSessionState(final SessionStateType param) {

      this.localSessionState = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetSessionStateResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetSessionStateResponseType",
              xmlWriter);
        }


      }

      if (this.localSessionState == null) {
        throw new org.apache.axis2.databinding.ADBException("sessionState cannot be null!!");
      }
      this.localSessionState.serialize(new javax.xml.namespace.QName("", "sessionState"), xmlWriter);

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sessionState"));


      if (this.localSessionState == null) {
        throw new org.apache.axis2.databinding.ADBException("sessionState cannot be null!!");
      }
      elementList.add(this.localSessionState);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetSessionStateResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetSessionStateResponseType object = new GetSessionStateResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetSessionStateResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetSessionStateResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sessionState").equals(reader.getName())) {

            object.setSessionState(SessionStateType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DoDocuDeliveryResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DoDocuDeliveryResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected ObjInfoEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ObjInfoEntryType[]
     */
    public ObjInfoEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final ObjInfoEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final ObjInfoEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ObjInfoEntryType
     */
    public void addReturnValue(final ObjInfoEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new ObjInfoEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (ObjInfoEntryType[]) list.toArray(new ObjInfoEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DoDocuDeliveryResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DoDocuDeliveryResponseType",
              xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ObjInfoEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ObjInfoEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DoDocuDeliveryResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DoDocuDeliveryResponseType object = new DoDocuDeliveryResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DoDocuDeliveryResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DoDocuDeliveryResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(ObjInfoEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(ObjInfoEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((ObjInfoEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                ObjInfoEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class UpdateProductKeyRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "UpdateProductKeyRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * field for AttrAndValuesArr This was an Array!
     */


    protected ProductAttributeValueDataType[] localAttrAndValuesArr;


    /**
     * Auto generated getter method
     * 
     * @return ProductAttributeValueDataType[]
     */
    public ProductAttributeValueDataType[] getAttrAndValuesArr() {
      return this.localAttrAndValuesArr;
    }


    /**
     * validate the array for AttrAndValuesArr
     */
    protected void validateAttrAndValuesArr(final ProductAttributeValueDataType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param AttrAndValuesArr
     */
    public void setAttrAndValuesArr(final ProductAttributeValueDataType[] param) {

      validateAttrAndValuesArr(param);


      this.localAttrAndValuesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ProductAttributeValueDataType
     */
    public void addAttrAndValuesArr(final ProductAttributeValueDataType param) {
      if (this.localAttrAndValuesArr == null) {
        this.localAttrAndValuesArr = new ProductAttributeValueDataType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAttrAndValuesArr);
      list.add(param);
      this.localAttrAndValuesArr =
          (ProductAttributeValueDataType[]) list.toArray(new ProductAttributeValueDataType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":UpdateProductKeyRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "UpdateProductKeyRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();

      if (this.localAttrAndValuesArr != null) {
        for (ProductAttributeValueDataType element : this.localAttrAndValuesArr) {
          if (element != null) {
            element.serialize(new javax.xml.namespace.QName("", "attrAndValuesArr"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }

      if (this.localAttrAndValuesArr != null) {
        for (ProductAttributeValueDataType element : this.localAttrAndValuesArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "attrAndValuesArr"));
            elementList.add(element);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static UpdateProductKeyRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        UpdateProductKeyRequestType object = new UpdateProductKeyRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"UpdateProductKeyRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (UpdateProductKeyRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list4 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "attrAndValuesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list4.add(ProductAttributeValueDataType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone4 = false;
            while (!loopDone4) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone4 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "attrAndValuesArr").equals(reader.getName())) {
                  list4.add(ProductAttributeValueDataType.Factory.parse(reader));

                }
                else {
                  loopDone4 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object
                .setAttrAndValuesArr((ProductAttributeValueDataType[]) org.apache.axis2.databinding.utils.ConverterUtil
                    .convertToArray(ProductAttributeValueDataType.class, list4));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreatePSTResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreatePSTResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected ObjInfoEntryType[] localReturnValue;


    /**
     * Auto generated getter method
     * 
     * @return ObjInfoEntryType[]
     */
    public ObjInfoEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final ObjInfoEntryType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final ObjInfoEntryType[] param) {

      validateReturnValue(param);


      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ObjInfoEntryType
     */
    public void addReturnValue(final ObjInfoEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new ObjInfoEntryType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (ObjInfoEntryType[]) list.toArray(new ObjInfoEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreatePSTResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreatePSTResponseType", xmlWriter);
        }


      }

      if (this.localReturnValue != null) {
        for (ObjInfoEntryType element : this.localReturnValue) {
          if (element != null) {
            element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      if (this.localReturnValue != null) {
        for (ObjInfoEntryType element : this.localReturnValue) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "returnValue"));
            elementList.add(element);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreatePSTResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreatePSTResponseType object = new CreatePSTResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreatePSTResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreatePSTResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(ObjInfoEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(ObjInfoEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((ObjInfoEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                ObjInfoEntryType.class, list1));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ConfigStateType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ConfigStateType", "ns1");


    /**
     * field for ConfigStateType
     */


    protected java.lang.String localConfigStateType;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected ConfigStateType(final java.lang.String value, final boolean isRegisterValue) {
      this.localConfigStateType = value;
      if (isRegisterValue) {

        _table_.put(this.localConfigStateType, this);

      }

    }

    public static final java.lang.String _ENABLED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("ENABLED");

    public static final java.lang.String _DISABLED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("DISABLED");

    public static final java.lang.String _OBSOLETE = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("OBSOLETE");

    public static final java.lang.String _NODEFINE = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("NODEFINE");

    public static final java.lang.String _HIDDEN = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("HIDDEN");

    public static final java.lang.String _NOTAVAILABLE = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("NOTAVAILABLE");

    public static final ConfigStateType ENABLED = new ConfigStateType(_ENABLED, true);

    public static final ConfigStateType DISABLED = new ConfigStateType(_DISABLED, true);

    public static final ConfigStateType OBSOLETE = new ConfigStateType(_OBSOLETE, true);

    public static final ConfigStateType NODEFINE = new ConfigStateType(_NODEFINE, true);

    public static final ConfigStateType HIDDEN = new ConfigStateType(_HIDDEN, true);

    public static final ConfigStateType NOTAVAILABLE = new ConfigStateType(_NOTAVAILABLE, true);


    public java.lang.String getValue() {
      return this.localConfigStateType;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localConfigStateType.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ConfigStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ConfigStateType", xmlWriter);
        }
      }

      if (this.localConfigStateType == null) {

        throw new org.apache.axis2.databinding.ADBException("ConfigStateType cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localConfigStateType);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localConfigStateType) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static ConfigStateType fromValue(final java.lang.String value) throws java.lang.IllegalArgumentException {
        ConfigStateType enumeration = (ConfigStateType)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static ConfigStateType fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static ConfigStateType fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return ConfigStateType.Factory.fromString(content, namespaceUri);
        }
        else {
          return ConfigStateType.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ConfigStateType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ConfigStateType object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "ConfigStateType"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = ConfigStateType.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = ConfigStateType.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetProductKeyStateResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetProductKeyStateResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetProductKeyStateResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetProductKeyStateResponseType",
              xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetProductKeyStateResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetProductKeyStateResponseType object = new SetProductKeyStateResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetProductKeyStateResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetProductKeyStateResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class InsertedObject implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = InsertedObject Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for ConfigState
     */


    protected ConfigStateType localConfigState;


    /**
     * Auto generated getter method
     * 
     * @return ConfigStateType
     */
    public ConfigStateType getConfigState() {
      return this.localConfigState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ConfigState
     */
    public void setConfigState(final ConfigStateType param) {

      this.localConfigState = param;


    }


    /**
     * field for ContentAttrs This was an Array!
     */


    protected MapEntryType[] localContentAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localContentAttrsTracker = false;

    public boolean isContentAttrsSpecified() {
      return this.localContentAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getContentAttrs() {
      return this.localContentAttrs;
    }


    /**
     * validate the array for ContentAttrs
     */
    protected void validateContentAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ContentAttrs
     */
    public void setContentAttrs(final MapEntryType[] param) {

      validateContentAttrs(param);

      this.localContentAttrsTracker = param != null;

      this.localContentAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addContentAttrs(final MapEntryType param) {
      if (this.localContentAttrs == null) {
        this.localContentAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localContentAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localContentAttrs);
      list.add(param);
      this.localContentAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":InsertedObject", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "InsertedObject", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localConfigState == null) {
        throw new org.apache.axis2.databinding.ADBException("configState cannot be null!!");
      }
      this.localConfigState.serialize(new javax.xml.namespace.QName("", "configState"), xmlWriter);
      if (this.localContentAttrsTracker) {
        if (this.localContentAttrs != null) {
          for (MapEntryType localContentAttr : this.localContentAttrs) {
            if (localContentAttr != null) {
              localContentAttr.serialize(new javax.xml.namespace.QName("", "contentAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("contentAttrs cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "configState"));


      if (this.localConfigState == null) {
        throw new org.apache.axis2.databinding.ADBException("configState cannot be null!!");
      }
      elementList.add(this.localConfigState);
      if (this.localContentAttrsTracker) {
        if (this.localContentAttrs != null) {
          for (MapEntryType localContentAttr : this.localContentAttrs) {

            if (localContentAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "contentAttrs"));
              elementList.add(localContentAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("contentAttrs cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static InsertedObject parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        InsertedObject object = new InsertedObject();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"InsertedObject".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (InsertedObject) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "configState").equals(reader.getName())) {

            object.setConfigState(ConfigStateType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "contentAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "contentAttrs").equals(reader.getName())) {
                  list3.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setContentAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list3));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class MapEntryType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = MapEntryType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for Key
     */


    protected java.lang.String localKey;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getKey() {
      return this.localKey;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Key
     */
    public void setKey(final java.lang.String param) {

      this.localKey = param;


    }


    /**
     * field for Value
     */


    protected java.lang.String localValue;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getValue() {
      return this.localValue;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Value
     */
    public void setValue(final java.lang.String param) {

      this.localValue = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix + ":MapEntryType",
              xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "MapEntryType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "key", xmlWriter);


      if (this.localKey == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("key cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localKey);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "value", xmlWriter);


      if (this.localValue == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("value cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localValue);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "key"));

      if (this.localKey != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localKey));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("key cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "value"));

      if (this.localValue != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localValue));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("value cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static MapEntryType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        MapEntryType object = new MapEntryType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"MapEntryType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (MapEntryType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "key").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "key" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "value").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "value" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProductKeyAttributeValuesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProductKeyAttributeValuesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProductKeyAttributeValuesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetProductKeyAttributeValuesRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProductKeyAttributeValuesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProductKeyAttributeValuesRequestType object = new GetProductKeyAttributeValuesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProductKeyAttributeValuesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProductKeyAttributeValuesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameProductAttributeResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameProductAttributeResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameProductAttributeResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameProductAttributeResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameProductAttributeResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameProductAttributeResponseType object = new RenameProductAttributeResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameProductAttributeResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameProductAttributeResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateProductKeyResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateProductKeyResponseType", "ns1");


    /**
     * field for ReturnValue
     */


    protected VariantKeyDataType localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return VariantKeyDataType
     */
    public VariantKeyDataType getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final VariantKeyDataType param) {
      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateProductKeyResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreateProductKeyResponseType",
              xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue == null) {
          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");
        }
        this.localReturnValue.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        elementList.add(new javax.xml.namespace.QName("", "returnValue"));


        if (this.localReturnValue == null) {
          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");
        }
        elementList.add(this.localReturnValue);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateProductKeyResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateProductKeyResponseType object = new CreateProductKeyResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateProductKeyResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateProductKeyResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {

            object.setReturnValue(VariantKeyDataType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class UpdateProductKeyResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "UpdateProductKeyResponseType", "ns1");


    /**
     * field for ReturnValue
     */


    protected VariantKeyDataType localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return VariantKeyDataType
     */
    public VariantKeyDataType getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final VariantKeyDataType param) {
      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":UpdateProductKeyResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "UpdateProductKeyResponseType",
              xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue == null) {
          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");
        }
        this.localReturnValue.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        elementList.add(new javax.xml.namespace.QName("", "returnValue"));


        if (this.localReturnValue == null) {
          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");
        }
        elementList.add(this.localReturnValue);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static UpdateProductKeyResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        UpdateProductKeyResponseType object = new UpdateProductKeyResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"UpdateProductKeyResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (UpdateProductKeyResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {

            object.setReturnValue(VariantKeyDataType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetElementAttributesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetElementAttributesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetElementAttributesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetElementAttributesRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetElementAttributesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetElementAttributesRequestType object = new GetElementAttributesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetElementAttributesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetElementAttributesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteProductKeysRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DeleteProductKeysRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for NamesArr This was an Array!
     */


    protected java.lang.String[] localNamesArr;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getNamesArr() {
      return this.localNamesArr;
    }


    /**
     * validate the array for NamesArr
     */
    protected void validateNamesArr(final java.lang.String[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param NamesArr
     */
    public void setNamesArr(final java.lang.String[] param) {

      validateNamesArr(param);


      this.localNamesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addNamesArr(final java.lang.String param) {
      if (this.localNamesArr == null) {
        this.localNamesArr = new java.lang.String[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localNamesArr);
      list.add(param);
      this.localNamesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteProductKeysRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DeleteProductKeysRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localNamesArr != null) {
        namespace = "";
        for (String element : this.localNamesArr) {

          if (element != null) {

            writeStartElement(null, namespace, "namesArr", xmlWriter);


            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

            xmlWriter.writeEndElement();

          }
          else {

            throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

      }


      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      if (this.localNamesArr != null) {
        for (String element : this.localNamesArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "namesArr"));
            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

          }


        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteProductKeysRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteProductKeysRequestType object = new DeleteProductKeysRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteProductKeysRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteProductKeysRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {
                  list3.add(reader.getElementText());

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setNamesArr((java.lang.String[]) list3.toArray(new java.lang.String[list3.size()]));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class AddressRange implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = AddressRange Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for StartAddress
     */


    protected long localStartAddress;


    /**
     * Auto generated getter method
     * 
     * @return long
     */
    public long getStartAddress() {
      return this.localStartAddress;
    }


    /**
     * Auto generated setter method
     * 
     * @param param StartAddress
     */
    public void setStartAddress(final long param) {

      this.localStartAddress = param;


    }


    /**
     * field for EndAddress
     */


    protected long localEndAddress;


    /**
     * Auto generated getter method
     * 
     * @return long
     */
    public long getEndAddress() {
      return this.localEndAddress;
    }


    /**
     * Auto generated setter method
     * 
     * @param param EndAddress
     */
    public void setEndAddress(final long param) {

      this.localEndAddress = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix + ":AddressRange",
              xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "AddressRange", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "StartAddress", xmlWriter);

      if (this.localStartAddress == java.lang.Long.MIN_VALUE) {

        throw new org.apache.axis2.databinding.ADBException("StartAddress cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localStartAddress));
      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "EndAddress", xmlWriter);

      if (this.localEndAddress == java.lang.Long.MIN_VALUE) {

        throw new org.apache.axis2.databinding.ADBException("EndAddress cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localEndAddress));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "StartAddress"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStartAddress));

      elementList.add(new javax.xml.namespace.QName("", "EndAddress"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localEndAddress));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static AddressRange parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        AddressRange object = new AddressRange();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"AddressRange".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (AddressRange) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "StartAddress").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "StartAddress" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setStartAddress(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "EndAddress").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "EndAddress" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setEndAddress(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateProductAttributesAndValuesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateProductAttributesAndValuesResponseType", "ns1");


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * field for ValuesArr This was an Array!
     */


    protected java.lang.String[] localValuesArr;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localValuesArrTracker = false;

    public boolean isValuesArrSpecified() {
      return this.localValuesArrTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getValuesArr() {
      return this.localValuesArr;
    }


    /**
     * validate the array for ValuesArr
     */
    protected void validateValuesArr(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ValuesArr
     */
    public void setValuesArr(final java.lang.String[] param) {

      validateValuesArr(param);

      this.localValuesArrTracker = param != null;

      this.localValuesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addValuesArr(final java.lang.String param) {
      if (this.localValuesArr == null) {
        this.localValuesArr = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localValuesArrTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localValuesArr);
      list.add(param);
      this.localValuesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateProductAttributesAndValuesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "CreateProductAttributesAndValuesResponseType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          namespace = "";
          for (String element : this.localValuesArr) {

            if (element != null) {

              writeStartElement(null, namespace, "valuesArr", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          for (String element : this.localValuesArr) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "valuesArr"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateProductAttributesAndValuesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateProductAttributesAndValuesResponseType object = new CreateProductAttributesAndValuesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateProductAttributesAndValuesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateProductAttributesAndValuesResponseType) ExtensionMapper
                    .getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {
                  list2.add(reader.getElementText());

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setValuesArr((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetExtendedLoggingType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetExtendedLoggingType", "ns1");


    /**
     * field for ExtendedLogging
     */


    protected java.math.BigInteger localExtendedLogging;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localExtendedLoggingTracker = false;

    public boolean isExtendedLoggingSpecified() {
      return this.localExtendedLoggingTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.math.BigInteger
     */
    public java.math.BigInteger getExtendedLogging() {
      return this.localExtendedLogging;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ExtendedLogging
     */
    public void setExtendedLogging(final java.math.BigInteger param) {
      this.localExtendedLoggingTracker = param != null;

      this.localExtendedLogging = param;


    }


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetExtendedLoggingType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetExtendedLoggingType",
              xmlWriter);
        }


      }
      if (this.localExtendedLoggingTracker) {
        namespace = "";
        writeStartElement(null, namespace, "extendedLogging", xmlWriter);


        if (this.localExtendedLogging == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("extendedLogging cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(this.localExtendedLogging));

        }

        xmlWriter.writeEndElement();
      }
      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localExtendedLoggingTracker) {
        elementList.add(new javax.xml.namespace.QName("", "extendedLogging"));

        if (this.localExtendedLogging != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localExtendedLogging));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("extendedLogging cannot be null!!");
        }
      }
      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetExtendedLoggingType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetExtendedLoggingType object = new SetExtendedLoggingType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetExtendedLoggingType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetExtendedLoggingType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "extendedLogging").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "extendedLogging"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setExtendedLogging(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SessionStateType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SessionStateType", "ns1");


    /**
     * field for SessionStateType
     */


    protected java.lang.String localSessionStateType;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected SessionStateType(final java.lang.String value, final boolean isRegisterValue) {
      this.localSessionStateType = value;
      if (isRegisterValue) {

        _table_.put(this.localSessionStateType, this);

      }

    }

    public static final java.lang.String _Valid = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("Valid");

    public static final java.lang.String _Invalid = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("Invalid");

    public static final SessionStateType Valid = new SessionStateType(_Valid, true);

    public static final SessionStateType Invalid = new SessionStateType(_Invalid, true);


    public java.lang.String getValue() {
      return this.localSessionStateType;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localSessionStateType.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SessionStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SessionStateType", xmlWriter);
        }
      }

      if (this.localSessionStateType == null) {

        throw new org.apache.axis2.databinding.ADBException("SessionStateType cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localSessionStateType);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSessionStateType) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static SessionStateType fromValue(final java.lang.String value) throws java.lang.IllegalArgumentException {
        SessionStateType enumeration = (SessionStateType)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static SessionStateType fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static SessionStateType fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return SessionStateType.Factory.fromString(content, namespaceUri);
        }
        else {
          return SessionStateType.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SessionStateType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        SessionStateType object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "SessionStateType"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = SessionStateType.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = SessionStateType.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class InsertIntoContainerResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "InsertIntoContainerResponseType", "ns1");


    /**
     * field for InsertIntoContainerItemStates This was an Array!
     */


    protected InsertIntoContainerItemStateType[] localInsertIntoContainerItemStates;


    /**
     * Auto generated getter method
     * 
     * @return InsertIntoContainerItemStateType[]
     */
    public InsertIntoContainerItemStateType[] getInsertIntoContainerItemStates() {
      return this.localInsertIntoContainerItemStates;
    }


    /**
     * validate the array for InsertIntoContainerItemStates
     */
    protected void validateInsertIntoContainerItemStates(final InsertIntoContainerItemStateType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param InsertIntoContainerItemStates
     */
    public void setInsertIntoContainerItemStates(final InsertIntoContainerItemStateType[] param) {

      validateInsertIntoContainerItemStates(param);


      this.localInsertIntoContainerItemStates = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param InsertIntoContainerItemStateType
     */
    public void addInsertIntoContainerItemStates(final InsertIntoContainerItemStateType param) {
      if (this.localInsertIntoContainerItemStates == null) {
        this.localInsertIntoContainerItemStates = new InsertIntoContainerItemStateType[] {};
      }


      java.util.List list =
          org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localInsertIntoContainerItemStates);
      list.add(param);
      this.localInsertIntoContainerItemStates =
          (InsertIntoContainerItemStateType[]) list.toArray(new InsertIntoContainerItemStateType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":InsertIntoContainerResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "InsertIntoContainerResponseType",
              xmlWriter);
        }


      }

      if (this.localInsertIntoContainerItemStates != null) {
        for (InsertIntoContainerItemStateType localInsertIntoContainerItemState : this.localInsertIntoContainerItemStates) {
          if (localInsertIntoContainerItemState != null) {
            localInsertIntoContainerItemState.serialize(new javax.xml.namespace.QName("",
                "insertIntoContainerItemStates"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("insertIntoContainerItemStates cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("insertIntoContainerItemStates cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      if (this.localInsertIntoContainerItemStates != null) {
        for (InsertIntoContainerItemStateType localInsertIntoContainerItemState : this.localInsertIntoContainerItemStates) {

          if (localInsertIntoContainerItemState != null) {
            elementList.add(new javax.xml.namespace.QName("", "insertIntoContainerItemStates"));
            elementList.add(localInsertIntoContainerItemState);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("insertIntoContainerItemStates cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("insertIntoContainerItemStates cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static InsertIntoContainerResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        InsertIntoContainerResponseType object = new InsertIntoContainerResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"InsertIntoContainerResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (InsertIntoContainerResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "insertIntoContainerItemStates").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(InsertIntoContainerItemStateType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "insertIntoContainerItemStates").equals(reader.getName())) {
                  list1.add(InsertIntoContainerItemStateType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object
                .setInsertIntoContainerItemStates((InsertIntoContainerItemStateType[]) org.apache.axis2.databinding.utils.ConverterUtil
                    .convertToArray(InsertIntoContainerItemStateType.class, list1));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetVersionAttributesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetVersionAttributesResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetVersionAttributesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "SetVersionAttributesResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetVersionAttributesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetVersionAttributesResponseType object = new SetVersionAttributesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetVersionAttributesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetVersionAttributesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetContentAttributesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetContentAttributesResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected AttrMapEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final AttrMapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final AttrMapEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addReturnValue(final AttrMapEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new AttrMapEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetContentAttributesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetContentAttributesResponseType", xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetContentAttributesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetContentAttributesResponseType object = new GetContentAttributesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetContentAttributesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetContentAttributesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetProgramKeyStateRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetProgramKeyStateRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for NamesArr This was an Array!
     */


    protected java.lang.String[] localNamesArr;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNamesArrTracker = false;

    public boolean isNamesArrSpecified() {
      return this.localNamesArrTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getNamesArr() {
      return this.localNamesArr;
    }


    /**
     * validate the array for NamesArr
     */
    protected void validateNamesArr(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param NamesArr
     */
    public void setNamesArr(final java.lang.String[] param) {

      validateNamesArr(param);

      this.localNamesArrTracker = param != null;

      this.localNamesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addNamesArr(final java.lang.String param) {
      if (this.localNamesArr == null) {
        this.localNamesArr = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localNamesArrTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localNamesArr);
      list.add(param);
      this.localNamesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * field for StateFlag
     */


    protected boolean localStateFlag;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getStateFlag() {
      return this.localStateFlag;
    }


    /**
     * Auto generated setter method
     * 
     * @param param StateFlag
     */
    public void setStateFlag(final boolean param) {

      this.localStateFlag = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetProgramKeyStateRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetProgramKeyStateRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();
      if (this.localNamesArrTracker) {
        if (this.localNamesArr != null) {
          namespace = "";
          for (String element : this.localNamesArr) {

            if (element != null) {

              writeStartElement(null, namespace, "namesArr", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

        }

      }
      namespace = "";
      writeStartElement(null, namespace, "stateFlag", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("stateFlag cannot be null!!");

      }
      else {
        xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }
      if (this.localNamesArrTracker) {
        if (this.localNamesArr != null) {
          for (String element : this.localNamesArr) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "namesArr"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

        }

      }
      elementList.add(new javax.xml.namespace.QName("", "stateFlag"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetProgramKeyStateRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetProgramKeyStateRequestType object = new SetProgramKeyStateRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetProgramKeyStateRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetProgramKeyStateRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {
                  list3.add(reader.getElementText());

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setNamesArr((java.lang.String[]) list3.toArray(new java.lang.String[list3.size()]));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "stateFlag").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "stateFlag" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setStateFlag(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetElementAttributesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetElementAttributesResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetElementAttributesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "SetElementAttributesResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetElementAttributesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetElementAttributesResponseType object = new SetElementAttributesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetElementAttributesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetElementAttributesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateObjectItemStateType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = CreateObjectItemStateType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for CreateObjectItem
     */


    protected CreateObjectItemType localCreateObjectItem;


    /**
     * Auto generated getter method
     * 
     * @return CreateObjectItemType
     */
    public CreateObjectItemType getCreateObjectItem() {
      return this.localCreateObjectItem;
    }


    /**
     * Auto generated setter method
     * 
     * @param param CreateObjectItem
     */
    public void setCreateObjectItem(final CreateObjectItemType param) {

      this.localCreateObjectItem = param;


    }


    /**
     * field for State
     */


    protected ItemState localState;


    /**
     * Auto generated getter method
     * 
     * @return ItemState
     */
    public ItemState getState() {
      return this.localState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param State
     */
    public void setState(final ItemState param) {

      this.localState = param;


    }


    /**
     * field for NewVersionNo
     */


    protected java.lang.String localNewVersionNo;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNewVersionNoTracker = false;

    public boolean isNewVersionNoSpecified() {
      return this.localNewVersionNoTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewVersionNo() {
      return this.localNewVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewVersionNo
     */
    public void setNewVersionNo(final java.lang.String param) {
      this.localNewVersionNoTracker = param != null;

      this.localNewVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateObjectItemStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreateObjectItemStateType",
              xmlWriter);
        }


      }

      if (this.localCreateObjectItem == null) {
        throw new org.apache.axis2.databinding.ADBException("createObjectItem cannot be null!!");
      }
      this.localCreateObjectItem.serialize(new javax.xml.namespace.QName("", "createObjectItem"), xmlWriter);

      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      this.localState.serialize(new javax.xml.namespace.QName("", "state"), xmlWriter);
      if (this.localNewVersionNoTracker) {
        namespace = "";
        writeStartElement(null, namespace, "newVersionNo", xmlWriter);


        if (this.localNewVersionNo == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("newVersionNo cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localNewVersionNo);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "createObjectItem"));


      if (this.localCreateObjectItem == null) {
        throw new org.apache.axis2.databinding.ADBException("createObjectItem cannot be null!!");
      }
      elementList.add(this.localCreateObjectItem);

      elementList.add(new javax.xml.namespace.QName("", "state"));


      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      elementList.add(this.localState);
      if (this.localNewVersionNoTracker) {
        elementList.add(new javax.xml.namespace.QName("", "newVersionNo"));

        if (this.localNewVersionNo != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewVersionNo));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("newVersionNo cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateObjectItemStateType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateObjectItemStateType object = new CreateObjectItemStateType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateObjectItemStateType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateObjectItemStateType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "createObjectItem").equals(reader.getName())) {

            object.setCreateObjectItem(CreateObjectItemType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "state").equals(reader.getName())) {

            object.setState(ItemState.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newVersionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class LoginResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "LoginResponseType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":LoginResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "LoginResponseType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static LoginResponseType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        LoginResponseType object = new LoginResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"LoginResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (LoginResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class MapContainsInfoType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = MapContainsInfoType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for Container
     */


    protected java.lang.String localContainer;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContainer() {
      return this.localContainer;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Container
     */
    public void setContainer(final java.lang.String param) {

      this.localContainer = param;


    }


    /**
     * field for Content
     */


    protected java.lang.String localContent;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContent() {
      return this.localContent;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Content
     */
    public void setContent(final java.lang.String param) {

      this.localContent = param;


    }


    /**
     * field for ConfigState
     */


    protected ConfigStateType localConfigState;


    /**
     * Auto generated getter method
     * 
     * @return ConfigStateType
     */
    public ConfigStateType getConfigState() {
      return this.localConfigState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ConfigState
     */
    public void setConfigState(final ConfigStateType param) {

      this.localConfigState = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":MapContainsInfoType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "MapContainsInfoType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "container", xmlWriter);


      if (this.localContainer == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("container cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContainer);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "content", xmlWriter);


      if (this.localContent == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("content cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContent);

      }

      xmlWriter.writeEndElement();

      if (this.localConfigState == null) {
        throw new org.apache.axis2.databinding.ADBException("ConfigState cannot be null!!");
      }
      this.localConfigState.serialize(new javax.xml.namespace.QName("", "ConfigState"), xmlWriter);

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "container"));

      if (this.localContainer != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContainer));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("container cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "content"));

      if (this.localContent != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContent));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("content cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "ConfigState"));


      if (this.localConfigState == null) {
        throw new org.apache.axis2.databinding.ADBException("ConfigState cannot be null!!");
      }
      elementList.add(this.localConfigState);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static MapContainsInfoType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        MapContainsInfoType object = new MapContainsInfoType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"MapContainsInfoType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (MapContainsInfoType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "container").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "container" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContainer(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "content").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "content" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContent(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "ConfigState").equals(reader.getName())) {

            object.setConfigState(ConfigStateType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckOutItemStateType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = CheckOutItemStateType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for State
     */


    protected ItemState localState;


    /**
     * Auto generated getter method
     * 
     * @return ItemState
     */
    public ItemState getState() {
      return this.localState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param State
     */
    public void setState(final ItemState param) {

      this.localState = param;


    }


    /**
     * field for NewVersionNo
     */


    protected java.lang.String localNewVersionNo;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNewVersionNoTracker = false;

    public boolean isNewVersionNoSpecified() {
      return this.localNewVersionNoTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewVersionNo() {
      return this.localNewVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewVersionNo
     */
    public void setNewVersionNo(final java.lang.String param) {
      this.localNewVersionNoTracker = param != null;

      this.localNewVersionNo = param;


    }


    /**
     * field for CheckedOutFile
     */


    protected AttachmentType localCheckedOutFile;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localCheckedOutFileTracker = false;

    public boolean isCheckedOutFileSpecified() {
      return this.localCheckedOutFileTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttachmentType
     */
    public AttachmentType getCheckedOutFile() {
      return this.localCheckedOutFile;
    }


    /**
     * Auto generated setter method
     * 
     * @param param CheckedOutFile
     */
    public void setCheckedOutFile(final AttachmentType param) {
      this.localCheckedOutFileTracker = param != null;

      this.localCheckedOutFile = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckOutItemStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckOutItemStateType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      this.localState.serialize(new javax.xml.namespace.QName("", "state"), xmlWriter);
      if (this.localNewVersionNoTracker) {
        namespace = "";
        writeStartElement(null, namespace, "newVersionNo", xmlWriter);


        if (this.localNewVersionNo == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("newVersionNo cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localNewVersionNo);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localCheckedOutFileTracker) {
        if (this.localCheckedOutFile == null) {
          throw new org.apache.axis2.databinding.ADBException("checkedOutFile cannot be null!!");
        }
        this.localCheckedOutFile.serialize(new javax.xml.namespace.QName("", "checkedOutFile"), xmlWriter);
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "state"));


      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      elementList.add(this.localState);
      if (this.localNewVersionNoTracker) {
        elementList.add(new javax.xml.namespace.QName("", "newVersionNo"));

        if (this.localNewVersionNo != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewVersionNo));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("newVersionNo cannot be null!!");
        }
      }
      if (this.localCheckedOutFileTracker) {
        elementList.add(new javax.xml.namespace.QName("", "checkedOutFile"));


        if (this.localCheckedOutFile == null) {
          throw new org.apache.axis2.databinding.ADBException("checkedOutFile cannot be null!!");
        }
        elementList.add(this.localCheckedOutFile);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckOutItemStateType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CheckOutItemStateType object = new CheckOutItemStateType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckOutItemStateType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckOutItemStateType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "state").equals(reader.getName())) {

            object.setState(ItemState.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newVersionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "checkedOutFile").equals(reader.getName())) {

            object.setCheckedOutFile(AttachmentType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetElementAttributesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetElementAttributesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for AttrArr This was an Array!
     */


    protected AttrMapEntryType[] localAttrArr;


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getAttrArr() {
      return this.localAttrArr;
    }


    /**
     * validate the array for AttrArr
     */
    protected void validateAttrArr(final AttrMapEntryType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param AttrArr
     */
    public void setAttrArr(final AttrMapEntryType[] param) {

      validateAttrArr(param);


      this.localAttrArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addAttrArr(final AttrMapEntryType param) {
      if (this.localAttrArr == null) {
        this.localAttrArr = new AttrMapEntryType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAttrArr);
      list.add(param);
      this.localAttrArr = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetElementAttributesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetElementAttributesRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localAttrArr != null) {
        for (AttrMapEntryType element : this.localAttrArr) {
          if (element != null) {
            element.serialize(new javax.xml.namespace.QName("", "attrArr"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      if (this.localAttrArr != null) {
        for (AttrMapEntryType element : this.localAttrArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "attrArr"));
            elementList.add(element);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetElementAttributesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetElementAttributesRequestType object = new SetElementAttributesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetElementAttributesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetElementAttributesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "attrArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "attrArr").equals(reader.getName())) {
                  list3.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setAttrArr((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list3));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetDataSetValuesType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetDataSetValuesType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for ParameterNames This was an Array!
     */


    protected java.lang.String[] localParameterNames;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localParameterNamesTracker = false;

    public boolean isParameterNamesSpecified() {
      return this.localParameterNamesTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getParameterNames() {
      return this.localParameterNames;
    }


    /**
     * validate the array for ParameterNames
     */
    protected void validateParameterNames(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ParameterNames
     */
    public void setParameterNames(final java.lang.String[] param) {

      validateParameterNames(param);

      this.localParameterNamesTracker = param != null;

      this.localParameterNames = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addParameterNames(final java.lang.String param) {
      if (this.localParameterNames == null) {
        this.localParameterNames = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localParameterNamesTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localParameterNames);
      list.add(param);
      this.localParameterNames = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * field for IncludeBaseDataSets
     */


    protected boolean localIncludeBaseDataSets;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIncludeBaseDataSets() {
      return this.localIncludeBaseDataSets;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IncludeBaseDataSets
     */
    public void setIncludeBaseDataSets(final boolean param) {

      this.localIncludeBaseDataSets = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetDataSetValuesType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetDataSetValuesType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();
      if (this.localParameterNamesTracker) {
        if (this.localParameterNames != null) {
          namespace = "";
          for (String localParameterName : this.localParameterNames) {

            if (localParameterName != null) {

              writeStartElement(null, namespace, "parameterNames", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localParameterName));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("parameterNames cannot be null!!");

        }

      }
      namespace = "";
      writeStartElement(null, namespace, "includeBaseDataSets", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("includeBaseDataSets cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localIncludeBaseDataSets));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }
      if (this.localParameterNamesTracker) {
        if (this.localParameterNames != null) {
          for (String localParameterName : this.localParameterNames) {

            if (localParameterName != null) {
              elementList.add(new javax.xml.namespace.QName("", "parameterNames"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localParameterName));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("parameterNames cannot be null!!");

        }

      }
      elementList.add(new javax.xml.namespace.QName("", "includeBaseDataSets"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIncludeBaseDataSets));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetDataSetValuesType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetDataSetValuesType object = new GetDataSetValuesType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetDataSetValuesType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetDataSetValuesType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "parameterNames").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "parameterNames").equals(reader.getName())) {
                  list3.add(reader.getElementText());

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setParameterNames((java.lang.String[]) list3.toArray(new java.lang.String[list3.size()]));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "includeBaseDataSets").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "includeBaseDataSets"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setIncludeBaseDataSets(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckInItemType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = CheckInItemType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for Comment
     */


    protected java.lang.String localComment;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localCommentTracker = false;

    public boolean isCommentSpecified() {
      return this.localCommentTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getComment() {
      return this.localComment;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Comment
     */
    public void setComment(final java.lang.String param) {
      this.localCommentTracker = param != null;

      this.localComment = param;


    }


    /**
     * field for File
     */


    protected AttachmentType localFile;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localFileTracker = false;

    public boolean isFileSpecified() {
      return this.localFileTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttachmentType
     */
    public AttachmentType getFile() {
      return this.localFile;
    }


    /**
     * Auto generated setter method
     * 
     * @param param File
     */
    public void setFile(final AttachmentType param) {
      this.localFileTracker = param != null;

      this.localFile = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckInItemType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckInItemType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();
      if (this.localCommentTracker) {
        namespace = "";
        writeStartElement(null, namespace, "comment", xmlWriter);


        if (this.localComment == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("comment cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localComment);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localFileTracker) {
        if (this.localFile == null) {
          throw new org.apache.axis2.databinding.ADBException("file cannot be null!!");
        }
        this.localFile.serialize(new javax.xml.namespace.QName("", "file"), xmlWriter);
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }
      if (this.localCommentTracker) {
        elementList.add(new javax.xml.namespace.QName("", "comment"));

        if (this.localComment != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localComment));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("comment cannot be null!!");
        }
      }
      if (this.localFileTracker) {
        elementList.add(new javax.xml.namespace.QName("", "file"));


        if (this.localFile == null) {
          throw new org.apache.axis2.databinding.ADBException("file cannot be null!!");
        }
        elementList.add(this.localFile);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckInItemType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        CheckInItemType object = new CheckInItemType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckInItemType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckInItemType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "comment").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "comment" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setComment(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "file").equals(reader.getName())) {

            object.setFile(AttachmentType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class AttrMapEntryType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = AttrMapEntryType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for Key
     */


    protected java.lang.String localKey;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getKey() {
      return this.localKey;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Key
     */
    public void setKey(final java.lang.String param) {

      this.localKey = param;


    }


    /**
     * field for ValuesArr This was an Array!
     */


    protected java.lang.String[] localValuesArr;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localValuesArrTracker = false;

    public boolean isValuesArrSpecified() {
      return this.localValuesArrTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getValuesArr() {
      return this.localValuesArr;
    }


    /**
     * validate the array for ValuesArr
     */
    protected void validateValuesArr(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ValuesArr
     */
    public void setValuesArr(final java.lang.String[] param) {

      validateValuesArr(param);

      this.localValuesArrTracker = param != null;

      this.localValuesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addValuesArr(final java.lang.String param) {
      if (this.localValuesArr == null) {
        this.localValuesArr = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localValuesArrTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localValuesArr);
      list.add(param);
      this.localValuesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":AttrMapEntryType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "AttrMapEntryType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "key", xmlWriter);


      if (this.localKey == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("key cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localKey);

      }

      xmlWriter.writeEndElement();
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          namespace = "";
          for (String element : this.localValuesArr) {

            if (element != null) {

              writeStartElement(null, namespace, "valuesArr", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "key"));

      if (this.localKey != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localKey));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("key cannot be null!!");
      }
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          for (String element : this.localValuesArr) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "valuesArr"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static AttrMapEntryType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        AttrMapEntryType object = new AttrMapEntryType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"AttrMapEntryType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (AttrMapEntryType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "key").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "key" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {
                  list2.add(reader.getElementText());

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setValuesArr((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetConfigStateResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetConfigStateResponseType", "ns1");


    /**
     * field for MapContainsInfo This was an Array!
     */


    protected MapContainsInfoType[] localMapContainsInfo;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localMapContainsInfoTracker = false;

    public boolean isMapContainsInfoSpecified() {
      return this.localMapContainsInfoTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapContainsInfoType[]
     */
    public MapContainsInfoType[] getMapContainsInfo() {
      return this.localMapContainsInfo;
    }


    /**
     * validate the array for MapContainsInfo
     */
    protected void validateMapContainsInfo(final MapContainsInfoType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param MapContainsInfo
     */
    public void setMapContainsInfo(final MapContainsInfoType[] param) {

      validateMapContainsInfo(param);

      this.localMapContainsInfoTracker = param != null;

      this.localMapContainsInfo = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapContainsInfoType
     */
    public void addMapContainsInfo(final MapContainsInfoType param) {
      if (this.localMapContainsInfo == null) {
        this.localMapContainsInfo = new MapContainsInfoType[] {};
      }


      // update the setting tracker
      this.localMapContainsInfoTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localMapContainsInfo);
      list.add(param);
      this.localMapContainsInfo = (MapContainsInfoType[]) list.toArray(new MapContainsInfoType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetConfigStateResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetConfigStateResponseType",
              xmlWriter);
        }


      }
      if (this.localMapContainsInfoTracker) {
        if (this.localMapContainsInfo != null) {
          for (MapContainsInfoType element : this.localMapContainsInfo) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "MapContainsInfo"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("MapContainsInfo cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localMapContainsInfoTracker) {
        if (this.localMapContainsInfo != null) {
          for (MapContainsInfoType element : this.localMapContainsInfo) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "MapContainsInfo"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("MapContainsInfo cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetConfigStateResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetConfigStateResponseType object = new GetConfigStateResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetConfigStateResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetConfigStateResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "MapContainsInfo").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(MapContainsInfoType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "MapContainsInfo").equals(reader.getName())) {
                  list1.add(MapContainsInfoType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setMapContainsInfo((MapContainsInfoType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(MapContainsInfoType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetContentAttributesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetContentAttributesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ContainerVersionNo
     */


    protected java.lang.String localContainerVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContainerVersionNo() {
      return this.localContainerVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ContainerVersionNo
     */
    public void setContainerVersionNo(final java.lang.String param) {

      this.localContainerVersionNo = param;


    }


    /**
     * field for ContentVersionNo
     */


    protected java.lang.String localContentVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContentVersionNo() {
      return this.localContentVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ContentVersionNo
     */
    public void setContentVersionNo(final java.lang.String param) {

      this.localContentVersionNo = param;


    }


    /**
     * field for AttrArr This was an Array!
     */


    protected AttrMapEntryType[] localAttrArr;


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getAttrArr() {
      return this.localAttrArr;
    }


    /**
     * validate the array for AttrArr
     */
    protected void validateAttrArr(final AttrMapEntryType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param AttrArr
     */
    public void setAttrArr(final AttrMapEntryType[] param) {

      validateAttrArr(param);


      this.localAttrArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addAttrArr(final AttrMapEntryType param) {
      if (this.localAttrArr == null) {
        this.localAttrArr = new AttrMapEntryType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAttrArr);
      list.add(param);
      this.localAttrArr = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetContentAttributesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetContentAttributesRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "containerVersionNo", xmlWriter);


      if (this.localContainerVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("containerVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContainerVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "contentVersionNo", xmlWriter);


      if (this.localContentVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("contentVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContentVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localAttrArr != null) {
        for (AttrMapEntryType element : this.localAttrArr) {
          if (element != null) {
            element.serialize(new javax.xml.namespace.QName("", "attrArr"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "containerVersionNo"));

      if (this.localContainerVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContainerVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("containerVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "contentVersionNo"));

      if (this.localContentVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContentVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("contentVersionNo cannot be null!!");
      }

      if (this.localAttrArr != null) {
        for (AttrMapEntryType element : this.localAttrArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "attrArr"));
            elementList.add(element);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetContentAttributesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetContentAttributesRequestType object = new SetContentAttributesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetContentAttributesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetContentAttributesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list4 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "containerVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "containerVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContainerVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "contentVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "contentVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContentVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "attrArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list4.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone4 = false;
            while (!loopDone4) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone4 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "attrArr").equals(reader.getName())) {
                  list4.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone4 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setAttrArr((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list4));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateObjectRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateObjectRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for CreateObjectItems This was an Array!
     */


    protected CreateObjectItemType[] localCreateObjectItems;


    /**
     * Auto generated getter method
     * 
     * @return CreateObjectItemType[]
     */
    public CreateObjectItemType[] getCreateObjectItems() {
      return this.localCreateObjectItems;
    }


    /**
     * validate the array for CreateObjectItems
     */
    protected void validateCreateObjectItems(final CreateObjectItemType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param CreateObjectItems
     */
    public void setCreateObjectItems(final CreateObjectItemType[] param) {

      validateCreateObjectItems(param);


      this.localCreateObjectItems = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param CreateObjectItemType
     */
    public void addCreateObjectItems(final CreateObjectItemType param) {
      if (this.localCreateObjectItems == null) {
        this.localCreateObjectItems = new CreateObjectItemType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localCreateObjectItems);
      list.add(param);
      this.localCreateObjectItems = (CreateObjectItemType[]) list.toArray(new CreateObjectItemType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateObjectRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreateObjectRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localCreateObjectItems != null) {
        for (CreateObjectItemType localCreateObjectItem : this.localCreateObjectItems) {
          if (localCreateObjectItem != null) {
            localCreateObjectItem.serialize(new javax.xml.namespace.QName("", "createObjectItems"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("createObjectItems cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("createObjectItems cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localCreateObjectItems != null) {
        for (CreateObjectItemType localCreateObjectItem : this.localCreateObjectItems) {

          if (localCreateObjectItem != null) {
            elementList.add(new javax.xml.namespace.QName("", "createObjectItems"));
            elementList.add(localCreateObjectItem);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("createObjectItems cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("createObjectItems cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateObjectRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateObjectRequestType object = new CreateObjectRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateObjectRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateObjectRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "createObjectItems").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(CreateObjectItemType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "createObjectItems").equals(reader.getName())) {
                  list2.add(CreateObjectItemType.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setCreateObjectItems((CreateObjectItemType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(CreateObjectItemType.class, list2));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetProgramKeyStateResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetProgramKeyStateResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetProgramKeyStateResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetProgramKeyStateResponseType",
              xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetProgramKeyStateResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetProgramKeyStateResponseType object = new SetProgramKeyStateResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetProgramKeyStateResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetProgramKeyStateResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ContentType_type0 implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.w3.org/2005/05/xmlmime", "contentType_type0", "ns2");


    /**
     * field for ContentType_type0
     */


    protected java.lang.String localContentType_type0;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContentType_type0() {
      return this.localContentType_type0;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ContentType_type0
     */
    public void setContentType_type0(final java.lang.String param) {

      if ((3 <= java.lang.String.valueOf(param).length())) {
        this.localContentType_type0 = param;
      }
      else {
        throw new java.lang.RuntimeException();
      }


    }


    @Override
    public java.lang.String toString() {

      return this.localContentType_type0.toString();

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://www.w3.org/2005/05/xmlmime");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":contentType_type0", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "contentType_type0", xmlWriter);
        }
      }

      if (this.localContentType_type0 == null) {

        throw new org.apache.axis2.databinding.ADBException("contentType_type0 cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localContentType_type0);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://www.w3.org/2005/05/xmlmime")) {
        return "ns2";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContentType_type0) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static ContentType_type0 fromString(final java.lang.String value, final java.lang.String namespaceURI) {
        ContentType_type0 returnValue = new ContentType_type0();

        returnValue.setContentType_type0(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        return returnValue;
      }

      public static ContentType_type0 fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return ContentType_type0.Factory.fromString(content, namespaceUri);
        }
        else {
          return ContentType_type0.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ContentType_type0 parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ContentType_type0 object = new ContentType_type0();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              if (reader.isStartElement() || reader.hasText()) {

                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                  throw new org.apache.axis2.databinding.ADBException("The element: " + "contentType_type0"
                      + "  cannot be null");
                }


                java.lang.String content = reader.getElementText();

                object.setContentType_type0(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

              } // End of if for expected property start element

              else {
                // A start element we are not expecting indicates an invalid parameter was passed
                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
              }

            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class InsertIntoContainerItemStateType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = InsertIntoContainerItemStateType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for ContainerVersionNo
     */


    protected java.lang.String localContainerVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContainerVersionNo() {
      return this.localContainerVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ContainerVersionNo
     */
    public void setContainerVersionNo(final java.lang.String param) {

      this.localContainerVersionNo = param;


    }


    /**
     * field for State
     */


    protected ItemState localState;


    /**
     * Auto generated getter method
     * 
     * @return ItemState
     */
    public ItemState getState() {
      return this.localState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param State
     */
    public void setState(final ItemState param) {

      this.localState = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":InsertIntoContainerItemStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "InsertIntoContainerItemStateType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "containerVersionNo", xmlWriter);


      if (this.localContainerVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("containerVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContainerVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      this.localState.serialize(new javax.xml.namespace.QName("", "state"), xmlWriter);

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "containerVersionNo"));

      if (this.localContainerVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContainerVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("containerVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "state"));


      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      elementList.add(this.localState);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static InsertIntoContainerItemStateType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        InsertIntoContainerItemStateType object = new InsertIntoContainerItemStateType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"InsertIntoContainerItemStateType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (InsertIntoContainerItemStateType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "containerVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "containerVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContainerVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "state").equals(reader.getName())) {

            object.setState(ItemState.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetActivatedProductAttributeValuesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetActivatedProductAttributeValuesResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected AttrMapEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final AttrMapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final AttrMapEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addReturnValue(final AttrMapEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new AttrMapEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetActivatedProductAttributeValuesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetActivatedProductAttributeValuesResponseType", xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetActivatedProductAttributeValuesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetActivatedProductAttributeValuesResponseType object = new GetActivatedProductAttributeValuesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetActivatedProductAttributeValuesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetActivatedProductAttributeValuesResponseType) ExtensionMapper.getTypeObject(nsUri, type,
                    reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameProductAttributeRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameProductAttributeRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for OldName
     */


    protected java.lang.String localOldName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getOldName() {
      return this.localOldName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param OldName
     */
    public void setOldName(final java.lang.String param) {

      this.localOldName = param;


    }


    /**
     * field for NewName
     */


    protected java.lang.String localNewName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewName() {
      return this.localNewName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewName
     */
    public void setNewName(final java.lang.String param) {

      this.localNewName = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameProductAttributeRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameProductAttributeRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "oldName", xmlWriter);


      if (this.localOldName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("oldName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localOldName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "newName", xmlWriter);


      if (this.localNewName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("newName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localNewName);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "oldName"));

      if (this.localOldName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localOldName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("oldName cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "newName"));

      if (this.localNewName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("newName cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameProductAttributeRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameProductAttributeRequestType object = new RenameProductAttributeRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameProductAttributeRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameProductAttributeRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "oldName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "oldName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setOldName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetSystemAttributesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetSystemAttributesResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected AttrMapEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final AttrMapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final AttrMapEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addReturnValue(final AttrMapEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new AttrMapEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetSystemAttributesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetSystemAttributesResponseType",
              xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetSystemAttributesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetSystemAttributesResponseType object = new GetSystemAttributesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetSystemAttributesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetSystemAttributesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SearchObjectsResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SearchObjectsResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected ObjInfoEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ObjInfoEntryType[]
     */
    public ObjInfoEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final ObjInfoEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final ObjInfoEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ObjInfoEntryType
     */
    public void addReturnValue(final ObjInfoEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new ObjInfoEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (ObjInfoEntryType[]) list.toArray(new ObjInfoEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SearchObjectsResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SearchObjectsResponseType",
              xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ObjInfoEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ObjInfoEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SearchObjectsResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SearchObjectsResponseType object = new SearchObjectsResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SearchObjectsResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SearchObjectsResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(ObjInfoEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(ObjInfoEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((ObjInfoEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                ObjInfoEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreatePRDResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreatePRDResponseType", "ns1");


    /**
     * field for ValidationResult
     */


    protected ValidationResultType localValidationResult;


    /**
     * Auto generated getter method
     * 
     * @return ValidationResultType
     */
    public ValidationResultType getValidationResult() {
      return this.localValidationResult;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ValidationResult
     */
    public void setValidationResult(final ValidationResultType param) {

      this.localValidationResult = param;


    }


    /**
     * field for CreatedVersion
     */


    protected ObjInfoEntryType localCreatedVersion;


    /**
     * Auto generated getter method
     * 
     * @return ObjInfoEntryType
     */
    public ObjInfoEntryType getCreatedVersion() {
      return this.localCreatedVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param CreatedVersion
     */
    public void setCreatedVersion(final ObjInfoEntryType param) {

      this.localCreatedVersion = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreatePRDResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreatePRDResponseType", xmlWriter);
        }


      }

      if (this.localValidationResult == null) {
        throw new org.apache.axis2.databinding.ADBException("validationResult cannot be null!!");
      }
      this.localValidationResult.serialize(new javax.xml.namespace.QName("", "validationResult"), xmlWriter);

      if (this.localCreatedVersion == null) {
        throw new org.apache.axis2.databinding.ADBException("createdVersion cannot be null!!");
      }
      this.localCreatedVersion.serialize(new javax.xml.namespace.QName("", "createdVersion"), xmlWriter);

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "validationResult"));


      if (this.localValidationResult == null) {
        throw new org.apache.axis2.databinding.ADBException("validationResult cannot be null!!");
      }
      elementList.add(this.localValidationResult);

      elementList.add(new javax.xml.namespace.QName("", "createdVersion"));


      if (this.localCreatedVersion == null) {
        throw new org.apache.axis2.databinding.ADBException("createdVersion cannot be null!!");
      }
      elementList.add(this.localCreatedVersion);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreatePRDResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreatePRDResponseType object = new CreatePRDResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreatePRDResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreatePRDResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "validationResult").equals(reader.getName())) {

            object.setValidationResult(ValidationResultType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "createdVersion").equals(reader.getName())) {

            object.setCreatedVersion(ObjInfoEntryType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckOutItemType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = CheckOutItemType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for Variant
     */


    protected java.lang.String localVariant;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localVariantTracker = false;

    public boolean isVariantSpecified() {
      return this.localVariantTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVariant() {
      return this.localVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Variant
     */
    public void setVariant(final java.lang.String param) {
      this.localVariantTracker = param != null;

      this.localVariant = param;


    }


    /**
     * field for Comment
     */


    protected java.lang.String localComment;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localCommentTracker = false;

    public boolean isCommentSpecified() {
      return this.localCommentTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getComment() {
      return this.localComment;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Comment
     */
    public void setComment(final java.lang.String param) {
      this.localCommentTracker = param != null;

      this.localComment = param;


    }


    /**
     * field for FetchFileFromRepository
     */


    protected boolean localFetchFileFromRepository;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localFetchFileFromRepositoryTracker = false;

    public boolean isFetchFileFromRepositorySpecified() {
      return this.localFetchFileFromRepositoryTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getFetchFileFromRepository() {
      return this.localFetchFileFromRepository;
    }


    /**
     * Auto generated setter method
     * 
     * @param param FetchFileFromRepository
     */
    public void setFetchFileFromRepository(final boolean param) {

      // setting primitive attribute tracker to true
      this.localFetchFileFromRepositoryTracker = true;

      this.localFetchFileFromRepository = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckOutItemType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckOutItemType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();
      if (this.localVariantTracker) {
        namespace = "";
        writeStartElement(null, namespace, "variant", xmlWriter);


        if (this.localVariant == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("variant cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localVariant);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localCommentTracker) {
        namespace = "";
        writeStartElement(null, namespace, "comment", xmlWriter);


        if (this.localComment == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("comment cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localComment);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localFetchFileFromRepositoryTracker) {
        namespace = "";
        writeStartElement(null, namespace, "fetchFileFromRepository", xmlWriter);

        if (false) {

          throw new org.apache.axis2.databinding.ADBException("fetchFileFromRepository cannot be null!!");

        }
        else {
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(this.localFetchFileFromRepository));
        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }
      if (this.localVariantTracker) {
        elementList.add(new javax.xml.namespace.QName("", "variant"));

        if (this.localVariant != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVariant));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("variant cannot be null!!");
        }
      }
      if (this.localCommentTracker) {
        elementList.add(new javax.xml.namespace.QName("", "comment"));

        if (this.localComment != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localComment));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("comment cannot be null!!");
        }
      }
      if (this.localFetchFileFromRepositoryTracker) {
        elementList.add(new javax.xml.namespace.QName("", "fetchFileFromRepository"));

        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localFetchFileFromRepository));
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckOutItemType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        CheckOutItemType object = new CheckOutItemType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckOutItemType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckOutItemType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "variant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "variant" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "comment").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "comment" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setComment(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "fetchFileFromRepository").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "fetchFileFromRepository"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setFetchFileFromRepository(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateProgramKeyResponse implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateProgramKeyResponse", "ns1");


    /**
     * field for CreateProgramKeyResponse
     */


    protected ProgramKeyDataType localCreateProgramKeyResponse;


    /**
     * Auto generated getter method
     * 
     * @return ProgramKeyDataType
     */
    public ProgramKeyDataType getCreateProgramKeyResponse() {
      return this.localCreateProgramKeyResponse;
    }


    /**
     * Auto generated setter method
     * 
     * @param param CreateProgramKeyResponse
     */
    public void setCreateProgramKeyResponse(final ProgramKeyDataType param) {

      this.localCreateProgramKeyResponse = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      if (this.localCreateProgramKeyResponse == null) {
        throw new org.apache.axis2.databinding.ADBException("CreateProgramKeyResponse cannot be null!");
      }
      this.localCreateProgramKeyResponse.serialize(MY_QNAME, xmlWriter);


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return this.localCreateProgramKeyResponse.getPullParser(MY_QNAME);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateProgramKeyResponse parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateProgramKeyResponse object = new CreateProgramKeyResponse();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement()) {

              if (reader.isStartElement() &&
                  new javax.xml.namespace.QName("http://easee.vector.com/application/cdmservice/",
                      "CreateProgramKeyResponse").equals(reader.getName())) {

                object.setCreateProgramKeyResponse(ProgramKeyDataType.Factory.parse(reader));

              } // End of if for expected property start element

              else {
                // A start element we are not expecting indicates an invalid parameter was passed
                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
              }

            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class InsertIntoContainerRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "InsertIntoContainerRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for InsertIntoContainerItems This was an Array!
     */


    protected InsertIntoContainerItemType[] localInsertIntoContainerItems;


    /**
     * Auto generated getter method
     * 
     * @return InsertIntoContainerItemType[]
     */
    public InsertIntoContainerItemType[] getInsertIntoContainerItems() {
      return this.localInsertIntoContainerItems;
    }


    /**
     * validate the array for InsertIntoContainerItems
     */
    protected void validateInsertIntoContainerItems(final InsertIntoContainerItemType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param InsertIntoContainerItems
     */
    public void setInsertIntoContainerItems(final InsertIntoContainerItemType[] param) {

      validateInsertIntoContainerItems(param);


      this.localInsertIntoContainerItems = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param InsertIntoContainerItemType
     */
    public void addInsertIntoContainerItems(final InsertIntoContainerItemType param) {
      if (this.localInsertIntoContainerItems == null) {
        this.localInsertIntoContainerItems = new InsertIntoContainerItemType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localInsertIntoContainerItems);
      list.add(param);
      this.localInsertIntoContainerItems =
          (InsertIntoContainerItemType[]) list.toArray(new InsertIntoContainerItemType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":InsertIntoContainerRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "InsertIntoContainerRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localInsertIntoContainerItems != null) {
        for (InsertIntoContainerItemType localInsertIntoContainerItem : this.localInsertIntoContainerItems) {
          if (localInsertIntoContainerItem != null) {
            localInsertIntoContainerItem.serialize(new javax.xml.namespace.QName("", "insertIntoContainerItems"),
                xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("insertIntoContainerItems cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("insertIntoContainerItems cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localInsertIntoContainerItems != null) {
        for (InsertIntoContainerItemType localInsertIntoContainerItem : this.localInsertIntoContainerItems) {

          if (localInsertIntoContainerItem != null) {
            elementList.add(new javax.xml.namespace.QName("", "insertIntoContainerItems"));
            elementList.add(localInsertIntoContainerItem);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("insertIntoContainerItems cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("insertIntoContainerItems cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static InsertIntoContainerRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        InsertIntoContainerRequestType object = new InsertIntoContainerRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"InsertIntoContainerRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (InsertIntoContainerRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "insertIntoContainerItems").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(InsertIntoContainerItemType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "insertIntoContainerItems").equals(reader.getName())) {
                  list2.add(InsertIntoContainerItemType.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object
                .setInsertIntoContainerItems((InsertIntoContainerItemType[]) org.apache.axis2.databinding.utils.ConverterUtil
                    .convertToArray(InsertIntoContainerItemType.class, list2));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckInItemStateType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = CheckInItemStateType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for State
     */


    protected ItemState localState;


    /**
     * Auto generated getter method
     * 
     * @return ItemState
     */
    public ItemState getState() {
      return this.localState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param State
     */
    public void setState(final ItemState param) {

      this.localState = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckInItemStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckInItemStateType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      this.localState.serialize(new javax.xml.namespace.QName("", "state"), xmlWriter);

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "state"));


      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      elementList.add(this.localState);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckInItemStateType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CheckInItemStateType object = new CheckInItemStateType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckInItemStateType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckInItemStateType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "state").equals(reader.getName())) {

            object.setState(ItemState.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ValueSystemState_type1 implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "valueSystemState_type1", "ns1");


    /**
     * field for ValueSystemState_type0
     */


    protected java.lang.String localValueSystemState_type0;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected ValueSystemState_type1(final java.lang.String value, final boolean isRegisterValue) {
      this.localValueSystemState_type0 = value;
      if (isRegisterValue) {

        _table_.put(this.localValueSystemState_type0, this);

      }

    }

    public static final java.lang.String _INITIAL = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("INITIAL");

    public static final java.lang.String _NEW = org.apache.axis2.databinding.utils.ConverterUtil.convertToString("NEW");

    public static final java.lang.String _CHANGED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CHANGED");

    public static final java.lang.String _DELETED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("DELETED");

    public static final ValueSystemState_type1 INITIAL = new ValueSystemState_type1(_INITIAL, true);

    public static final ValueSystemState_type1 NEW = new ValueSystemState_type1(_NEW, true);

    public static final ValueSystemState_type1 CHANGED = new ValueSystemState_type1(_CHANGED, true);

    public static final ValueSystemState_type1 DELETED = new ValueSystemState_type1(_DELETED, true);


    public java.lang.String getValue() {
      return this.localValueSystemState_type0;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localValueSystemState_type0.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":valueSystemState_type1", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "valueSystemState_type1",
              xmlWriter);
        }
      }

      if (this.localValueSystemState_type0 == null) {

        throw new org.apache.axis2.databinding.ADBException("valueSystemState_type0 cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localValueSystemState_type0);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localValueSystemState_type0) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static ValueSystemState_type1 fromValue(final java.lang.String value)
          throws java.lang.IllegalArgumentException {
        ValueSystemState_type1 enumeration = (ValueSystemState_type1)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static ValueSystemState_type1 fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static ValueSystemState_type1 fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return ValueSystemState_type1.Factory.fromString(content, namespaceUri);
        }
        else {
          return ValueSystemState_type1.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ValueSystemState_type1 parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ValueSystemState_type1 object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "valueSystemState_type0"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = ValueSystemState_type1.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = ValueSystemState_type1.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetConfigStateRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetConfigStateRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ContainsArr This was an Array!
     */


    protected MapContainsType[] localContainsArr;


    /**
     * Auto generated getter method
     * 
     * @return MapContainsType[]
     */
    public MapContainsType[] getContainsArr() {
      return this.localContainsArr;
    }


    /**
     * validate the array for ContainsArr
     */
    protected void validateContainsArr(final MapContainsType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param ContainsArr
     */
    public void setContainsArr(final MapContainsType[] param) {

      validateContainsArr(param);


      this.localContainsArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapContainsType
     */
    public void addContainsArr(final MapContainsType param) {
      if (this.localContainsArr == null) {
        this.localContainsArr = new MapContainsType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localContainsArr);
      list.add(param);
      this.localContainsArr = (MapContainsType[]) list.toArray(new MapContainsType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetConfigStateRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetConfigStateRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localContainsArr != null) {
        for (MapContainsType element : this.localContainsArr) {
          if (element != null) {
            element.serialize(new javax.xml.namespace.QName("", "containsArr"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("containsArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("containsArr cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localContainsArr != null) {
        for (MapContainsType element : this.localContainsArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "containsArr"));
            elementList.add(element);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("containsArr cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("containsArr cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetConfigStateRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetConfigStateRequestType object = new GetConfigStateRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetConfigStateRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetConfigStateRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "containsArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(MapContainsType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "containsArr").equals(reader.getName())) {
                  list2.add(MapContainsType.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setContainsArr((MapContainsType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapContainsType.class, list2));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DependentDeletedObjectStateType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = DependentDeletedObjectStateType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for State
     */


    protected ItemState localState;


    /**
     * Auto generated getter method
     * 
     * @return ItemState
     */
    public ItemState getState() {
      return this.localState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param State
     */
    public void setState(final ItemState param) {

      this.localState = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DependentDeletedObjectStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DependentDeletedObjectStateType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      this.localState.serialize(new javax.xml.namespace.QName("", "state"), xmlWriter);

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "state"));


      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      elementList.add(this.localState);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DependentDeletedObjectStateType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DependentDeletedObjectStateType object = new DependentDeletedObjectStateType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DependentDeletedObjectStateType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DependentDeletedObjectStateType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "state").equals(reader.getName())) {

            object.setState(ItemState.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateDSTRevisionResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateDSTRevisionResponseType", "ns1");


    /**
     * field for NewDstVersion
     */


    protected java.lang.String localNewDstVersion;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNewDstVersionTracker = false;

    public boolean isNewDstVersionSpecified() {
      return this.localNewDstVersionTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNewDstVersion() {
      return this.localNewDstVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param NewDstVersion
     */
    public void setNewDstVersion(final java.lang.String param) {
      this.localNewDstVersionTracker = param != null;

      this.localNewDstVersion = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateDSTRevisionResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreateDSTRevisionResponseType",
              xmlWriter);
        }


      }
      if (this.localNewDstVersionTracker) {
        namespace = "";
        writeStartElement(null, namespace, "newDstVersion", xmlWriter);


        if (this.localNewDstVersion == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("newDstVersion cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localNewDstVersion);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localNewDstVersionTracker) {
        elementList.add(new javax.xml.namespace.QName("", "newDstVersion"));

        if (this.localNewDstVersion != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localNewDstVersion));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("newDstVersion cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateDSTRevisionResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateDSTRevisionResponseType object = new CreateDSTRevisionResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateDSTRevisionResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateDSTRevisionResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "newDstVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "newDstVersion"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setNewDstVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetElementAttributesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetElementAttributesResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected AttrMapEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final AttrMapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final AttrMapEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addReturnValue(final AttrMapEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new AttrMapEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetElementAttributesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetElementAttributesResponseType", xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetElementAttributesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetElementAttributesResponseType object = new GetElementAttributesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetElementAttributesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetElementAttributesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ExtensionMapper {

    public static java.lang.Object getTypeObject(final java.lang.String namespaceURI, final java.lang.String typeName,
        final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "integrationOperation_type1".equals(typeName)) {

        return IntegrationOperation_type1.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "AttrMapEntryType".equals(typeName)) {

        return AttrMapEntryType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "NFOCreationInfoType".equals(typeName)) {

        return NFOCreationInfoType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "AttachmentType".equals(typeName)) {

        return AttachmentType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "ValidationStateType".equals(typeName)) {

        return ValidationStateType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "DeleteObjectItemStateType".equals(typeName)) {

        return DeleteObjectItemStateType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "calibrationState_type1".equals(typeName)) {

        return CalibrationState_type1.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "MessageType".equals(typeName)) {

        return MessageType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "InsertIntoContainerItemStateType".equals(typeName)) {

        return InsertIntoContainerItemStateType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "ConfigStateType".equals(typeName)) {

        return ConfigStateType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "CheckOutItemType".equals(typeName)) {

        return CheckOutItemType.Factory.parse(reader);


      }


      if ("http://www.w3.org/2005/05/xmlmime".equals(namespaceURI) && "base64Binary".equals(typeName)) {

        return Base64Binary.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "VariantKeyDataType".equals(typeName)) {

        return VariantKeyDataType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "InsertedObject".equals(typeName)) {

        return InsertedObject.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "CheckInItemStateType".equals(typeName)) {

        return CheckInItemStateType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "MapEntryType".equals(typeName)) {

        return MapEntryType.Factory.parse(reader);


      }


      if ("http://www.w3.org/2005/05/xmlmime".equals(namespaceURI) && "contentType_type0".equals(typeName)) {

        return ContentType_type0.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "DependentDeletedObjectStateType".equals(typeName)) {

        return DependentDeletedObjectStateType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "valueSystemState_type1".equals(typeName)) {

        return ValueSystemState_type1.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "DeleteObjectItemType".equals(typeName)) {

        return DeleteObjectItemType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "AddressRange".equals(typeName)) {

        return AddressRange.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "integrationLevel_type1".equals(typeName)) {

        return IntegrationLevel_type1.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "ProductAttributeValueDataType".equals(typeName)) {

        return ProductAttributeValueDataType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "ObjInfoEntryType".equals(typeName)) {

        return ObjInfoEntryType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "ProgramKeyProperty".equals(typeName)) {

        return ProgramKeyProperty.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "integrationOperation_type1".equals(typeName)) {

        return IntegrationOperation_type1.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "ValuesArrayType".equals(typeName)) {

        return ValuesArrayType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "SessionStateType".equals(typeName)) {

        return SessionStateType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "ProgramKeyDataType".equals(typeName)) {

        return ProgramKeyDataType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "MapContainsType".equals(typeName)) {

        return MapContainsType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "CreateObjectItemType".equals(typeName)) {

        return CreateObjectItemType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "InsertIntoContainerItemType".equals(typeName)) {

        return InsertIntoContainerItemType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "CreateObjectItemStateType".equals(typeName)) {

        return CreateObjectItemStateType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "ItemState".equals(typeName)) {

        return ItemState.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "ValidationResultType".equals(typeName)) {

        return ValidationResultType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "MapContainsInfoType".equals(typeName)) {

        return MapContainsInfoType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "CheckOutItemStateType".equals(typeName)) {

        return CheckOutItemStateType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "NFOReferenceInfoType".equals(typeName)) {

        return NFOReferenceInfoType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "ParameterValueType".equals(typeName)) {

        return ParameterValueType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "NFODeliveryInfoType".equals(typeName)) {

        return NFODeliveryInfoType.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) &&
          "ValidationMessage".equals(typeName)) {

        return ValidationMessage.Factory.parse(reader);


      }


      if ("http://easee.vector.com/application/cdmservice/".equals(namespaceURI) && "CheckInItemType".equals(typeName)) {

        return CheckInItemType.Factory.parse(reader);


      }


      throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
    }

  }

  public static class GetVersionAttributesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetVersionAttributesResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected AttrMapEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final AttrMapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final AttrMapEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addReturnValue(final AttrMapEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new AttrMapEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetVersionAttributesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetVersionAttributesResponseType", xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetVersionAttributesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetVersionAttributesResponseType object = new GetVersionAttributesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetVersionAttributesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetVersionAttributesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class IntegrationOperation_type1 implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "integrationOperation_type1", "ns1");


    /**
     * field for IntegrationOperation_type0
     */


    protected java.lang.String localIntegrationOperation_type0;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected IntegrationOperation_type1(final java.lang.String value, final boolean isRegisterValue) {
      this.localIntegrationOperation_type0 = value;
      if (isRegisterValue) {

        _table_.put(this.localIntegrationOperation_type0, this);

      }

    }

    public static final java.lang.String _CREATE_DST = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CREATE_DST");

    public static final java.lang.String _ACTIVATION = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("ACTIVATION");

    public static final java.lang.String _REPLACE_PVD = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("REPLACE_PVD");

    public static final java.lang.String _DEACTIVATION = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("DEACTIVATION");

    public static final java.lang.String _CHANGE_DMM = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CHANGE_DMM");

    public static final java.lang.String _DEFAULT = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("DEFAULT");

    public static final java.lang.String _EDIT_DST = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("EDIT_DST");

    public static final java.lang.String _SOFTWARE_CHANGE = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("SOFTWARE_CHANGE");

    public static final java.lang.String _MIGRATION = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("MIGRATION");

    public static final java.lang.String _UPDATE_OBJECT_AND_DST = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("UPDATE_OBJECT_AND_DST");

    public static final IntegrationOperation_type1 CREATE_DST = new IntegrationOperation_type1(_CREATE_DST, true);

    public static final IntegrationOperation_type1 ACTIVATION = new IntegrationOperation_type1(_ACTIVATION, true);

    public static final IntegrationOperation_type1 REPLACE_PVD = new IntegrationOperation_type1(_REPLACE_PVD, true);

    public static final IntegrationOperation_type1 DEACTIVATION = new IntegrationOperation_type1(_DEACTIVATION, true);

    public static final IntegrationOperation_type1 CHANGE_DMM = new IntegrationOperation_type1(_CHANGE_DMM, true);

    public static final IntegrationOperation_type1 DEFAULT = new IntegrationOperation_type1(_DEFAULT, true);

    public static final IntegrationOperation_type1 EDIT_DST = new IntegrationOperation_type1(_EDIT_DST, true);

    public static final IntegrationOperation_type1 SOFTWARE_CHANGE = new IntegrationOperation_type1(_SOFTWARE_CHANGE,
        true);

    public static final IntegrationOperation_type1 MIGRATION = new IntegrationOperation_type1(_MIGRATION, true);

    public static final IntegrationOperation_type1 UPDATE_OBJECT_AND_DST = new IntegrationOperation_type1(
        _UPDATE_OBJECT_AND_DST, true);


    public java.lang.String getValue() {
      return this.localIntegrationOperation_type0;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localIntegrationOperation_type0.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":integrationOperation_type1", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "integrationOperation_type1",
              xmlWriter);
        }
      }

      if (this.localIntegrationOperation_type0 == null) {

        throw new org.apache.axis2.databinding.ADBException("integrationOperation_type0 cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localIntegrationOperation_type0);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIntegrationOperation_type0) },
          null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static IntegrationOperation_type1 fromValue(final java.lang.String value)
          throws java.lang.IllegalArgumentException {
        IntegrationOperation_type1 enumeration = (IntegrationOperation_type1)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static IntegrationOperation_type1 fromString(final java.lang.String value,
          final java.lang.String namespaceURI) throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static IntegrationOperation_type1 fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return IntegrationOperation_type1.Factory.fromString(content, namespaceUri);
        }
        else {
          return IntegrationOperation_type1.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static IntegrationOperation_type1 parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        IntegrationOperation_type1 object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "integrationOperation_type0"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = IntegrationOperation_type1.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = IntegrationOperation_type1.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ObjInfoEntryType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = ObjInfoEntryType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for ObjName
     */


    protected java.lang.String localObjName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjName() {
      return this.localObjName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjName
     */
    public void setObjName(final java.lang.String param) {

      this.localObjName = param;


    }


    /**
     * field for ObjRevision
     */


    protected java.lang.String localObjRevision;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjRevision() {
      return this.localObjRevision;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjRevision
     */
    public void setObjRevision(final java.lang.String param) {

      this.localObjRevision = param;


    }


    /**
     * field for ObjVariant
     */


    protected java.lang.String localObjVariant;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjVariant() {
      return this.localObjVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjVariant
     */
    public void setObjVariant(final java.lang.String param) {

      this.localObjVariant = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for ObjClass
     */


    protected java.lang.String localObjClass;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjClass() {
      return this.localObjClass;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjClass
     */
    public void setObjClass(final java.lang.String param) {

      this.localObjClass = param;


    }


    /**
     * field for ObjDomain
     */


    protected java.lang.String localObjDomain;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjDomain() {
      return this.localObjDomain;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjDomain
     */
    public void setObjDomain(final java.lang.String param) {

      this.localObjDomain = param;


    }


    /**
     * field for ObjType
     */


    protected java.lang.String localObjType;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjType() {
      return this.localObjType;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjType
     */
    public void setObjType(final java.lang.String param) {

      this.localObjType = param;


    }


    /**
     * field for ObjChkInState
     */


    protected boolean localObjChkInState;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getObjChkInState() {
      return this.localObjChkInState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjChkInState
     */
    public void setObjChkInState(final boolean param) {

      this.localObjChkInState = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ObjInfoEntryType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ObjInfoEntryType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "objName", xmlWriter);


      if (this.localObjName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objRevision", xmlWriter);


      if (this.localObjRevision == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objRevision cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjRevision);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objVariant", xmlWriter);


      if (this.localObjVariant == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjVariant);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objClass", xmlWriter);


      if (this.localObjClass == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjClass);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objDomain", xmlWriter);


      if (this.localObjDomain == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objDomain cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjDomain);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objType", xmlWriter);


      if (this.localObjType == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objType cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjType);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objChkInState", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("objChkInState cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localObjChkInState));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "objName"));

      if (this.localObjName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objRevision"));

      if (this.localObjRevision != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjRevision));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objRevision cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objVariant"));

      if (this.localObjVariant != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjVariant));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objClass"));

      if (this.localObjClass != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjClass));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objDomain"));

      if (this.localObjDomain != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjDomain));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objDomain cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objType"));

      if (this.localObjType != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjType));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objType cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objChkInState"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjChkInState));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ObjInfoEntryType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ObjInfoEntryType object = new ObjInfoEntryType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ObjInfoEntryType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ObjInfoEntryType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objRevision").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objRevision" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjRevision(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objVariant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objVariant" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objClass").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objClass" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjClass(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objDomain").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objDomain" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjDomain(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objType").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objType" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objChkInState").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objChkInState"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjChkInState(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ProgramKeyProperty implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = ProgramKeyProperty Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for ProgramKey
     */


    protected java.lang.String localProgramKey;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProgramKey() {
      return this.localProgramKey;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProgramKey
     */
    public void setProgramKey(final java.lang.String param) {

      this.localProgramKey = param;


    }


    /**
     * field for PstVersion
     */


    protected java.lang.String localPstVersion;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localPstVersionTracker = false;

    public boolean isPstVersionSpecified() {
      return this.localPstVersionTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getPstVersion() {
      return this.localPstVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PstVersion
     */
    public void setPstVersion(final java.lang.String param) {
      this.localPstVersionTracker = param != null;

      this.localPstVersion = param;


    }


    /**
     * field for HexVersion
     */


    protected java.lang.String localHexVersion;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localHexVersionTracker = false;

    public boolean isHexVersionSpecified() {
      return this.localHexVersionTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getHexVersion() {
      return this.localHexVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param HexVersion
     */
    public void setHexVersion(final java.lang.String param) {
      this.localHexVersionTracker = param != null;

      this.localHexVersion = param;


    }


    /**
     * field for A2LVersion
     */


    protected java.lang.String localA2LVersion;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localA2LVersionTracker = false;

    public boolean isA2LVersionSpecified() {
      return this.localA2LVersionTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getA2LVersion() {
      return this.localA2LVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param A2LVersion
     */
    public void setA2LVersion(final java.lang.String param) {
      this.localA2LVersionTracker = param != null;

      this.localA2LVersion = param;


    }


    /**
     * field for IsInUse
     */


    protected boolean localIsInUse;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsInUse() {
      return this.localIsInUse;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IsInUse
     */
    public void setIsInUse(final boolean param) {

      this.localIsInUse = param;


    }


    /**
     * field for IsEnabled
     */


    protected boolean localIsEnabled;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsEnabled() {
      return this.localIsEnabled;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IsEnabled
     */
    public void setIsEnabled(final boolean param) {

      this.localIsEnabled = param;


    }


    /**
     * field for IsEPROMValidated
     */


    protected boolean localIsEPROMValidated;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsEPROMValidated() {
      return this.localIsEPROMValidated;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IsEPROMValidated
     */
    public void setIsEPROMValidated(final boolean param) {

      this.localIsEPROMValidated = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ProgramKeyProperty", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ProgramKeyProperty", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "programKey", xmlWriter);


      if (this.localProgramKey == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("programKey cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProgramKey);

      }

      xmlWriter.writeEndElement();
      if (this.localPstVersionTracker) {
        namespace = "";
        writeStartElement(null, namespace, "pstVersion", xmlWriter);


        if (this.localPstVersion == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("pstVersion cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localPstVersion);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localHexVersionTracker) {
        namespace = "";
        writeStartElement(null, namespace, "hexVersion", xmlWriter);


        if (this.localHexVersion == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("hexVersion cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localHexVersion);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localA2LVersionTracker) {
        namespace = "";
        writeStartElement(null, namespace, "a2lVersion", xmlWriter);


        if (this.localA2LVersion == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("a2lVersion cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localA2LVersion);

        }

        xmlWriter.writeEndElement();
      }
      namespace = "";
      writeStartElement(null, namespace, "isInUse", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("isInUse cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIsInUse));
      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "isEnabled", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("isEnabled cannot be null!!");

      }
      else {
        xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIsEnabled));
      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "isEPROMValidated", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("isEPROMValidated cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localIsEPROMValidated));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "programKey"));

      if (this.localProgramKey != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProgramKey));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("programKey cannot be null!!");
      }
      if (this.localPstVersionTracker) {
        elementList.add(new javax.xml.namespace.QName("", "pstVersion"));

        if (this.localPstVersion != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPstVersion));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("pstVersion cannot be null!!");
        }
      }
      if (this.localHexVersionTracker) {
        elementList.add(new javax.xml.namespace.QName("", "hexVersion"));

        if (this.localHexVersion != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localHexVersion));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("hexVersion cannot be null!!");
        }
      }
      if (this.localA2LVersionTracker) {
        elementList.add(new javax.xml.namespace.QName("", "a2lVersion"));

        if (this.localA2LVersion != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localA2LVersion));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("a2lVersion cannot be null!!");
        }
      }
      elementList.add(new javax.xml.namespace.QName("", "isInUse"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIsInUse));

      elementList.add(new javax.xml.namespace.QName("", "isEnabled"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIsEnabled));

      elementList.add(new javax.xml.namespace.QName("", "isEPROMValidated"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIsEPROMValidated));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ProgramKeyProperty parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ProgramKeyProperty object = new ProgramKeyProperty();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ProgramKeyProperty".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ProgramKeyProperty) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "programKey").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "programKey" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProgramKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "pstVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "pstVersion" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPstVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "hexVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "hexVersion" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setHexVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "a2lVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "a2lVersion" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setA2LVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "isInUse").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "isInUse" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setIsInUse(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "isEnabled").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "isEnabled" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setIsEnabled(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "isEPROMValidated").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "isEPROMValidated"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setIsEPROMValidated(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckInRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CheckInRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for CheckInItems This was an Array!
     */


    protected CheckInItemType[] localCheckInItems;


    /**
     * Auto generated getter method
     * 
     * @return CheckInItemType[]
     */
    public CheckInItemType[] getCheckInItems() {
      return this.localCheckInItems;
    }


    /**
     * validate the array for CheckInItems
     */
    protected void validateCheckInItems(final CheckInItemType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param CheckInItems
     */
    public void setCheckInItems(final CheckInItemType[] param) {

      validateCheckInItems(param);


      this.localCheckInItems = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param CheckInItemType
     */
    public void addCheckInItems(final CheckInItemType param) {
      if (this.localCheckInItems == null) {
        this.localCheckInItems = new CheckInItemType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localCheckInItems);
      list.add(param);
      this.localCheckInItems = (CheckInItemType[]) list.toArray(new CheckInItemType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckInRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckInRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localCheckInItems != null) {
        for (CheckInItemType localCheckInItem : this.localCheckInItems) {
          if (localCheckInItem != null) {
            localCheckInItem.serialize(new javax.xml.namespace.QName("", "checkInItems"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("checkInItems cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("checkInItems cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localCheckInItems != null) {
        for (CheckInItemType localCheckInItem : this.localCheckInItems) {

          if (localCheckInItem != null) {
            elementList.add(new javax.xml.namespace.QName("", "checkInItems"));
            elementList.add(localCheckInItem);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("checkInItems cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("checkInItems cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckInRequestType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        CheckInRequestType object = new CheckInRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckInRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckInRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "checkInItems").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(CheckInItemType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "checkInItems").equals(reader.getName())) {
                  list2.add(CheckInItemType.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setCheckInItems((CheckInItemType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                CheckInItemType.class, list2));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetProductAttributeValuesStateRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetProductAttributeValuesStateRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for AttrAndValuesArr This was an Array!
     */


    protected ProductAttributeValueDataType[] localAttrAndValuesArr;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localAttrAndValuesArrTracker = false;

    public boolean isAttrAndValuesArrSpecified() {
      return this.localAttrAndValuesArrTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ProductAttributeValueDataType[]
     */
    public ProductAttributeValueDataType[] getAttrAndValuesArr() {
      return this.localAttrAndValuesArr;
    }


    /**
     * validate the array for AttrAndValuesArr
     */
    protected void validateAttrAndValuesArr(final ProductAttributeValueDataType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param AttrAndValuesArr
     */
    public void setAttrAndValuesArr(final ProductAttributeValueDataType[] param) {

      validateAttrAndValuesArr(param);

      this.localAttrAndValuesArrTracker = param != null;

      this.localAttrAndValuesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ProductAttributeValueDataType
     */
    public void addAttrAndValuesArr(final ProductAttributeValueDataType param) {
      if (this.localAttrAndValuesArr == null) {
        this.localAttrAndValuesArr = new ProductAttributeValueDataType[] {};
      }


      // update the setting tracker
      this.localAttrAndValuesArrTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAttrAndValuesArr);
      list.add(param);
      this.localAttrAndValuesArr =
          (ProductAttributeValueDataType[]) list.toArray(new ProductAttributeValueDataType[list.size()]);

    }


    /**
     * field for StateFlag
     */


    protected boolean localStateFlag;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getStateFlag() {
      return this.localStateFlag;
    }


    /**
     * Auto generated setter method
     * 
     * @param param StateFlag
     */
    public void setStateFlag(final boolean param) {

      this.localStateFlag = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetProductAttributeValuesStateRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "SetProductAttributeValuesStateRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();
      if (this.localAttrAndValuesArrTracker) {
        if (this.localAttrAndValuesArr != null) {
          for (ProductAttributeValueDataType element : this.localAttrAndValuesArr) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "attrAndValuesArr"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null!!");

        }
      }
      namespace = "";
      writeStartElement(null, namespace, "stateFlag", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("stateFlag cannot be null!!");

      }
      else {
        xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }
      if (this.localAttrAndValuesArrTracker) {
        if (this.localAttrAndValuesArr != null) {
          for (ProductAttributeValueDataType element : this.localAttrAndValuesArr) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "attrAndValuesArr"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("attrAndValuesArr cannot be null!!");

        }

      }
      elementList.add(new javax.xml.namespace.QName("", "stateFlag"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetProductAttributeValuesStateRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetProductAttributeValuesStateRequestType object = new SetProductAttributeValuesStateRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetProductAttributeValuesStateRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetProductAttributeValuesStateRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "attrAndValuesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(ProductAttributeValueDataType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "attrAndValuesArr").equals(reader.getName())) {
                  list3.add(ProductAttributeValueDataType.Factory.parse(reader));

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object
                .setAttrAndValuesArr((ProductAttributeValueDataType[]) org.apache.axis2.databinding.utils.ConverterUtil
                    .convertToArray(ProductAttributeValueDataType.class, list3));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "stateFlag").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "stateFlag" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setStateFlag(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ValuesArrayType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = ValuesArrayType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for V This was an Array!
     */


    protected java.lang.String[] localV;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localVTracker = false;

    public boolean isVSpecified() {
      return this.localVTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getV() {
      return this.localV;
    }


    /**
     * validate the array for V
     */
    protected void validateV(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param V
     */
    public void setV(final java.lang.String[] param) {

      validateV(param);

      this.localVTracker = param != null;

      this.localV = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addV(final java.lang.String param) {
      if (this.localV == null) {
        this.localV = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localVTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localV);
      list.add(param);
      this.localV = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * field for Unit
     */


    protected java.lang.String localUnit;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localUnitTracker = false;

    public boolean isUnitSpecified() {
      return this.localUnitTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getUnit() {
      return this.localUnit;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Unit
     */
    public void setUnit(final java.lang.String param) {
      this.localUnitTracker = param != null;

      this.localUnit = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ValuesArrayType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ValuesArrayType", xmlWriter);
        }


      }
      if (this.localVTracker) {
        if (this.localV != null) {
          namespace = "";
          for (String element : this.localV) {

            if (element != null) {

              writeStartElement(null, namespace, "v", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("v cannot be null!!");

        }

      }
      if (this.localUnitTracker) {
        namespace = "";
        writeStartElement(null, namespace, "unit", xmlWriter);


        if (this.localUnit == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("unit cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localUnit);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localVTracker) {
        if (this.localV != null) {
          for (String element : this.localV) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "v"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("v cannot be null!!");

        }

      }
      if (this.localUnitTracker) {
        elementList.add(new javax.xml.namespace.QName("", "unit"));

        if (this.localUnit != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localUnit));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("unit cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ValuesArrayType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ValuesArrayType object = new ValuesArrayType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ValuesArrayType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ValuesArrayType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "v").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "v").equals(reader.getName())) {
                  list1.add(reader.getElementText());

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setV((java.lang.String[]) list1.toArray(new java.lang.String[list1.size()]));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "unit").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "unit" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setUnit(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class IntegrationOperation_type0 implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("",
        "integrationOperation_type0", "");


    /**
     * field for IntegrationOperation_type0
     */


    protected java.lang.String localIntegrationOperation_type0;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected IntegrationOperation_type0(final java.lang.String value, final boolean isRegisterValue) {
      this.localIntegrationOperation_type0 = value;
      if (isRegisterValue) {

        _table_.put(this.localIntegrationOperation_type0, this);

      }

    }

    public static final java.lang.String _CREATE_DST = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CREATE_DST");

    public static final java.lang.String _ACTIVATION = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("ACTIVATION");

    public static final java.lang.String _REPLACE_PVD = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("REPLACE_PVD");

    public static final java.lang.String _DEACTIVATION = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("DEACTIVATION");

    public static final java.lang.String _CHANGE_DMM = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CHANGE_DMM");

    public static final java.lang.String _DEFAULT = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("DEFAULT");

    public static final java.lang.String _EDIT_DST = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("EDIT_DST");

    public static final java.lang.String _SOFTWARE_CHANGE = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("SOFTWARE_CHANGE");

    public static final java.lang.String _MIGRATION = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("MIGRATION");

    public static final java.lang.String _UPDATE_OBJECT_AND_DST = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("UPDATE_OBJECT_AND_DST");

    public static final IntegrationOperation_type0 CREATE_DST = new IntegrationOperation_type0(_CREATE_DST, true);

    public static final IntegrationOperation_type0 ACTIVATION = new IntegrationOperation_type0(_ACTIVATION, true);

    public static final IntegrationOperation_type0 REPLACE_PVD = new IntegrationOperation_type0(_REPLACE_PVD, true);

    public static final IntegrationOperation_type0 DEACTIVATION = new IntegrationOperation_type0(_DEACTIVATION, true);

    public static final IntegrationOperation_type0 CHANGE_DMM = new IntegrationOperation_type0(_CHANGE_DMM, true);

    public static final IntegrationOperation_type0 DEFAULT = new IntegrationOperation_type0(_DEFAULT, true);

    public static final IntegrationOperation_type0 EDIT_DST = new IntegrationOperation_type0(_EDIT_DST, true);

    public static final IntegrationOperation_type0 SOFTWARE_CHANGE = new IntegrationOperation_type0(_SOFTWARE_CHANGE,
        true);

    public static final IntegrationOperation_type0 MIGRATION = new IntegrationOperation_type0(_MIGRATION, true);

    public static final IntegrationOperation_type0 UPDATE_OBJECT_AND_DST = new IntegrationOperation_type0(
        _UPDATE_OBJECT_AND_DST, true);


    public java.lang.String getValue() {
      return this.localIntegrationOperation_type0;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localIntegrationOperation_type0.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":integrationOperation_type0", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "integrationOperation_type0",
              xmlWriter);
        }
      }

      if (this.localIntegrationOperation_type0 == null) {

        throw new org.apache.axis2.databinding.ADBException("integrationOperation_type0 cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localIntegrationOperation_type0);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("")) {
        return "";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIntegrationOperation_type0) },
          null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static IntegrationOperation_type0 fromValue(final java.lang.String value)
          throws java.lang.IllegalArgumentException {
        IntegrationOperation_type0 enumeration = (IntegrationOperation_type0)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static IntegrationOperation_type0 fromString(final java.lang.String value,
          final java.lang.String namespaceURI) throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static IntegrationOperation_type0 fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return IntegrationOperation_type0.Factory.fromString(content, namespaceUri);
        }
        else {
          return IntegrationOperation_type0.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static IntegrationOperation_type0 parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        IntegrationOperation_type0 object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "integrationOperation_type0"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = IntegrationOperation_type0.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = IntegrationOperation_type0.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ProgramKeyDataType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = ProgramKeyDataType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * field for PstVersionNo
     */


    protected java.lang.String localPstVersionNo;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localPstVersionNoTracker = false;

    public boolean isPstVersionNoSpecified() {
      return this.localPstVersionNoTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getPstVersionNo() {
      return this.localPstVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PstVersionNo
     */
    public void setPstVersionNo(final java.lang.String param) {
      this.localPstVersionNoTracker = param != null;

      this.localPstVersionNo = param;


    }


    /**
     * field for A2LVersionNo
     */


    protected java.lang.String localA2LVersionNo;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localA2LVersionNoTracker = false;

    public boolean isA2LVersionNoSpecified() {
      return this.localA2LVersionNoTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getA2LVersionNo() {
      return this.localA2LVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param A2LVersionNo
     */
    public void setA2LVersionNo(final java.lang.String param) {
      this.localA2LVersionNoTracker = param != null;

      this.localA2LVersionNo = param;


    }


    /**
     * field for HexVersionNo
     */


    protected java.lang.String localHexVersionNo;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localHexVersionNoTracker = false;

    public boolean isHexVersionNoSpecified() {
      return this.localHexVersionNoTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getHexVersionNo() {
      return this.localHexVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param HexVersionNo
     */
    public void setHexVersionNo(final java.lang.String param) {
      this.localHexVersionNoTracker = param != null;

      this.localHexVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ProgramKeyDataType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ProgramKeyDataType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();
      if (this.localPstVersionNoTracker) {
        namespace = "";
        writeStartElement(null, namespace, "pstVersionNo", xmlWriter);


        if (this.localPstVersionNo == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("pstVersionNo cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localPstVersionNo);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localA2LVersionNoTracker) {
        namespace = "";
        writeStartElement(null, namespace, "a2lVersionNo", xmlWriter);


        if (this.localA2LVersionNo == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("a2lVersionNo cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localA2LVersionNo);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localHexVersionNoTracker) {
        namespace = "";
        writeStartElement(null, namespace, "hexVersionNo", xmlWriter);


        if (this.localHexVersionNo == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("hexVersionNo cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localHexVersionNo);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }
      if (this.localPstVersionNoTracker) {
        elementList.add(new javax.xml.namespace.QName("", "pstVersionNo"));

        if (this.localPstVersionNo != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPstVersionNo));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("pstVersionNo cannot be null!!");
        }
      }
      if (this.localA2LVersionNoTracker) {
        elementList.add(new javax.xml.namespace.QName("", "a2lVersionNo"));

        if (this.localA2LVersionNo != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localA2LVersionNo));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("a2lVersionNo cannot be null!!");
        }
      }
      if (this.localHexVersionNoTracker) {
        elementList.add(new javax.xml.namespace.QName("", "hexVersionNo"));

        if (this.localHexVersionNo != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localHexVersionNo));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("hexVersionNo cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ProgramKeyDataType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ProgramKeyDataType object = new ProgramKeyDataType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ProgramKeyDataType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ProgramKeyDataType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "pstVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "pstVersionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPstVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "a2lVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "a2lVersionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setA2LVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "hexVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "hexVersionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setHexVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetSessionStateRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetSessionStateRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetSessionStateRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetSessionStateRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetSessionStateRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetSessionStateRequestType object = new GetSessionStateRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetSessionStateRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetSessionStateRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetVersionAttributesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetVersionAttributesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetVersionAttributesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetVersionAttributesRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetVersionAttributesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetVersionAttributesRequestType object = new GetVersionAttributesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetVersionAttributesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetVersionAttributesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateObjectResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateObjectResponseType", "ns1");


    /**
     * field for CreateObjectItemStates This was an Array!
     */


    protected CreateObjectItemStateType[] localCreateObjectItemStates;


    /**
     * Auto generated getter method
     * 
     * @return CreateObjectItemStateType[]
     */
    public CreateObjectItemStateType[] getCreateObjectItemStates() {
      return this.localCreateObjectItemStates;
    }


    /**
     * validate the array for CreateObjectItemStates
     */
    protected void validateCreateObjectItemStates(final CreateObjectItemStateType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param CreateObjectItemStates
     */
    public void setCreateObjectItemStates(final CreateObjectItemStateType[] param) {

      validateCreateObjectItemStates(param);


      this.localCreateObjectItemStates = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param CreateObjectItemStateType
     */
    public void addCreateObjectItemStates(final CreateObjectItemStateType param) {
      if (this.localCreateObjectItemStates == null) {
        this.localCreateObjectItemStates = new CreateObjectItemStateType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localCreateObjectItemStates);
      list.add(param);
      this.localCreateObjectItemStates =
          (CreateObjectItemStateType[]) list.toArray(new CreateObjectItemStateType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateObjectResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreateObjectResponseType",
              xmlWriter);
        }


      }

      if (this.localCreateObjectItemStates != null) {
        for (CreateObjectItemStateType localCreateObjectItemState : this.localCreateObjectItemStates) {
          if (localCreateObjectItemState != null) {
            localCreateObjectItemState
                .serialize(new javax.xml.namespace.QName("", "createObjectItemStates"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("createObjectItemStates cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("createObjectItemStates cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      if (this.localCreateObjectItemStates != null) {
        for (CreateObjectItemStateType localCreateObjectItemState : this.localCreateObjectItemStates) {

          if (localCreateObjectItemState != null) {
            elementList.add(new javax.xml.namespace.QName("", "createObjectItemStates"));
            elementList.add(localCreateObjectItemState);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("createObjectItemStates cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("createObjectItemStates cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateObjectResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateObjectResponseType object = new CreateObjectResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateObjectResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateObjectResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "createObjectItemStates").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(CreateObjectItemStateType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "createObjectItemStates").equals(reader.getName())) {
                  list1.add(CreateObjectItemStateType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object
                .setCreateObjectItemStates((CreateObjectItemStateType[]) org.apache.axis2.databinding.utils.ConverterUtil
                    .convertToArray(CreateObjectItemStateType.class, list1));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateObjectItemType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = CreateObjectItemType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for ObjName
     */


    protected java.lang.String localObjName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjName() {
      return this.localObjName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjName
     */
    public void setObjName(final java.lang.String param) {

      this.localObjName = param;


    }


    /**
     * field for ObjVariant
     */


    protected java.lang.String localObjVariant;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjVariant() {
      return this.localObjVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjVariant
     */
    public void setObjVariant(final java.lang.String param) {

      this.localObjVariant = param;


    }


    /**
     * field for ObjClass
     */


    protected java.lang.String localObjClass;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjClass() {
      return this.localObjClass;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjClass
     */
    public void setObjClass(final java.lang.String param) {

      this.localObjClass = param;


    }


    /**
     * field for ObjType
     */


    protected java.lang.String localObjType;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjType() {
      return this.localObjType;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjType
     */
    public void setObjType(final java.lang.String param) {

      this.localObjType = param;


    }


    /**
     * field for VersionAttrs This was an Array!
     */


    protected MapEntryType[] localVersionAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localVersionAttrsTracker = false;

    public boolean isVersionAttrsSpecified() {
      return this.localVersionAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getVersionAttrs() {
      return this.localVersionAttrs;
    }


    /**
     * validate the array for VersionAttrs
     */
    protected void validateVersionAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionAttrs
     */
    public void setVersionAttrs(final MapEntryType[] param) {

      validateVersionAttrs(param);

      this.localVersionAttrsTracker = param != null;

      this.localVersionAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addVersionAttrs(final MapEntryType param) {
      if (this.localVersionAttrs == null) {
        this.localVersionAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localVersionAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localVersionAttrs);
      list.add(param);
      this.localVersionAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * field for ElemAttrs This was an Array!
     */


    protected MapEntryType[] localElemAttrs;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localElemAttrsTracker = false;

    public boolean isElemAttrsSpecified() {
      return this.localElemAttrsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getElemAttrs() {
      return this.localElemAttrs;
    }


    /**
     * validate the array for ElemAttrs
     */
    protected void validateElemAttrs(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ElemAttrs
     */
    public void setElemAttrs(final MapEntryType[] param) {

      validateElemAttrs(param);

      this.localElemAttrsTracker = param != null;

      this.localElemAttrs = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addElemAttrs(final MapEntryType param) {
      if (this.localElemAttrs == null) {
        this.localElemAttrs = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localElemAttrsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localElemAttrs);
      list.add(param);
      this.localElemAttrs = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * field for VersionComment
     */


    protected java.lang.String localVersionComment;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localVersionCommentTracker = false;

    public boolean isVersionCommentSpecified() {
      return this.localVersionCommentTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionComment() {
      return this.localVersionComment;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionComment
     */
    public void setVersionComment(final java.lang.String param) {
      this.localVersionCommentTracker = param != null;

      this.localVersionComment = param;


    }


    /**
     * field for ElementComment
     */


    protected java.lang.String localElementComment;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localElementCommentTracker = false;

    public boolean isElementCommentSpecified() {
      return this.localElementCommentTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getElementComment() {
      return this.localElementComment;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ElementComment
     */
    public void setElementComment(final java.lang.String param) {
      this.localElementCommentTracker = param != null;

      this.localElementComment = param;


    }


    /**
     * field for KeepCheckedOut
     */


    protected boolean localKeepCheckedOut;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localKeepCheckedOutTracker = false;

    public boolean isKeepCheckedOutSpecified() {
      return this.localKeepCheckedOutTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getKeepCheckedOut() {
      return this.localKeepCheckedOut;
    }


    /**
     * Auto generated setter method
     * 
     * @param param KeepCheckedOut
     */
    public void setKeepCheckedOut(final boolean param) {

      // setting primitive attribute tracker to true
      this.localKeepCheckedOutTracker = true;

      this.localKeepCheckedOut = param;


    }


    /**
     * field for IsFileObject
     */


    protected boolean localIsFileObject;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsFileObject() {
      return this.localIsFileObject;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IsFileObject
     */
    public void setIsFileObject(final boolean param) {

      this.localIsFileObject = param;


    }


    /**
     * field for File
     */


    protected AttachmentType localFile;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localFileTracker = false;

    public boolean isFileSpecified() {
      return this.localFileTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttachmentType
     */
    public AttachmentType getFile() {
      return this.localFile;
    }


    /**
     * Auto generated setter method
     * 
     * @param param File
     */
    public void setFile(final AttachmentType param) {
      this.localFileTracker = param != null;

      this.localFile = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateObjectItemType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreateObjectItemType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "objName", xmlWriter);


      if (this.localObjName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objVariant", xmlWriter);


      if (this.localObjVariant == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjVariant);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objClass", xmlWriter);


      if (this.localObjClass == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjClass);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "objType", xmlWriter);


      if (this.localObjType == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("objType cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localObjType);

      }

      xmlWriter.writeEndElement();
      if (this.localVersionAttrsTracker) {
        if (this.localVersionAttrs != null) {
          for (MapEntryType localVersionAttr : this.localVersionAttrs) {
            if (localVersionAttr != null) {
              localVersionAttr.serialize(new javax.xml.namespace.QName("", "versionAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("versionAttrs cannot be null!!");

        }
      }
      if (this.localElemAttrsTracker) {
        if (this.localElemAttrs != null) {
          for (MapEntryType localElemAttr : this.localElemAttrs) {
            if (localElemAttr != null) {
              localElemAttr.serialize(new javax.xml.namespace.QName("", "elemAttrs"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("elemAttrs cannot be null!!");

        }
      }
      if (this.localVersionCommentTracker) {
        namespace = "";
        writeStartElement(null, namespace, "versionComment", xmlWriter);


        if (this.localVersionComment == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("versionComment cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localVersionComment);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localElementCommentTracker) {
        namespace = "";
        writeStartElement(null, namespace, "elementComment", xmlWriter);


        if (this.localElementComment == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("elementComment cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localElementComment);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localKeepCheckedOutTracker) {
        namespace = "";
        writeStartElement(null, namespace, "keepCheckedOut", xmlWriter);

        if (false) {

          throw new org.apache.axis2.databinding.ADBException("keepCheckedOut cannot be null!!");

        }
        else {
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(this.localKeepCheckedOut));
        }

        xmlWriter.writeEndElement();
      }
      namespace = "";
      writeStartElement(null, namespace, "isFileObject", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("isFileObject cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localIsFileObject));
      }

      xmlWriter.writeEndElement();
      if (this.localFileTracker) {
        if (this.localFile == null) {
          throw new org.apache.axis2.databinding.ADBException("file cannot be null!!");
        }
        this.localFile.serialize(new javax.xml.namespace.QName("", "file"), xmlWriter);
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "objName"));

      if (this.localObjName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objName cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objVariant"));

      if (this.localObjVariant != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjVariant));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objVariant cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objClass"));

      if (this.localObjClass != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjClass));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "objType"));

      if (this.localObjType != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjType));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("objType cannot be null!!");
      }
      if (this.localVersionAttrsTracker) {
        if (this.localVersionAttrs != null) {
          for (MapEntryType localVersionAttr : this.localVersionAttrs) {

            if (localVersionAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "versionAttrs"));
              elementList.add(localVersionAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("versionAttrs cannot be null!!");

        }

      }
      if (this.localElemAttrsTracker) {
        if (this.localElemAttrs != null) {
          for (MapEntryType localElemAttr : this.localElemAttrs) {

            if (localElemAttr != null) {
              elementList.add(new javax.xml.namespace.QName("", "elemAttrs"));
              elementList.add(localElemAttr);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("elemAttrs cannot be null!!");

        }

      }
      if (this.localVersionCommentTracker) {
        elementList.add(new javax.xml.namespace.QName("", "versionComment"));

        if (this.localVersionComment != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionComment));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("versionComment cannot be null!!");
        }
      }
      if (this.localElementCommentTracker) {
        elementList.add(new javax.xml.namespace.QName("", "elementComment"));

        if (this.localElementComment != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localElementComment));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("elementComment cannot be null!!");
        }
      }
      if (this.localKeepCheckedOutTracker) {
        elementList.add(new javax.xml.namespace.QName("", "keepCheckedOut"));

        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localKeepCheckedOut));
      }
      elementList.add(new javax.xml.namespace.QName("", "isFileObject"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIsFileObject));
      if (this.localFileTracker) {
        elementList.add(new javax.xml.namespace.QName("", "file"));


        if (this.localFile == null) {
          throw new org.apache.axis2.databinding.ADBException("file cannot be null!!");
        }
        elementList.add(this.localFile);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateObjectItemType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateObjectItemType object = new CreateObjectItemType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateObjectItemType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateObjectItemType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list5 = new java.util.ArrayList();

          java.util.ArrayList list6 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objVariant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objVariant" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objClass").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objClass" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjClass(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objType").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objType" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list5.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone5 = false;
            while (!loopDone5) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone5 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "versionAttrs").equals(reader.getName())) {
                  list5.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone5 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setVersionAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list5));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "elemAttrs").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list6.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone6 = false;
            while (!loopDone6) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone6 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "elemAttrs").equals(reader.getName())) {
                  list6.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone6 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setElemAttrs((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list6));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionComment").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionComment"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionComment(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "elementComment").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "elementComment"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setElementComment(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "keepCheckedOut").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "keepCheckedOut"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setKeepCheckedOut(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "isFileObject").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "isFileObject" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setIsFileObject(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "file").equals(reader.getName())) {

            object.setFile(AttachmentType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateDSTRevisionRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateDSTRevisionRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for SrcDstVersion
     */


    protected java.lang.String localSrcDstVersion;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSrcDstVersion() {
      return this.localSrcDstVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SrcDstVersion
     */
    public void setSrcDstVersion(final java.lang.String param) {

      this.localSrcDstVersion = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateDSTRevisionRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreateDSTRevisionRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "srcDstVersion", xmlWriter);


      if (this.localSrcDstVersion == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("srcDstVersion cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSrcDstVersion);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "srcDstVersion"));

      if (this.localSrcDstVersion != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSrcDstVersion));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("srcDstVersion cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateDSTRevisionRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateDSTRevisionRequestType object = new CreateDSTRevisionRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateDSTRevisionRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateDSTRevisionRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "srcDstVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "srcDstVersion"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSrcDstVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ValueSystemState_type0 implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("",
        "valueSystemState_type0", "");


    /**
     * field for ValueSystemState_type0
     */


    protected java.lang.String localValueSystemState_type0;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected ValueSystemState_type0(final java.lang.String value, final boolean isRegisterValue) {
      this.localValueSystemState_type0 = value;
      if (isRegisterValue) {

        _table_.put(this.localValueSystemState_type0, this);

      }

    }

    public static final java.lang.String _INITIAL = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("INITIAL");

    public static final java.lang.String _NEW = org.apache.axis2.databinding.utils.ConverterUtil.convertToString("NEW");

    public static final java.lang.String _CHANGED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CHANGED");

    public static final java.lang.String _DELETED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("DELETED");

    public static final ValueSystemState_type0 INITIAL = new ValueSystemState_type0(_INITIAL, true);

    public static final ValueSystemState_type0 NEW = new ValueSystemState_type0(_NEW, true);

    public static final ValueSystemState_type0 CHANGED = new ValueSystemState_type0(_CHANGED, true);

    public static final ValueSystemState_type0 DELETED = new ValueSystemState_type0(_DELETED, true);


    public java.lang.String getValue() {
      return this.localValueSystemState_type0;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localValueSystemState_type0.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":valueSystemState_type0", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "valueSystemState_type0",
              xmlWriter);
        }
      }

      if (this.localValueSystemState_type0 == null) {

        throw new org.apache.axis2.databinding.ADBException("valueSystemState_type0 cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localValueSystemState_type0);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("")) {
        return "";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localValueSystemState_type0) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static ValueSystemState_type0 fromValue(final java.lang.String value)
          throws java.lang.IllegalArgumentException {
        ValueSystemState_type0 enumeration = (ValueSystemState_type0)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static ValueSystemState_type0 fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static ValueSystemState_type0 fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return ValueSystemState_type0.Factory.fromString(content, namespaceUri);
        }
        else {
          return ValueSystemState_type0.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ValueSystemState_type0 parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ValueSystemState_type0 object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "valueSystemState_type0"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = ValueSystemState_type0.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = ValueSystemState_type0.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RemoveFromContainerResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RemoveFromContainerResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RemoveFromContainerResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "RemoveFromContainerResponseType",
              xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RemoveFromContainerResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RemoveFromContainerResponseType object = new RemoveFromContainerResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RemoveFromContainerResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RemoveFromContainerResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class InsertIntoContainerItemType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = InsertIntoContainerItemType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for ContainerVersionNo
     */


    protected java.lang.String localContainerVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContainerVersionNo() {
      return this.localContainerVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ContainerVersionNo
     */
    public void setContainerVersionNo(final java.lang.String param) {

      this.localContainerVersionNo = param;


    }


    /**
     * field for InsertedObjects This was an Array!
     */


    protected InsertedObject[] localInsertedObjects;


    /**
     * Auto generated getter method
     * 
     * @return InsertedObject[]
     */
    public InsertedObject[] getInsertedObjects() {
      return this.localInsertedObjects;
    }


    /**
     * validate the array for InsertedObjects
     */
    protected void validateInsertedObjects(final InsertedObject[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param InsertedObjects
     */
    public void setInsertedObjects(final InsertedObject[] param) {

      validateInsertedObjects(param);


      this.localInsertedObjects = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param InsertedObject
     */
    public void addInsertedObjects(final InsertedObject param) {
      if (this.localInsertedObjects == null) {
        this.localInsertedObjects = new InsertedObject[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localInsertedObjects);
      list.add(param);
      this.localInsertedObjects = (InsertedObject[]) list.toArray(new InsertedObject[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":InsertIntoContainerItemType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "InsertIntoContainerItemType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "containerVersionNo", xmlWriter);


      if (this.localContainerVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("containerVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContainerVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localInsertedObjects != null) {
        for (InsertedObject localInsertedObject : this.localInsertedObjects) {
          if (localInsertedObject != null) {
            localInsertedObject.serialize(new javax.xml.namespace.QName("", "insertedObjects"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("insertedObjects cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("insertedObjects cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "containerVersionNo"));

      if (this.localContainerVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContainerVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("containerVersionNo cannot be null!!");
      }

      if (this.localInsertedObjects != null) {
        for (InsertedObject localInsertedObject : this.localInsertedObjects) {

          if (localInsertedObject != null) {
            elementList.add(new javax.xml.namespace.QName("", "insertedObjects"));
            elementList.add(localInsertedObject);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("insertedObjects cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("insertedObjects cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static InsertIntoContainerItemType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        InsertIntoContainerItemType object = new InsertIntoContainerItemType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"InsertIntoContainerItemType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (InsertIntoContainerItemType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "containerVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "containerVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContainerVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "insertedObjects").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(InsertedObject.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "insertedObjects").equals(reader.getName())) {
                  list2.add(InsertedObject.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setInsertedObjects((InsertedObject[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(InsertedObject.class, list2));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class FetchArtifactRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "FetchArtifactRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":FetchArtifactRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "FetchArtifactRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static FetchArtifactRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        FetchArtifactRequestType object = new FetchArtifactRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"FetchArtifactRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (FetchArtifactRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SearchContentRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SearchContentRequestType", "ns1");


    /**
     * field for GroupNo
     */


    protected java.lang.String localGroupNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getGroupNo() {
      return this.localGroupNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param GroupNo
     */
    public void setGroupNo(final java.lang.String param) {

      this.localGroupNo = param;


    }


    /**
     * field for ObjClass
     */


    protected java.lang.String localObjClass;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localObjClassTracker = false;

    public boolean isObjClassSpecified() {
      return this.localObjClassTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getObjClass() {
      return this.localObjClass;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ObjClass
     */
    public void setObjClass(final java.lang.String param) {
      this.localObjClassTracker = param != null;

      this.localObjClass = param;


    }


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SearchContentRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SearchContentRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "groupNo", xmlWriter);


      if (this.localGroupNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("groupNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localGroupNo);

      }

      xmlWriter.writeEndElement();
      if (this.localObjClassTracker) {
        namespace = "";
        writeStartElement(null, namespace, "objClass", xmlWriter);


        if (this.localObjClass == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localObjClass);

        }

        xmlWriter.writeEndElement();
      }
      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "groupNo"));

      if (this.localGroupNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localGroupNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("groupNo cannot be null!!");
      }
      if (this.localObjClassTracker) {
        elementList.add(new javax.xml.namespace.QName("", "objClass"));

        if (this.localObjClass != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localObjClass));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("objClass cannot be null!!");
        }
      }
      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SearchContentRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SearchContentRequestType object = new SearchContentRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SearchContentRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SearchContentRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "groupNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "groupNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setGroupNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "objClass").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "objClass" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setObjClass(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteProductAttributesAndValuesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DeleteProductAttributesAndValuesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * field for ValuesArr This was an Array!
     */


    protected java.lang.String[] localValuesArr;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localValuesArrTracker = false;

    public boolean isValuesArrSpecified() {
      return this.localValuesArrTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getValuesArr() {
      return this.localValuesArr;
    }


    /**
     * validate the array for ValuesArr
     */
    protected void validateValuesArr(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ValuesArr
     */
    public void setValuesArr(final java.lang.String[] param) {

      validateValuesArr(param);

      this.localValuesArrTracker = param != null;

      this.localValuesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addValuesArr(final java.lang.String param) {
      if (this.localValuesArr == null) {
        this.localValuesArr = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localValuesArrTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localValuesArr);
      list.add(param);
      this.localValuesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteProductAttributesAndValuesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "DeleteProductAttributesAndValuesRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          namespace = "";
          for (String element : this.localValuesArr) {

            if (element != null) {

              writeStartElement(null, namespace, "valuesArr", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          for (String element : this.localValuesArr) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "valuesArr"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteProductAttributesAndValuesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteProductAttributesAndValuesRequestType object = new DeleteProductAttributesAndValuesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteProductAttributesAndValuesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteProductAttributesAndValuesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {
                  list3.add(reader.getElementText());

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setValuesArr((java.lang.String[]) list3.toArray(new java.lang.String[list3.size()]));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetLifecycleStateResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetLifecycleStateResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetLifecycleStateResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetLifecycleStateResponseType",
              xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetLifecycleStateResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetLifecycleStateResponseType object = new SetLifecycleStateResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetLifecycleStateResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetLifecycleStateResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreatePRDRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreatePRDRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ElementName
     */


    protected java.lang.String localElementName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getElementName() {
      return this.localElementName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ElementName
     */
    public void setElementName(final java.lang.String param) {

      this.localElementName = param;


    }


    /**
     * field for Variant
     */


    protected java.lang.String localVariant;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVariant() {
      return this.localVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Variant
     */
    public void setVariant(final java.lang.String param) {

      this.localVariant = param;


    }


    /**
     * field for Comment
     */


    protected java.lang.String localComment;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localCommentTracker = false;

    public boolean isCommentSpecified() {
      return this.localCommentTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getComment() {
      return this.localComment;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Comment
     */
    public void setComment(final java.lang.String param) {
      this.localCommentTracker = param != null;

      this.localComment = param;


    }


    /**
     * field for Description
     */


    protected java.lang.String localDescription;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localDescriptionTracker = false;

    public boolean isDescriptionSpecified() {
      return this.localDescriptionTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getDescription() {
      return this.localDescription;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Description
     */
    public void setDescription(final java.lang.String param) {
      this.localDescriptionTracker = param != null;

      this.localDescription = param;


    }


    /**
     * field for AssignmentXML
     */


    protected java.lang.String localAssignmentXML;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localAssignmentXMLTracker = false;

    public boolean isAssignmentXMLSpecified() {
      return this.localAssignmentXMLTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAssignmentXML() {
      return this.localAssignmentXML;
    }


    /**
     * Auto generated setter method
     * 
     * @param param AssignmentXML
     */
    public void setAssignmentXML(final java.lang.String param) {
      this.localAssignmentXMLTracker = param != null;

      this.localAssignmentXML = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreatePRDRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreatePRDRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "elementName", xmlWriter);


      if (this.localElementName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("elementName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localElementName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "variant", xmlWriter);


      if (this.localVariant == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("variant cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVariant);

      }

      xmlWriter.writeEndElement();
      if (this.localCommentTracker) {
        namespace = "";
        writeStartElement(null, namespace, "comment", xmlWriter);


        if (this.localComment == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("comment cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localComment);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localDescriptionTracker) {
        namespace = "";
        writeStartElement(null, namespace, "description", xmlWriter);


        if (this.localDescription == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("description cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localDescription);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localAssignmentXMLTracker) {
        namespace = "";
        writeStartElement(null, namespace, "assignmentXML", xmlWriter);


        if (this.localAssignmentXML == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("assignmentXML cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localAssignmentXML);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "elementName"));

      if (this.localElementName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localElementName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("elementName cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "variant"));

      if (this.localVariant != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVariant));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("variant cannot be null!!");
      }
      if (this.localCommentTracker) {
        elementList.add(new javax.xml.namespace.QName("", "comment"));

        if (this.localComment != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localComment));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("comment cannot be null!!");
        }
      }
      if (this.localDescriptionTracker) {
        elementList.add(new javax.xml.namespace.QName("", "description"));

        if (this.localDescription != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localDescription));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("description cannot be null!!");
        }
      }
      if (this.localAssignmentXMLTracker) {
        elementList.add(new javax.xml.namespace.QName("", "assignmentXML"));

        if (this.localAssignmentXML != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localAssignmentXML));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("assignmentXML cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreatePRDRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreatePRDRequestType object = new CreatePRDRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreatePRDRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreatePRDRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "elementName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "elementName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setElementName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "variant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "variant" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "comment").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "comment" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setComment(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "description").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "description" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "assignmentXML").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "assignmentXML"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setAssignmentXML(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProgramKeyPropertiesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProgramKeyPropertiesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for DstVersions This was an Array!
     */


    protected java.lang.String[] localDstVersions;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localDstVersionsTracker = false;

    public boolean isDstVersionsSpecified() {
      return this.localDstVersionsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getDstVersions() {
      return this.localDstVersions;
    }


    /**
     * validate the array for DstVersions
     */
    protected void validateDstVersions(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param DstVersions
     */
    public void setDstVersions(final java.lang.String[] param) {

      validateDstVersions(param);

      this.localDstVersionsTracker = param != null;

      this.localDstVersions = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addDstVersions(final java.lang.String param) {
      if (this.localDstVersions == null) {
        this.localDstVersions = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localDstVersionsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localDstVersions);
      list.add(param);
      this.localDstVersions = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * field for PrjVersion
     */


    protected java.lang.String localPrjVersion;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localPrjVersionTracker = false;

    public boolean isPrjVersionSpecified() {
      return this.localPrjVersionTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getPrjVersion() {
      return this.localPrjVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PrjVersion
     */
    public void setPrjVersion(final java.lang.String param) {
      this.localPrjVersionTracker = param != null;

      this.localPrjVersion = param;


    }


    /**
     * field for ProgramKeys This was an Array!
     */


    protected java.lang.String[] localProgramKeys;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localProgramKeysTracker = false;

    public boolean isProgramKeysSpecified() {
      return this.localProgramKeysTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getProgramKeys() {
      return this.localProgramKeys;
    }


    /**
     * validate the array for ProgramKeys
     */
    protected void validateProgramKeys(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ProgramKeys
     */
    public void setProgramKeys(final java.lang.String[] param) {

      validateProgramKeys(param);

      this.localProgramKeysTracker = param != null;

      this.localProgramKeys = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addProgramKeys(final java.lang.String param) {
      if (this.localProgramKeys == null) {
        this.localProgramKeys = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localProgramKeysTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localProgramKeys);
      list.add(param);
      this.localProgramKeys = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProgramKeyPropertiesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetProgramKeyPropertiesRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();
      if (this.localDstVersionsTracker) {
        if (this.localDstVersions != null) {
          namespace = "";
          for (String localDstVersion : this.localDstVersions) {

            if (localDstVersion != null) {

              writeStartElement(null, namespace, "dstVersions", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localDstVersion));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

        }

      }
      if (this.localPrjVersionTracker) {
        namespace = "";
        writeStartElement(null, namespace, "prjVersion", xmlWriter);


        if (this.localPrjVersion == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("prjVersion cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localPrjVersion);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localProgramKeysTracker) {
        if (this.localProgramKeys != null) {
          namespace = "";
          for (String localProgramKey : this.localProgramKeys) {

            if (localProgramKey != null) {

              writeStartElement(null, namespace, "programKeys", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localProgramKey));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("programKeys cannot be null!!");

        }

      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }
      if (this.localDstVersionsTracker) {
        if (this.localDstVersions != null) {
          for (String localDstVersion : this.localDstVersions) {

            if (localDstVersion != null) {
              elementList.add(new javax.xml.namespace.QName("", "dstVersions"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDstVersion));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

        }

      }
      if (this.localPrjVersionTracker) {
        elementList.add(new javax.xml.namespace.QName("", "prjVersion"));

        if (this.localPrjVersion != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPrjVersion));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("prjVersion cannot be null!!");
        }
      }
      if (this.localProgramKeysTracker) {
        if (this.localProgramKeys != null) {
          for (String localProgramKey : this.localProgramKeys) {

            if (localProgramKey != null) {
              elementList.add(new javax.xml.namespace.QName("", "programKeys"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localProgramKey));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("programKeys cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProgramKeyPropertiesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProgramKeyPropertiesRequestType object = new GetProgramKeyPropertiesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProgramKeyPropertiesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProgramKeyPropertiesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();

          java.util.ArrayList list4 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "dstVersions").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "dstVersions").equals(reader.getName())) {
                  list2.add(reader.getElementText());

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setDstVersions((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "prjVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "prjVersion" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPrjVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "programKeys").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list4.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone4 = false;
            while (!loopDone4) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone4 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "programKeys").equals(reader.getName())) {
                  list4.add(reader.getElementText());

                }
                else {
                  loopDone4 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setProgramKeys((java.lang.String[]) list4.toArray(new java.lang.String[list4.size()]));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreateProgramKeyRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreateProgramKeyRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * field for PstVersionNo
     */


    protected java.lang.String localPstVersionNo;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localPstVersionNoTracker = false;

    public boolean isPstVersionNoSpecified() {
      return this.localPstVersionNoTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getPstVersionNo() {
      return this.localPstVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PstVersionNo
     */
    public void setPstVersionNo(final java.lang.String param) {
      this.localPstVersionNoTracker = param != null;

      this.localPstVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreateProgramKeyRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreateProgramKeyRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();
      if (this.localPstVersionNoTracker) {
        namespace = "";
        writeStartElement(null, namespace, "pstVersionNo", xmlWriter);


        if (this.localPstVersionNo == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("pstVersionNo cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localPstVersionNo);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }
      if (this.localPstVersionNoTracker) {
        elementList.add(new javax.xml.namespace.QName("", "pstVersionNo"));

        if (this.localPstVersionNo != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPstVersionNo));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("pstVersionNo cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreateProgramKeyRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreateProgramKeyRequestType object = new CreateProgramKeyRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreateProgramKeyRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreateProgramKeyRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "pstVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "pstVersionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPstVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DoDocuDeliveryRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DoDocuDeliveryRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for DstVersion
     */


    protected java.lang.String localDstVersion;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getDstVersion() {
      return this.localDstVersion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param DstVersion
     */
    public void setDstVersion(final java.lang.String param) {

      this.localDstVersion = param;


    }


    /**
     * field for DocuFiles This was an Array!
     */


    protected NFOCreationInfoType[] localDocuFiles;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localDocuFilesTracker = false;

    public boolean isDocuFilesSpecified() {
      return this.localDocuFilesTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return NFOCreationInfoType[]
     */
    public NFOCreationInfoType[] getDocuFiles() {
      return this.localDocuFiles;
    }


    /**
     * validate the array for DocuFiles
     */
    protected void validateDocuFiles(final NFOCreationInfoType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param DocuFiles
     */
    public void setDocuFiles(final NFOCreationInfoType[] param) {

      validateDocuFiles(param);

      this.localDocuFilesTracker = param != null;

      this.localDocuFiles = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param NFOCreationInfoType
     */
    public void addDocuFiles(final NFOCreationInfoType param) {
      if (this.localDocuFiles == null) {
        this.localDocuFiles = new NFOCreationInfoType[] {};
      }


      // update the setting tracker
      this.localDocuFilesTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localDocuFiles);
      list.add(param);
      this.localDocuFiles = (NFOCreationInfoType[]) list.toArray(new NFOCreationInfoType[list.size()]);

    }


    /**
     * field for DocuObjects This was an Array!
     */


    protected NFOReferenceInfoType[] localDocuObjects;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localDocuObjectsTracker = false;

    public boolean isDocuObjectsSpecified() {
      return this.localDocuObjectsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return NFOReferenceInfoType[]
     */
    public NFOReferenceInfoType[] getDocuObjects() {
      return this.localDocuObjects;
    }


    /**
     * validate the array for DocuObjects
     */
    protected void validateDocuObjects(final NFOReferenceInfoType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param DocuObjects
     */
    public void setDocuObjects(final NFOReferenceInfoType[] param) {

      validateDocuObjects(param);

      this.localDocuObjectsTracker = param != null;

      this.localDocuObjects = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param NFOReferenceInfoType
     */
    public void addDocuObjects(final NFOReferenceInfoType param) {
      if (this.localDocuObjects == null) {
        this.localDocuObjects = new NFOReferenceInfoType[] {};
      }


      // update the setting tracker
      this.localDocuObjectsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localDocuObjects);
      list.add(param);
      this.localDocuObjects = (NFOReferenceInfoType[]) list.toArray(new NFOReferenceInfoType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DoDocuDeliveryRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DoDocuDeliveryRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "dstVersion", xmlWriter);


      if (this.localDstVersion == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("dstVersion cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localDstVersion);

      }

      xmlWriter.writeEndElement();
      if (this.localDocuFilesTracker) {
        if (this.localDocuFiles != null) {
          for (NFOCreationInfoType localDocuFile : this.localDocuFiles) {
            if (localDocuFile != null) {
              localDocuFile.serialize(new javax.xml.namespace.QName("", "docuFiles"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("docuFiles cannot be null!!");

        }
      }
      if (this.localDocuObjectsTracker) {
        if (this.localDocuObjects != null) {
          for (NFOReferenceInfoType localDocuObject : this.localDocuObjects) {
            if (localDocuObject != null) {
              localDocuObject.serialize(new javax.xml.namespace.QName("", "docuObjects"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("docuObjects cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "dstVersion"));

      if (this.localDstVersion != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localDstVersion));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("dstVersion cannot be null!!");
      }
      if (this.localDocuFilesTracker) {
        if (this.localDocuFiles != null) {
          for (NFOCreationInfoType localDocuFile : this.localDocuFiles) {

            if (localDocuFile != null) {
              elementList.add(new javax.xml.namespace.QName("", "docuFiles"));
              elementList.add(localDocuFile);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("docuFiles cannot be null!!");

        }

      }
      if (this.localDocuObjectsTracker) {
        if (this.localDocuObjects != null) {
          for (NFOReferenceInfoType localDocuObject : this.localDocuObjects) {

            if (localDocuObject != null) {
              elementList.add(new javax.xml.namespace.QName("", "docuObjects"));
              elementList.add(localDocuObject);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("docuObjects cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DoDocuDeliveryRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DoDocuDeliveryRequestType object = new DoDocuDeliveryRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DoDocuDeliveryRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DoDocuDeliveryRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();

          java.util.ArrayList list4 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "dstVersion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "dstVersion" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setDstVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "docuFiles").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(NFOCreationInfoType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "docuFiles").equals(reader.getName())) {
                  list3.add(NFOCreationInfoType.Factory.parse(reader));

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setDocuFiles((NFOCreationInfoType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(NFOCreationInfoType.class, list3));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "docuObjects").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list4.add(NFOReferenceInfoType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone4 = false;
            while (!loopDone4) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone4 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "docuObjects").equals(reader.getName())) {
                  list4.add(NFOReferenceInfoType.Factory.parse(reader));

                }
                else {
                  loopDone4 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setDocuObjects((NFOReferenceInfoType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(NFOReferenceInfoType.class, list4));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameProductAttributeValuesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameProductAttributeValuesResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameProductAttributeValuesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameProductAttributeValuesResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameProductAttributeValuesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameProductAttributeValuesResponseType object = new RenameProductAttributeValuesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameProductAttributeValuesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameProductAttributeValuesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProgramKeysRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProgramKeysRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for NamesArr This was an Array!
     */


    protected java.lang.String[] localNamesArr;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNamesArrTracker = false;

    public boolean isNamesArrSpecified() {
      return this.localNamesArrTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getNamesArr() {
      return this.localNamesArr;
    }


    /**
     * validate the array for NamesArr
     */
    protected void validateNamesArr(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param NamesArr
     */
    public void setNamesArr(final java.lang.String[] param) {

      validateNamesArr(param);

      this.localNamesArrTracker = param != null;

      this.localNamesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addNamesArr(final java.lang.String param) {
      if (this.localNamesArr == null) {
        this.localNamesArr = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localNamesArrTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localNamesArr);
      list.add(param);
      this.localNamesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProgramKeysRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetProgramKeysRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();
      if (this.localNamesArrTracker) {
        if (this.localNamesArr != null) {
          namespace = "";
          for (String element : this.localNamesArr) {

            if (element != null) {

              writeStartElement(null, namespace, "namesArr", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

        }

      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }
      if (this.localNamesArrTracker) {
        if (this.localNamesArr != null) {
          for (String element : this.localNamesArr) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "namesArr"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProgramKeysRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProgramKeysRequestType object = new GetProgramKeysRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProgramKeysRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProgramKeysRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {
                  list3.add(reader.getElementText());

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setNamesArr((java.lang.String[]) list3.toArray(new java.lang.String[list3.size()]));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteProgramKeysRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DeleteProgramKeysRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for NamesArr This was an Array!
     */


    protected java.lang.String[] localNamesArr;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getNamesArr() {
      return this.localNamesArr;
    }


    /**
     * validate the array for NamesArr
     */
    protected void validateNamesArr(final java.lang.String[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param NamesArr
     */
    public void setNamesArr(final java.lang.String[] param) {

      validateNamesArr(param);


      this.localNamesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addNamesArr(final java.lang.String param) {
      if (this.localNamesArr == null) {
        this.localNamesArr = new java.lang.String[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localNamesArr);
      list.add(param);
      this.localNamesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteProgramKeysRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DeleteProgramKeysRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localNamesArr != null) {
        namespace = "";
        for (String element : this.localNamesArr) {

          if (element != null) {

            writeStartElement(null, namespace, "namesArr", xmlWriter);


            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

            xmlWriter.writeEndElement();

          }
          else {

            throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

      }


      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      if (this.localNamesArr != null) {
        for (String element : this.localNamesArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "namesArr"));
            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

          }


        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteProgramKeysRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteProgramKeysRequestType object = new DeleteProgramKeysRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteProgramKeysRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteProgramKeysRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {
                  list3.add(reader.getElementText());

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setNamesArr((java.lang.String[]) list3.toArray(new java.lang.String[list3.size()]));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckInPureHexDSTRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CheckInPureHexDSTRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for DstVersions This was an Array!
     */


    protected java.lang.String[] localDstVersions;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getDstVersions() {
      return this.localDstVersions;
    }


    /**
     * validate the array for DstVersions
     */
    protected void validateDstVersions(final java.lang.String[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param DstVersions
     */
    public void setDstVersions(final java.lang.String[] param) {

      validateDstVersions(param);


      this.localDstVersions = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addDstVersions(final java.lang.String param) {
      if (this.localDstVersions == null) {
        this.localDstVersions = new java.lang.String[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localDstVersions);
      list.add(param);
      this.localDstVersions = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckInPureHexDSTRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckInPureHexDSTRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localDstVersions != null) {
        namespace = "";
        for (String localDstVersion : this.localDstVersions) {

          if (localDstVersion != null) {

            writeStartElement(null, namespace, "dstVersions", xmlWriter);


            xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDstVersion));

            xmlWriter.writeEndElement();

          }
          else {

            throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

      }


      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localDstVersions != null) {
        for (String localDstVersion : this.localDstVersions) {

          if (localDstVersion != null) {
            elementList.add(new javax.xml.namespace.QName("", "dstVersions"));
            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDstVersion));
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

          }


        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckInPureHexDSTRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CheckInPureHexDSTRequestType object = new CheckInPureHexDSTRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckInPureHexDSTRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckInPureHexDSTRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "dstVersions").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "dstVersions").equals(reader.getName())) {
                  list2.add(reader.getElementText());

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setDstVersions((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ValueCompressionRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ValueCompressionRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for DstVersions This was an Array!
     */


    protected java.lang.String[] localDstVersions;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getDstVersions() {
      return this.localDstVersions;
    }


    /**
     * validate the array for DstVersions
     */
    protected void validateDstVersions(final java.lang.String[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param DstVersions
     */
    public void setDstVersions(final java.lang.String[] param) {

      validateDstVersions(param);


      this.localDstVersions = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addDstVersions(final java.lang.String param) {
      if (this.localDstVersions == null) {
        this.localDstVersions = new java.lang.String[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localDstVersions);
      list.add(param);
      this.localDstVersions = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ValueCompressionRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ValueCompressionRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localDstVersions != null) {
        namespace = "";
        for (String localDstVersion : this.localDstVersions) {

          if (localDstVersion != null) {

            writeStartElement(null, namespace, "dstVersions", xmlWriter);


            xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDstVersion));

            xmlWriter.writeEndElement();

          }
          else {

            throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

      }


      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localDstVersions != null) {
        for (String localDstVersion : this.localDstVersions) {

          if (localDstVersion != null) {
            elementList.add(new javax.xml.namespace.QName("", "dstVersions"));
            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDstVersion));
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

          }


        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("dstVersions cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ValueCompressionRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ValueCompressionRequestType object = new ValueCompressionRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ValueCompressionRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ValueCompressionRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "dstVersions").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "dstVersions").equals(reader.getName())) {
                  list2.add(reader.getElementText());

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setDstVersions((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProductKeyAttributeValuesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProductKeyAttributeValuesResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected AttrMapEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final AttrMapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final AttrMapEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addReturnValue(final AttrMapEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new AttrMapEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProductKeyAttributeValuesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetProductKeyAttributeValuesResponseType", xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProductKeyAttributeValuesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProductKeyAttributeValuesResponseType object = new GetProductKeyAttributeValuesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProductKeyAttributeValuesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProductKeyAttributeValuesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class Base64Binary implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = base64Binary Namespace URI =
     * http://www.w3.org/2005/05/xmlmime Namespace Prefix = ns2
     */


    /**
     * field for Base64Binary
     */


    protected javax.activation.DataHandler localBase64Binary;


    /**
     * Auto generated getter method
     * 
     * @return javax.activation.DataHandler
     */
    public javax.activation.DataHandler getBase64Binary() {
      return this.localBase64Binary;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Base64Binary
     */
    public void setBase64Binary(final javax.activation.DataHandler param) {

      this.localBase64Binary = param;


    }


    @Override
    public java.lang.String toString() {

      return this.localBase64Binary.toString();

    }


    /**
     * field for ContentType This was an Attribute!
     */


    protected ContentType_type0 localContentType;


    /**
     * Auto generated getter method
     * 
     * @return ContentType_type0
     */
    public ContentType_type0 getContentType() {
      return this.localContentType;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ContentType
     */
    public void setContentType(final ContentType_type0 param) {

      this.localContentType = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://www.w3.org/2005/05/xmlmime");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix + ":base64Binary",
              xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "base64Binary", xmlWriter);
        }


      }


      if (this.localContentType != null) {
        writeAttribute("http://www.w3.org/2005/05/xmlmime", "contentType", this.localContentType.toString(), xmlWriter);
      }


      if (this.localBase64Binary != null) {
        try {
          org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter, this.localBase64Binary, null,
              true);
        }
        catch (java.io.IOException ex) {
          throw new javax.xml.stream.XMLStreamException("Unable to read data handler for base64Binary", ex);
        }
      }
      else {

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://www.w3.org/2005/05/xmlmime")) {
        return "ns2";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT);

      elementList.add(this.localBase64Binary);

      attribList.add(new javax.xml.namespace.QName("http://www.w3.org/2005/05/xmlmime", "contentType"));

      attribList.add(this.localContentType.toString());


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static Base64Binary fromString(final java.lang.String value, final java.lang.String namespaceURI) {
        Base64Binary returnValue = new Base64Binary();

        returnValue.setBase64Binary(org.apache.axis2.databinding.utils.ConverterUtil.convertToBase64Binary(value));


        return returnValue;
      }

      public static Base64Binary fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return Base64Binary.Factory.fromString(content, namespaceUri);
        }
        else {
          return Base64Binary.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static Base64Binary parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        Base64Binary object = new Base64Binary();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"base64Binary".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (Base64Binary) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          // handle attribute "contentType"
          java.lang.String tempAttribContentType =

          reader.getAttributeValue("http://www.w3.org/2005/05/xmlmime", "contentType");

          if (tempAttribContentType != null) {
            java.lang.String content = tempAttribContentType;

            object.setContentType(ContentType_type0.Factory.fromString(reader, tempAttribContentType));

          }
          else {

          }
          handledAttributes.add("contentType");

          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              if (reader.isStartElement() || reader.hasText()) {

                object.setBase64Binary(org.apache.axiom.util.stax.XMLStreamReaderUtils
                    .getDataHandlerFromElement(reader));

              } // End of if for expected property start element

              else {
                // A start element we are not expecting indicates an invalid parameter was passed
                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
              }

            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class QualityDataMigrationResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "QualityDataMigrationResponseType", "ns1");


    /**
     * field for ReturnValue
     */


    protected boolean localReturnValue;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final boolean param) {

      this.localReturnValue = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":QualityDataMigrationResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "QualityDataMigrationResponseType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "returnValue", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localReturnValue));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "returnValue"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localReturnValue));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static QualityDataMigrationResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        QualityDataMigrationResponseType object = new QualityDataMigrationResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"QualityDataMigrationResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (QualityDataMigrationResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "returnValue" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setReturnValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ValidationStateType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ValidationStateType", "ns1");


    /**
     * field for ValidationStateType
     */


    protected java.lang.String localValidationStateType;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected ValidationStateType(final java.lang.String value, final boolean isRegisterValue) {
      this.localValidationStateType = value;
      if (isRegisterValue) {

        _table_.put(this.localValidationStateType, this);

      }

    }

    public static final java.lang.String _OK = org.apache.axis2.databinding.utils.ConverterUtil.convertToString("OK");

    public static final java.lang.String _RESTRICTED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("RESTRICTED");

    public static final java.lang.String _ERROR = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("ERROR");

    public static final ValidationStateType OK = new ValidationStateType(_OK, true);

    public static final ValidationStateType RESTRICTED = new ValidationStateType(_RESTRICTED, true);

    public static final ValidationStateType ERROR = new ValidationStateType(_ERROR, true);


    public java.lang.String getValue() {
      return this.localValidationStateType;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localValidationStateType.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ValidationStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ValidationStateType", xmlWriter);
        }
      }

      if (this.localValidationStateType == null) {

        throw new org.apache.axis2.databinding.ADBException("ValidationStateType cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localValidationStateType);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localValidationStateType) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static ValidationStateType fromValue(final java.lang.String value)
          throws java.lang.IllegalArgumentException {
        ValidationStateType enumeration = (ValidationStateType)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static ValidationStateType fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static ValidationStateType fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return ValidationStateType.Factory.fromString(content, namespaceUri);
        }
        else {
          return ValidationStateType.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ValidationStateType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ValidationStateType object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "ValidationStateType"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = ValidationStateType.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = ValidationStateType.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class AttachmentType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = AttachmentType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for BinaryData
     */


    protected Base64Binary localBinaryData;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localBinaryDataTracker = false;

    public boolean isBinaryDataSpecified() {
      return this.localBinaryDataTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return Base64Binary
     */
    public Base64Binary getBinaryData() {
      return this.localBinaryData;
    }


    /**
     * Auto generated setter method
     * 
     * @param param BinaryData
     */
    public void setBinaryData(final Base64Binary param) {
      this.localBinaryDataTracker = param != null;

      this.localBinaryData = param;


    }


    /**
     * field for FileName
     */


    protected java.lang.String localFileName;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localFileNameTracker = false;

    public boolean isFileNameSpecified() {
      return this.localFileNameTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getFileName() {
      return this.localFileName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param FileName
     */
    public void setFileName(final java.lang.String param) {
      this.localFileNameTracker = param != null;

      this.localFileName = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":AttachmentType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "AttachmentType", xmlWriter);
        }


      }
      if (this.localBinaryDataTracker) {
        if (this.localBinaryData == null) {
          throw new org.apache.axis2.databinding.ADBException("binaryData cannot be null!!");
        }
        this.localBinaryData.serialize(new javax.xml.namespace.QName("", "binaryData"), xmlWriter);
      }
      if (this.localFileNameTracker) {
        namespace = "";
        writeStartElement(null, namespace, "fileName", xmlWriter);


        if (this.localFileName == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("fileName cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localFileName);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localBinaryDataTracker) {
        elementList.add(new javax.xml.namespace.QName("", "binaryData"));


        if (this.localBinaryData == null) {
          throw new org.apache.axis2.databinding.ADBException("binaryData cannot be null!!");
        }
        elementList.add(this.localBinaryData);
      }
      if (this.localFileNameTracker) {
        elementList.add(new javax.xml.namespace.QName("", "fileName"));

        if (this.localFileName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localFileName));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("fileName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static AttachmentType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        AttachmentType object = new AttachmentType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"AttachmentType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (AttachmentType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "binaryData").equals(reader.getName())) {

            object.setBinaryData(Base64Binary.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "fileName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "fileName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setFileName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteObjectItemStateType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = DeleteObjectItemStateType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for State
     */


    protected ItemState localState;


    /**
     * Auto generated getter method
     * 
     * @return ItemState
     */
    public ItemState getState() {
      return this.localState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param State
     */
    public void setState(final ItemState param) {

      this.localState = param;


    }


    /**
     * field for DependentDeletedObjects This was an Array!
     */


    protected DependentDeletedObjectStateType[] localDependentDeletedObjects;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localDependentDeletedObjectsTracker = false;

    public boolean isDependentDeletedObjectsSpecified() {
      return this.localDependentDeletedObjectsTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return DependentDeletedObjectStateType[]
     */
    public DependentDeletedObjectStateType[] getDependentDeletedObjects() {
      return this.localDependentDeletedObjects;
    }


    /**
     * validate the array for DependentDeletedObjects
     */
    protected void validateDependentDeletedObjects(final DependentDeletedObjectStateType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param DependentDeletedObjects
     */
    public void setDependentDeletedObjects(final DependentDeletedObjectStateType[] param) {

      validateDependentDeletedObjects(param);

      this.localDependentDeletedObjectsTracker = param != null;

      this.localDependentDeletedObjects = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param DependentDeletedObjectStateType
     */
    public void addDependentDeletedObjects(final DependentDeletedObjectStateType param) {
      if (this.localDependentDeletedObjects == null) {
        this.localDependentDeletedObjects = new DependentDeletedObjectStateType[] {};
      }


      // update the setting tracker
      this.localDependentDeletedObjectsTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localDependentDeletedObjects);
      list.add(param);
      this.localDependentDeletedObjects =
          (DependentDeletedObjectStateType[]) list.toArray(new DependentDeletedObjectStateType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteObjectItemStateType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DeleteObjectItemStateType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      this.localState.serialize(new javax.xml.namespace.QName("", "state"), xmlWriter);
      if (this.localDependentDeletedObjectsTracker) {
        if (this.localDependentDeletedObjects != null) {
          for (DependentDeletedObjectStateType localDependentDeletedObject : this.localDependentDeletedObjects) {
            if (localDependentDeletedObject != null) {
              localDependentDeletedObject.serialize(new javax.xml.namespace.QName("", "dependentDeletedObjects"),
                  xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("dependentDeletedObjects cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "state"));


      if (this.localState == null) {
        throw new org.apache.axis2.databinding.ADBException("state cannot be null!!");
      }
      elementList.add(this.localState);
      if (this.localDependentDeletedObjectsTracker) {
        if (this.localDependentDeletedObjects != null) {
          for (DependentDeletedObjectStateType localDependentDeletedObject : this.localDependentDeletedObjects) {

            if (localDependentDeletedObject != null) {
              elementList.add(new javax.xml.namespace.QName("", "dependentDeletedObjects"));
              elementList.add(localDependentDeletedObject);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("dependentDeletedObjects cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteObjectItemStateType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteObjectItemStateType object = new DeleteObjectItemStateType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteObjectItemStateType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteObjectItemStateType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "state").equals(reader.getName())) {

            object.setState(ItemState.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "dependentDeletedObjects").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(DependentDeletedObjectStateType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "dependentDeletedObjects").equals(reader.getName())) {
                  list3.add(DependentDeletedObjectStateType.Factory.parse(reader));

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object
                .setDependentDeletedObjects((DependentDeletedObjectStateType[]) org.apache.axis2.databinding.utils.ConverterUtil
                    .convertToArray(DependentDeletedObjectStateType.class, list3));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameCalibrationProjectResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameCalibrationProjectResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameCalibrationProjectResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameCalibrationProjectResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameCalibrationProjectResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameCalibrationProjectResponseType object = new RenameCalibrationProjectResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameCalibrationProjectResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameCalibrationProjectResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class MergeProductAttributesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "MergeProductAttributesResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":MergeProductAttributesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "MergeProductAttributesResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static MergeProductAttributesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        MergeProductAttributesResponseType object = new MergeProductAttributesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"MergeProductAttributesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (MergeProductAttributesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class MergeProductAttributesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "MergeProductAttributesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for SourceAttributeName
     */


    protected java.lang.String localSourceAttributeName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSourceAttributeName() {
      return this.localSourceAttributeName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SourceAttributeName
     */
    public void setSourceAttributeName(final java.lang.String param) {

      this.localSourceAttributeName = param;


    }


    /**
     * field for TargetAttributeName
     */


    protected java.lang.String localTargetAttributeName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getTargetAttributeName() {
      return this.localTargetAttributeName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param TargetAttributeName
     */
    public void setTargetAttributeName(final java.lang.String param) {

      this.localTargetAttributeName = param;


    }


    /**
     * field for ValueMapping This was an Array!
     */


    protected MapEntryType[] localValueMapping;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localValueMappingTracker = false;

    public boolean isValueMappingSpecified() {
      return this.localValueMappingTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getValueMapping() {
      return this.localValueMapping;
    }


    /**
     * validate the array for ValueMapping
     */
    protected void validateValueMapping(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ValueMapping
     */
    public void setValueMapping(final MapEntryType[] param) {

      validateValueMapping(param);

      this.localValueMappingTracker = param != null;

      this.localValueMapping = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addValueMapping(final MapEntryType param) {
      if (this.localValueMapping == null) {
        this.localValueMapping = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localValueMappingTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localValueMapping);
      list.add(param);
      this.localValueMapping = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":MergeProductAttributesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "MergeProductAttributesRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "sourceAttributeName", xmlWriter);


      if (this.localSourceAttributeName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sourceAttributeName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSourceAttributeName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "targetAttributeName", xmlWriter);


      if (this.localTargetAttributeName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("targetAttributeName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localTargetAttributeName);

      }

      xmlWriter.writeEndElement();
      if (this.localValueMappingTracker) {
        if (this.localValueMapping != null) {
          for (MapEntryType element : this.localValueMapping) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "valueMapping"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valueMapping cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "sourceAttributeName"));

      if (this.localSourceAttributeName != null) {
        elementList
            .add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSourceAttributeName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sourceAttributeName cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "targetAttributeName"));

      if (this.localTargetAttributeName != null) {
        elementList
            .add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localTargetAttributeName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("targetAttributeName cannot be null!!");
      }
      if (this.localValueMappingTracker) {
        if (this.localValueMapping != null) {
          for (MapEntryType element : this.localValueMapping) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "valueMapping"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valueMapping cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static MergeProductAttributesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        MergeProductAttributesRequestType object = new MergeProductAttributesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"MergeProductAttributesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (MergeProductAttributesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list4 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "sourceAttributeName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sourceAttributeName"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSourceAttributeName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "targetAttributeName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "targetAttributeName"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setTargetAttributeName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "valueMapping").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list4.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone4 = false;
            while (!loopDone4) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone4 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "valueMapping").equals(reader.getName())) {
                  list4.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone4 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setValueMapping((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list4));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetVersionAttributesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetVersionAttributesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * field for AttrArr This was an Array!
     */


    protected AttrMapEntryType[] localAttrArr;


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getAttrArr() {
      return this.localAttrArr;
    }


    /**
     * validate the array for AttrArr
     */
    protected void validateAttrArr(final AttrMapEntryType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param AttrArr
     */
    public void setAttrArr(final AttrMapEntryType[] param) {

      validateAttrArr(param);


      this.localAttrArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addAttrArr(final AttrMapEntryType param) {
      if (this.localAttrArr == null) {
        this.localAttrArr = new AttrMapEntryType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAttrArr);
      list.add(param);
      this.localAttrArr = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetVersionAttributesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetVersionAttributesRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localAttrArr != null) {
        for (AttrMapEntryType element : this.localAttrArr) {
          if (element != null) {
            element.serialize(new javax.xml.namespace.QName("", "attrArr"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }

      if (this.localAttrArr != null) {
        for (AttrMapEntryType element : this.localAttrArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "attrArr"));
            elementList.add(element);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("attrArr cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetVersionAttributesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetVersionAttributesRequestType object = new SetVersionAttributesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetVersionAttributesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetVersionAttributesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "attrArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "attrArr").equals(reader.getName())) {
                  list3.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setAttrArr((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list3));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProgramKeyPropertiesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProgramKeyPropertiesResponseType", "ns1");


    /**
     * field for ProgramKeyProperties This was an Array!
     */


    protected ProgramKeyProperty[] localProgramKeyProperties;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localProgramKeyPropertiesTracker = false;

    public boolean isProgramKeyPropertiesSpecified() {
      return this.localProgramKeyPropertiesTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ProgramKeyProperty[]
     */
    public ProgramKeyProperty[] getProgramKeyProperties() {
      return this.localProgramKeyProperties;
    }


    /**
     * validate the array for ProgramKeyProperties
     */
    protected void validateProgramKeyProperties(final ProgramKeyProperty[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ProgramKeyProperties
     */
    public void setProgramKeyProperties(final ProgramKeyProperty[] param) {

      validateProgramKeyProperties(param);

      this.localProgramKeyPropertiesTracker = param != null;

      this.localProgramKeyProperties = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ProgramKeyProperty
     */
    public void addProgramKeyProperties(final ProgramKeyProperty param) {
      if (this.localProgramKeyProperties == null) {
        this.localProgramKeyProperties = new ProgramKeyProperty[] {};
      }


      // update the setting tracker
      this.localProgramKeyPropertiesTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localProgramKeyProperties);
      list.add(param);
      this.localProgramKeyProperties = (ProgramKeyProperty[]) list.toArray(new ProgramKeyProperty[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProgramKeyPropertiesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetProgramKeyPropertiesResponseType", xmlWriter);
        }


      }
      if (this.localProgramKeyPropertiesTracker) {
        if (this.localProgramKeyProperties != null) {
          for (ProgramKeyProperty localProgramKeyPropertie : this.localProgramKeyProperties) {
            if (localProgramKeyPropertie != null) {
              localProgramKeyPropertie.serialize(new javax.xml.namespace.QName("", "programKeyProperties"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("programKeyProperties cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localProgramKeyPropertiesTracker) {
        if (this.localProgramKeyProperties != null) {
          for (ProgramKeyProperty localProgramKeyPropertie : this.localProgramKeyProperties) {

            if (localProgramKeyPropertie != null) {
              elementList.add(new javax.xml.namespace.QName("", "programKeyProperties"));
              elementList.add(localProgramKeyPropertie);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("programKeyProperties cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProgramKeyPropertiesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProgramKeyPropertiesResponseType object = new GetProgramKeyPropertiesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProgramKeyPropertiesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProgramKeyPropertiesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "programKeyProperties").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(ProgramKeyProperty.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "programKeyProperties").equals(reader.getName())) {
                  list1.add(ProgramKeyProperty.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setProgramKeyProperties((ProgramKeyProperty[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(ProgramKeyProperty.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CalibrationState_type1 implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "calibrationState_type1", "ns1");


    /**
     * field for CalibrationState_type0
     */


    protected java.lang.String localCalibrationState_type0;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected CalibrationState_type1(final java.lang.String value, final boolean isRegisterValue) {
      this.localCalibrationState_type0 = value;
      if (isRegisterValue) {

        _table_.put(this.localCalibrationState_type0, this);

      }

    }

    public static final java.lang.String _CHANGED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CHANGED");

    public static final java.lang.String _DEFAULT = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("DEFAULT");

    public static final java.lang.String _PRELIM_CALIBRATED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("PRELIM_CALIBRATED");

    public static final java.lang.String _CALIBRATED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CALIBRATED");

    public static final java.lang.String _CHECKED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CHECKED");

    public static final java.lang.String _COMPLETED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("COMPLETED");

    public static final CalibrationState_type1 CHANGED = new CalibrationState_type1(_CHANGED, true);

    public static final CalibrationState_type1 DEFAULT = new CalibrationState_type1(_DEFAULT, true);

    public static final CalibrationState_type1 PRELIM_CALIBRATED = new CalibrationState_type1(_PRELIM_CALIBRATED, true);

    public static final CalibrationState_type1 CALIBRATED = new CalibrationState_type1(_CALIBRATED, true);

    public static final CalibrationState_type1 CHECKED = new CalibrationState_type1(_CHECKED, true);

    public static final CalibrationState_type1 COMPLETED = new CalibrationState_type1(_COMPLETED, true);


    public java.lang.String getValue() {
      return this.localCalibrationState_type0;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localCalibrationState_type0.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":calibrationState_type1", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "calibrationState_type1",
              xmlWriter);
        }
      }

      if (this.localCalibrationState_type0 == null) {

        throw new org.apache.axis2.databinding.ADBException("calibrationState_type0 cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localCalibrationState_type0);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localCalibrationState_type0) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static CalibrationState_type1 fromValue(final java.lang.String value)
          throws java.lang.IllegalArgumentException {
        CalibrationState_type1 enumeration = (CalibrationState_type1)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static CalibrationState_type1 fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static CalibrationState_type1 fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return CalibrationState_type1.Factory.fromString(content, namespaceUri);
        }
        else {
          return CalibrationState_type1.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CalibrationState_type1 parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CalibrationState_type1 object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "calibrationState_type0"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = CalibrationState_type1.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = CalibrationState_type1.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetDataSetValuesResponse implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetDataSetValuesResponse", "ns1");


    /**
     * field for ParameterValues This was an Array!
     */


    protected ParameterValueType[] localParameterValues;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localParameterValuesTracker = false;

    public boolean isParameterValuesSpecified() {
      return this.localParameterValuesTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ParameterValueType[]
     */
    public ParameterValueType[] getParameterValues() {
      return this.localParameterValues;
    }


    /**
     * validate the array for ParameterValues
     */
    protected void validateParameterValues(final ParameterValueType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ParameterValues
     */
    public void setParameterValues(final ParameterValueType[] param) {

      validateParameterValues(param);

      this.localParameterValuesTracker = param != null;

      this.localParameterValues = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ParameterValueType
     */
    public void addParameterValues(final ParameterValueType param) {
      if (this.localParameterValues == null) {
        this.localParameterValues = new ParameterValueType[] {};
      }


      // update the setting tracker
      this.localParameterValuesTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localParameterValues);
      list.add(param);
      this.localParameterValues = (ParameterValueType[]) list.toArray(new ParameterValueType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetDataSetValuesResponse", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetDataSetValuesResponse",
              xmlWriter);
        }


      }
      if (this.localParameterValuesTracker) {
        if (this.localParameterValues != null) {
          for (ParameterValueType localParameterValue : this.localParameterValues) {
            if (localParameterValue != null) {
              localParameterValue.serialize(new javax.xml.namespace.QName("", "parameterValues"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("parameterValues cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localParameterValuesTracker) {
        if (this.localParameterValues != null) {
          for (ParameterValueType localParameterValue : this.localParameterValues) {

            if (localParameterValue != null) {
              elementList.add(new javax.xml.namespace.QName("", "parameterValues"));
              elementList.add(localParameterValue);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("parameterValues cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetDataSetValuesResponse parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetDataSetValuesResponse object = new GetDataSetValuesResponse();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetDataSetValuesResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetDataSetValuesResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "parameterValues").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(ParameterValueType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "parameterValues").equals(reader.getName())) {
                  list1.add(ParameterValueType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setParameterValues((ParameterValueType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(ParameterValueType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CreatePVDRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CreatePVDRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ElementName
     */


    protected java.lang.String localElementName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getElementName() {
      return this.localElementName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ElementName
     */
    public void setElementName(final java.lang.String param) {

      this.localElementName = param;


    }


    /**
     * field for Variant
     */


    protected java.lang.String localVariant;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVariant() {
      return this.localVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Variant
     */
    public void setVariant(final java.lang.String param) {

      this.localVariant = param;


    }


    /**
     * field for Comment
     */


    protected java.lang.String localComment;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localCommentTracker = false;

    public boolean isCommentSpecified() {
      return this.localCommentTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getComment() {
      return this.localComment;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Comment
     */
    public void setComment(final java.lang.String param) {
      this.localCommentTracker = param != null;

      this.localComment = param;


    }


    /**
     * field for Description
     */


    protected java.lang.String localDescription;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localDescriptionTracker = false;

    public boolean isDescriptionSpecified() {
      return this.localDescriptionTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getDescription() {
      return this.localDescription;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Description
     */
    public void setDescription(final java.lang.String param) {
      this.localDescriptionTracker = param != null;

      this.localDescription = param;


    }


    /**
     * field for AssignmentXML
     */


    protected java.lang.String localAssignmentXML;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localAssignmentXMLTracker = false;

    public boolean isAssignmentXMLSpecified() {
      return this.localAssignmentXMLTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAssignmentXML() {
      return this.localAssignmentXML;
    }


    /**
     * Auto generated setter method
     * 
     * @param param AssignmentXML
     */
    public void setAssignmentXML(final java.lang.String param) {
      this.localAssignmentXMLTracker = param != null;

      this.localAssignmentXML = param;


    }


    /**
     * field for AddressRange This was an Array!
     */


    protected AddressRange[] localAddressRange;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localAddressRangeTracker = false;

    public boolean isAddressRangeSpecified() {
      return this.localAddressRangeTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AddressRange[]
     */
    public AddressRange[] getAddressRange() {
      return this.localAddressRange;
    }


    /**
     * validate the array for AddressRange
     */
    protected void validateAddressRange(final AddressRange[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param AddressRange
     */
    public void setAddressRange(final AddressRange[] param) {

      validateAddressRange(param);

      this.localAddressRangeTracker = param != null;

      this.localAddressRange = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AddressRange
     */
    public void addAddressRange(final AddressRange param) {
      if (this.localAddressRange == null) {
        this.localAddressRange = new AddressRange[] {};
      }


      // update the setting tracker
      this.localAddressRangeTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAddressRange);
      list.add(param);
      this.localAddressRange = (AddressRange[]) list.toArray(new AddressRange[list.size()]);

    }


    /**
     * field for WorkpackageDefinitionId
     */


    protected java.lang.String localWorkpackageDefinitionId;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localWorkpackageDefinitionIdTracker = false;

    public boolean isWorkpackageDefinitionIdSpecified() {
      return this.localWorkpackageDefinitionIdTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getWorkpackageDefinitionId() {
      return this.localWorkpackageDefinitionId;
    }


    /**
     * Auto generated setter method
     * 
     * @param param WorkpackageDefinitionId
     */
    public void setWorkpackageDefinitionId(final java.lang.String param) {
      this.localWorkpackageDefinitionIdTracker = param != null;

      this.localWorkpackageDefinitionId = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CreatePVDRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CreatePVDRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "elementName", xmlWriter);


      if (this.localElementName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("elementName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localElementName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "variant", xmlWriter);


      if (this.localVariant == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("variant cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVariant);

      }

      xmlWriter.writeEndElement();
      if (this.localCommentTracker) {
        namespace = "";
        writeStartElement(null, namespace, "comment", xmlWriter);


        if (this.localComment == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("comment cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localComment);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localDescriptionTracker) {
        namespace = "";
        writeStartElement(null, namespace, "description", xmlWriter);


        if (this.localDescription == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("description cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localDescription);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localAssignmentXMLTracker) {
        namespace = "";
        writeStartElement(null, namespace, "assignmentXML", xmlWriter);


        if (this.localAssignmentXML == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("assignmentXML cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localAssignmentXML);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localAddressRangeTracker) {
        if (this.localAddressRange != null) {
          for (AddressRange element : this.localAddressRange) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "addressRange"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("addressRange cannot be null!!");

        }
      }
      if (this.localWorkpackageDefinitionIdTracker) {
        namespace = "";
        writeStartElement(null, namespace, "workpackageDefinitionId", xmlWriter);


        if (this.localWorkpackageDefinitionId == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("workpackageDefinitionId cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localWorkpackageDefinitionId);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "elementName"));

      if (this.localElementName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localElementName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("elementName cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "variant"));

      if (this.localVariant != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVariant));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("variant cannot be null!!");
      }
      if (this.localCommentTracker) {
        elementList.add(new javax.xml.namespace.QName("", "comment"));

        if (this.localComment != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localComment));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("comment cannot be null!!");
        }
      }
      if (this.localDescriptionTracker) {
        elementList.add(new javax.xml.namespace.QName("", "description"));

        if (this.localDescription != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localDescription));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("description cannot be null!!");
        }
      }
      if (this.localAssignmentXMLTracker) {
        elementList.add(new javax.xml.namespace.QName("", "assignmentXML"));

        if (this.localAssignmentXML != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localAssignmentXML));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("assignmentXML cannot be null!!");
        }
      }
      if (this.localAddressRangeTracker) {
        if (this.localAddressRange != null) {
          for (AddressRange element : this.localAddressRange) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "addressRange"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("addressRange cannot be null!!");

        }

      }
      if (this.localWorkpackageDefinitionIdTracker) {
        elementList.add(new javax.xml.namespace.QName("", "workpackageDefinitionId"));

        if (this.localWorkpackageDefinitionId != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(this.localWorkpackageDefinitionId));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("workpackageDefinitionId cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CreatePVDRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CreatePVDRequestType object = new CreatePVDRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CreatePVDRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CreatePVDRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list7 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "elementName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "elementName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setElementName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "variant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "variant" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "comment").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "comment" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setComment(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "description").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "description" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "assignmentXML").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "assignmentXML"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setAssignmentXML(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "addressRange").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list7.add(AddressRange.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone7 = false;
            while (!loopDone7) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone7 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "addressRange").equals(reader.getName())) {
                  list7.add(AddressRange.Factory.parse(reader));

                }
                else {
                  loopDone7 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setAddressRange((AddressRange[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AddressRange.class, list7));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "workpackageDefinitionId").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "workpackageDefinitionId"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object
                .setWorkpackageDefinitionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameCalibrationVariantResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameCalibrationVariantResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameCalibrationVariantResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameCalibrationVariantResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameCalibrationVariantResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameCalibrationVariantResponseType object = new RenameCalibrationVariantResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameCalibrationVariantResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameCalibrationVariantResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteObjectRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DeleteObjectRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for DeleteObjectItems This was an Array!
     */


    protected DeleteObjectItemType[] localDeleteObjectItems;


    /**
     * Auto generated getter method
     * 
     * @return DeleteObjectItemType[]
     */
    public DeleteObjectItemType[] getDeleteObjectItems() {
      return this.localDeleteObjectItems;
    }


    /**
     * validate the array for DeleteObjectItems
     */
    protected void validateDeleteObjectItems(final DeleteObjectItemType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param DeleteObjectItems
     */
    public void setDeleteObjectItems(final DeleteObjectItemType[] param) {

      validateDeleteObjectItems(param);


      this.localDeleteObjectItems = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param DeleteObjectItemType
     */
    public void addDeleteObjectItems(final DeleteObjectItemType param) {
      if (this.localDeleteObjectItems == null) {
        this.localDeleteObjectItems = new DeleteObjectItemType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localDeleteObjectItems);
      list.add(param);
      this.localDeleteObjectItems = (DeleteObjectItemType[]) list.toArray(new DeleteObjectItemType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteObjectRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DeleteObjectRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localDeleteObjectItems != null) {
        for (DeleteObjectItemType localDeleteObjectItem : this.localDeleteObjectItems) {
          if (localDeleteObjectItem != null) {
            localDeleteObjectItem.serialize(new javax.xml.namespace.QName("", "deleteObjectItems"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("deleteObjectItems cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("deleteObjectItems cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localDeleteObjectItems != null) {
        for (DeleteObjectItemType localDeleteObjectItem : this.localDeleteObjectItems) {

          if (localDeleteObjectItem != null) {
            elementList.add(new javax.xml.namespace.QName("", "deleteObjectItems"));
            elementList.add(localDeleteObjectItem);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("deleteObjectItems cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("deleteObjectItems cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteObjectRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteObjectRequestType object = new DeleteObjectRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteObjectRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteObjectRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "deleteObjectItems").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(DeleteObjectItemType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "deleteObjectItems").equals(reader.getName())) {
                  list2.add(DeleteObjectItemType.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setDeleteObjectItems((DeleteObjectItemType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(DeleteObjectItemType.class, list2));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ProductAttributeValueDataType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = ProductAttributeValueDataType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for Name
     */


    protected java.lang.String localName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {

      this.localName = param;


    }


    /**
     * field for ValuesArr This was an Array!
     */


    protected java.lang.String[] localValuesArr;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localValuesArrTracker = false;

    public boolean isValuesArrSpecified() {
      return this.localValuesArrTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getValuesArr() {
      return this.localValuesArr;
    }


    /**
     * validate the array for ValuesArr
     */
    protected void validateValuesArr(final java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ValuesArr
     */
    public void setValuesArr(final java.lang.String[] param) {

      validateValuesArr(param);

      this.localValuesArrTracker = param != null;

      this.localValuesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addValuesArr(final java.lang.String param) {
      if (this.localValuesArr == null) {
        this.localValuesArr = new java.lang.String[] {};
      }


      // update the setting tracker
      this.localValuesArrTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localValuesArr);
      list.add(param);
      this.localValuesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ProductAttributeValueDataType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ProductAttributeValueDataType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "name", xmlWriter);


      if (this.localName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localName);

      }

      xmlWriter.writeEndElement();
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          namespace = "";
          for (String element : this.localValuesArr) {

            if (element != null) {

              writeStartElement(null, namespace, "valuesArr", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "name"));

      if (this.localName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
      }
      if (this.localValuesArrTracker) {
        if (this.localValuesArr != null) {
          for (String element : this.localValuesArr) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "valuesArr"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
            }
            else {

              // have to do nothing

            }


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("valuesArr cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ProductAttributeValueDataType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ProductAttributeValueDataType object = new ProductAttributeValueDataType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ProductAttributeValueDataType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ProductAttributeValueDataType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "valuesArr").equals(reader.getName())) {
                  list2.add(reader.getElementText());

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setValuesArr((java.lang.String[]) list2.toArray(new java.lang.String[list2.size()]));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckInPureHexDSTResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CheckInPureHexDSTResponseType", "ns1");


    /**
     * field for ReturnValue
     */


    protected boolean localReturnValue;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final boolean param) {

      this.localReturnValue = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckInPureHexDSTResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckInPureHexDSTResponseType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "returnValue", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localReturnValue));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "returnValue"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localReturnValue));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckInPureHexDSTResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CheckInPureHexDSTResponseType object = new CheckInPureHexDSTResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckInPureHexDSTResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckInPureHexDSTResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "returnValue" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setReturnValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProductKeysResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProductKeysResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected VariantKeyDataType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return VariantKeyDataType[]
     */
    public VariantKeyDataType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final VariantKeyDataType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final VariantKeyDataType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param VariantKeyDataType
     */
    public void addReturnValue(final VariantKeyDataType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new VariantKeyDataType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (VariantKeyDataType[]) list.toArray(new VariantKeyDataType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProductKeysResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetProductKeysResponseType",
              xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (VariantKeyDataType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (VariantKeyDataType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProductKeysResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProductKeysResponseType object = new GetProductKeysResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProductKeysResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProductKeysResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(VariantKeyDataType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(VariantKeyDataType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((VariantKeyDataType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(VariantKeyDataType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProgramKeysResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProgramKeysResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected ProgramKeyDataType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ProgramKeyDataType[]
     */
    public ProgramKeyDataType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final ProgramKeyDataType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final ProgramKeyDataType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ProgramKeyDataType
     */
    public void addReturnValue(final ProgramKeyDataType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new ProgramKeyDataType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (ProgramKeyDataType[]) list.toArray(new ProgramKeyDataType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProgramKeysResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetProgramKeysResponseType",
              xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ProgramKeyDataType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ProgramKeyDataType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProgramKeysResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProgramKeysResponseType object = new GetProgramKeysResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProgramKeysResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProgramKeysResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(ProgramKeyDataType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(ProgramKeyDataType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((ProgramKeyDataType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(ProgramKeyDataType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProductAttributeValuesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProductAttributeValuesRequestType", "ns1");


    /**
     * field for Seshandle
     */


    protected java.lang.String localSeshandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSeshandle() {
      return this.localSeshandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Seshandle
     */
    public void setSeshandle(final java.lang.String param) {

      this.localSeshandle = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNameTracker = false;

    public boolean isNameSpecified() {
      return this.localNameTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {
      this.localNameTracker = param != null;

      this.localName = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProductAttributeValuesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetProductAttributeValuesRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "seshandle", xmlWriter);


      if (this.localSeshandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("seshandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSeshandle);

      }

      xmlWriter.writeEndElement();
      if (this.localNameTracker) {
        namespace = "";
        writeStartElement(null, namespace, "name", xmlWriter);


        if (this.localName == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localName);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "seshandle"));

      if (this.localSeshandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSeshandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("seshandle cannot be null!!");
      }
      if (this.localNameTracker) {
        elementList.add(new javax.xml.namespace.QName("", "name"));

        if (this.localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProductAttributeValuesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProductAttributeValuesRequestType object = new GetProductAttributeValuesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProductAttributeValuesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProductAttributeValuesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "seshandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "seshandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSeshandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class LogoutRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "LogoutRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":LogoutRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "LogoutRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static LogoutRequestType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        LogoutRequestType object = new LogoutRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"LogoutRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (LogoutRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckOutRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CheckOutRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for CheckOutItems This was an Array!
     */


    protected CheckOutItemType[] localCheckOutItems;


    /**
     * Auto generated getter method
     * 
     * @return CheckOutItemType[]
     */
    public CheckOutItemType[] getCheckOutItems() {
      return this.localCheckOutItems;
    }


    /**
     * validate the array for CheckOutItems
     */
    protected void validateCheckOutItems(final CheckOutItemType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param CheckOutItems
     */
    public void setCheckOutItems(final CheckOutItemType[] param) {

      validateCheckOutItems(param);


      this.localCheckOutItems = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param CheckOutItemType
     */
    public void addCheckOutItems(final CheckOutItemType param) {
      if (this.localCheckOutItems == null) {
        this.localCheckOutItems = new CheckOutItemType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localCheckOutItems);
      list.add(param);
      this.localCheckOutItems = (CheckOutItemType[]) list.toArray(new CheckOutItemType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckOutRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckOutRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localCheckOutItems != null) {
        for (CheckOutItemType localCheckOutItem : this.localCheckOutItems) {
          if (localCheckOutItem != null) {
            localCheckOutItem.serialize(new javax.xml.namespace.QName("", "CheckOutItems"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("CheckOutItems cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("CheckOutItems cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localCheckOutItems != null) {
        for (CheckOutItemType localCheckOutItem : this.localCheckOutItems) {

          if (localCheckOutItem != null) {
            elementList.add(new javax.xml.namespace.QName("", "CheckOutItems"));
            elementList.add(localCheckOutItem);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("CheckOutItems cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("CheckOutItems cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckOutRequestType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        CheckOutRequestType object = new CheckOutRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckOutRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckOutRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "CheckOutItems").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(CheckOutItemType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "CheckOutItems").equals(reader.getName())) {
                  list2.add(CheckOutItemType.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setCheckOutItems((CheckOutItemType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(CheckOutItemType.class, list2));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RemoveFromContainerRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RemoveFromContainerRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ContainsArr This was an Array!
     */


    protected MapContainsType[] localContainsArr;


    /**
     * Auto generated getter method
     * 
     * @return MapContainsType[]
     */
    public MapContainsType[] getContainsArr() {
      return this.localContainsArr;
    }


    /**
     * validate the array for ContainsArr
     */
    protected void validateContainsArr(final MapContainsType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param ContainsArr
     */
    public void setContainsArr(final MapContainsType[] param) {

      validateContainsArr(param);


      this.localContainsArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapContainsType
     */
    public void addContainsArr(final MapContainsType param) {
      if (this.localContainsArr == null) {
        this.localContainsArr = new MapContainsType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localContainsArr);
      list.add(param);
      this.localContainsArr = (MapContainsType[]) list.toArray(new MapContainsType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RemoveFromContainerRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "RemoveFromContainerRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      if (this.localContainsArr != null) {
        for (MapContainsType element : this.localContainsArr) {
          if (element != null) {
            element.serialize(new javax.xml.namespace.QName("", "containsArr"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("containsArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("containsArr cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      if (this.localContainsArr != null) {
        for (MapContainsType element : this.localContainsArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "containsArr"));
            elementList.add(element);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("containsArr cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("containsArr cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RemoveFromContainerRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RemoveFromContainerRequestType object = new RemoveFromContainerRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RemoveFromContainerRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RemoveFromContainerRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "containsArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(MapContainsType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "containsArr").equals(reader.getName())) {
                  list2.add(MapContainsType.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setContainsArr((MapContainsType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapContainsType.class, list2));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ValueCompressionResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ValueCompressionResponseType", "ns1");


    /**
     * field for ReturnValue
     */


    protected boolean localReturnValue;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final boolean param) {

      this.localReturnValue = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ValueCompressionResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ValueCompressionResponseType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "returnValue", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localReturnValue));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "returnValue"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localReturnValue));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ValueCompressionResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ValueCompressionResponseType object = new ValueCompressionResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ValueCompressionResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ValueCompressionResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "returnValue" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setReturnValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class MapContainsType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = MapContainsType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for Container
     */


    protected java.lang.String localContainer;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContainer() {
      return this.localContainer;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Container
     */
    public void setContainer(final java.lang.String param) {

      this.localContainer = param;


    }


    /**
     * field for Content
     */


    protected java.lang.String localContent;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContent() {
      return this.localContent;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Content
     */
    public void setContent(final java.lang.String param) {

      this.localContent = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":MapContainsType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "MapContainsType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "container", xmlWriter);


      if (this.localContainer == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("container cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContainer);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "content", xmlWriter);


      if (this.localContent == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("content cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContent);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "container"));

      if (this.localContainer != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContainer));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("container cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "content"));

      if (this.localContent != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContent));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("content cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static MapContainsType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        MapContainsType object = new MapContainsType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"MapContainsType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (MapContainsType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "container").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "container" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContainer(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "content").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "content" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContent(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetProductKeyStateRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetProductKeyStateRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for NamesArr This was an Array!
     */


    protected java.lang.String[] localNamesArr;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getNamesArr() {
      return this.localNamesArr;
    }


    /**
     * validate the array for NamesArr
     */
    protected void validateNamesArr(final java.lang.String[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param NamesArr
     */
    public void setNamesArr(final java.lang.String[] param) {

      validateNamesArr(param);


      this.localNamesArr = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addNamesArr(final java.lang.String param) {
      if (this.localNamesArr == null) {
        this.localNamesArr = new java.lang.String[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localNamesArr);
      list.add(param);
      this.localNamesArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);

    }


    /**
     * field for StateFlag
     */


    protected boolean localStateFlag;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getStateFlag() {
      return this.localStateFlag;
    }


    /**
     * Auto generated setter method
     * 
     * @param param StateFlag
     */
    public void setStateFlag(final boolean param) {

      this.localStateFlag = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetProductKeyStateRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetProductKeyStateRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();

      if (this.localNamesArr != null) {
        namespace = "";
        for (String element : this.localNamesArr) {

          if (element != null) {

            writeStartElement(null, namespace, "namesArr", xmlWriter);


            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));

            xmlWriter.writeEndElement();

          }
          else {

            throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

      }


      namespace = "";
      writeStartElement(null, namespace, "stateFlag", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("stateFlag cannot be null!!");

      }
      else {
        xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }

      if (this.localNamesArr != null) {
        for (String element : this.localNamesArr) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "namesArr"));
            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

          }


        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("namesArr cannot be null!!");

      }


      elementList.add(new javax.xml.namespace.QName("", "stateFlag"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localStateFlag));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetProductKeyStateRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetProductKeyStateRequestType object = new SetProductKeyStateRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetProductKeyStateRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetProductKeyStateRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "namesArr").equals(reader.getName())) {
                  list3.add(reader.getElementText());

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setNamesArr((java.lang.String[]) list3.toArray(new java.lang.String[list3.size()]));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "stateFlag").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "stateFlag" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setStateFlag(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetContentAttributesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetContentAttributesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ContainerVersionNo
     */


    protected java.lang.String localContainerVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContainerVersionNo() {
      return this.localContainerVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ContainerVersionNo
     */
    public void setContainerVersionNo(final java.lang.String param) {

      this.localContainerVersionNo = param;


    }


    /**
     * field for ContentVersionNo
     */


    protected java.lang.String localContentVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getContentVersionNo() {
      return this.localContentVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ContentVersionNo
     */
    public void setContentVersionNo(final java.lang.String param) {

      this.localContentVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetContentAttributesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetContentAttributesRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "containerVersionNo", xmlWriter);


      if (this.localContainerVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("containerVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContainerVersionNo);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "contentVersionNo", xmlWriter);


      if (this.localContentVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("contentVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localContentVersionNo);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "containerVersionNo"));

      if (this.localContainerVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContainerVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("containerVersionNo cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "contentVersionNo"));

      if (this.localContentVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localContentVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("contentVersionNo cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetContentAttributesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetContentAttributesRequestType object = new GetContentAttributesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetContentAttributesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetContentAttributesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "containerVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "containerVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContainerVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "contentVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "contentVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setContentVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ValidationResultType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = ValidationResultType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for ValidationState
     */


    protected ValidationStateType localValidationState;


    /**
     * Auto generated getter method
     * 
     * @return ValidationStateType
     */
    public ValidationStateType getValidationState() {
      return this.localValidationState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ValidationState
     */
    public void setValidationState(final ValidationStateType param) {

      this.localValidationState = param;


    }


    /**
     * field for ValidationMessages This was an Array!
     */


    protected ValidationMessage[] localValidationMessages;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localValidationMessagesTracker = false;

    public boolean isValidationMessagesSpecified() {
      return this.localValidationMessagesTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ValidationMessage[]
     */
    public ValidationMessage[] getValidationMessages() {
      return this.localValidationMessages;
    }


    /**
     * validate the array for ValidationMessages
     */
    protected void validateValidationMessages(final ValidationMessage[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ValidationMessages
     */
    public void setValidationMessages(final ValidationMessage[] param) {

      validateValidationMessages(param);

      this.localValidationMessagesTracker = param != null;

      this.localValidationMessages = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ValidationMessage
     */
    public void addValidationMessages(final ValidationMessage param) {
      if (this.localValidationMessages == null) {
        this.localValidationMessages = new ValidationMessage[] {};
      }


      // update the setting tracker
      this.localValidationMessagesTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localValidationMessages);
      list.add(param);
      this.localValidationMessages = (ValidationMessage[]) list.toArray(new ValidationMessage[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ValidationResultType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ValidationResultType", xmlWriter);
        }


      }

      if (this.localValidationState == null) {
        throw new org.apache.axis2.databinding.ADBException("validationState cannot be null!!");
      }
      this.localValidationState.serialize(new javax.xml.namespace.QName("", "validationState"), xmlWriter);
      if (this.localValidationMessagesTracker) {
        if (this.localValidationMessages != null) {
          for (ValidationMessage localValidationMessage : this.localValidationMessages) {
            if (localValidationMessage != null) {
              localValidationMessage.serialize(new javax.xml.namespace.QName("", "validationMessages"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("validationMessages cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "validationState"));


      if (this.localValidationState == null) {
        throw new org.apache.axis2.databinding.ADBException("validationState cannot be null!!");
      }
      elementList.add(this.localValidationState);
      if (this.localValidationMessagesTracker) {
        if (this.localValidationMessages != null) {
          for (ValidationMessage localValidationMessage : this.localValidationMessages) {

            if (localValidationMessage != null) {
              elementList.add(new javax.xml.namespace.QName("", "validationMessages"));
              elementList.add(localValidationMessage);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("validationMessages cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ValidationResultType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ValidationResultType object = new ValidationResultType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ValidationResultType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ValidationResultType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list2 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "validationState").equals(reader.getName())) {

            object.setValidationState(ValidationStateType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "validationMessages").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list2.add(ValidationMessage.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone2 = false;
            while (!loopDone2) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone2 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "validationMessages").equals(reader.getName())) {
                  list2.add(ValidationMessage.Factory.parse(reader));

                }
                else {
                  loopDone2 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setValidationMessages((ValidationMessage[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(ValidationMessage.class, list2));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ItemState implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = ItemState Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for Success
     */


    protected boolean localSuccess;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getSuccess() {
      return this.localSuccess;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Success
     */
    public void setSuccess(final boolean param) {

      this.localSuccess = param;


    }


    /**
     * field for ErrorMessage
     */


    protected java.lang.String localErrorMessage;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localErrorMessageTracker = false;

    public boolean isErrorMessageSpecified() {
      return this.localErrorMessageTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getErrorMessage() {
      return this.localErrorMessage;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ErrorMessage
     */
    public void setErrorMessage(final java.lang.String param) {
      this.localErrorMessageTracker = param != null;

      this.localErrorMessage = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix + ":ItemState",
              xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ItemState", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "Success", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("Success cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSuccess));
      }

      xmlWriter.writeEndElement();
      if (this.localErrorMessageTracker) {
        namespace = "";
        writeStartElement(null, namespace, "ErrorMessage", xmlWriter);


        if (this.localErrorMessage == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("ErrorMessage cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localErrorMessage);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "Success"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSuccess));
      if (this.localErrorMessageTracker) {
        elementList.add(new javax.xml.namespace.QName("", "ErrorMessage"));

        if (this.localErrorMessage != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localErrorMessage));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("ErrorMessage cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ItemState parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ItemState object = new ItemState();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ItemState".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ItemState) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "Success").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "Success" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSuccess(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "ErrorMessage").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "ErrorMessage" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setErrorMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class DeleteObjectResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "DeleteObjectResponseType", "ns1");


    /**
     * field for DeleteObjectItemStates This was an Array!
     */


    protected DeleteObjectItemStateType[] localDeleteObjectItemStates;


    /**
     * Auto generated getter method
     * 
     * @return DeleteObjectItemStateType[]
     */
    public DeleteObjectItemStateType[] getDeleteObjectItemStates() {
      return this.localDeleteObjectItemStates;
    }


    /**
     * validate the array for DeleteObjectItemStates
     */
    protected void validateDeleteObjectItemStates(final DeleteObjectItemStateType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param DeleteObjectItemStates
     */
    public void setDeleteObjectItemStates(final DeleteObjectItemStateType[] param) {

      validateDeleteObjectItemStates(param);


      this.localDeleteObjectItemStates = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param DeleteObjectItemStateType
     */
    public void addDeleteObjectItemStates(final DeleteObjectItemStateType param) {
      if (this.localDeleteObjectItemStates == null) {
        this.localDeleteObjectItemStates = new DeleteObjectItemStateType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localDeleteObjectItemStates);
      list.add(param);
      this.localDeleteObjectItemStates =
          (DeleteObjectItemStateType[]) list.toArray(new DeleteObjectItemStateType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":DeleteObjectResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "DeleteObjectResponseType",
              xmlWriter);
        }


      }

      if (this.localDeleteObjectItemStates != null) {
        for (DeleteObjectItemStateType localDeleteObjectItemState : this.localDeleteObjectItemStates) {
          if (localDeleteObjectItemState != null) {
            localDeleteObjectItemState
                .serialize(new javax.xml.namespace.QName("", "deleteObjectItemStates"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("deleteObjectItemStates cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("deleteObjectItemStates cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      if (this.localDeleteObjectItemStates != null) {
        for (DeleteObjectItemStateType localDeleteObjectItemState : this.localDeleteObjectItemStates) {

          if (localDeleteObjectItemState != null) {
            elementList.add(new javax.xml.namespace.QName("", "deleteObjectItemStates"));
            elementList.add(localDeleteObjectItemState);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("deleteObjectItemStates cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("deleteObjectItemStates cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static DeleteObjectResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        DeleteObjectResponseType object = new DeleteObjectResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"DeleteObjectResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (DeleteObjectResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "deleteObjectItemStates").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(DeleteObjectItemStateType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "deleteObjectItemStates").equals(reader.getName())) {
                  list1.add(DeleteObjectItemStateType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object
                .setDeleteObjectItemStates((DeleteObjectItemStateType[]) org.apache.axis2.databinding.utils.ConverterUtil
                    .convertToArray(DeleteObjectItemStateType.class, list1));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CalibrationState_type0 implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("",
        "calibrationState_type0", "");


    /**
     * field for CalibrationState_type0
     */


    protected java.lang.String localCalibrationState_type0;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor

    protected CalibrationState_type0(final java.lang.String value, final boolean isRegisterValue) {
      this.localCalibrationState_type0 = value;
      if (isRegisterValue) {

        _table_.put(this.localCalibrationState_type0, this);

      }

    }

    public static final java.lang.String _CHANGED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CHANGED");

    public static final java.lang.String _DEFAULT = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("DEFAULT");

    public static final java.lang.String _PRELIM_CALIBRATED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("PRELIM_CALIBRATED");

    public static final java.lang.String _CALIBRATED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CALIBRATED");

    public static final java.lang.String _CHECKED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("CHECKED");

    public static final java.lang.String _COMPLETED = org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString("COMPLETED");

    public static final CalibrationState_type0 CHANGED = new CalibrationState_type0(_CHANGED, true);

    public static final CalibrationState_type0 DEFAULT = new CalibrationState_type0(_DEFAULT, true);

    public static final CalibrationState_type0 PRELIM_CALIBRATED = new CalibrationState_type0(_PRELIM_CALIBRATED, true);

    public static final CalibrationState_type0 CALIBRATED = new CalibrationState_type0(_CALIBRATED, true);

    public static final CalibrationState_type0 CHECKED = new CalibrationState_type0(_CHECKED, true);

    public static final CalibrationState_type0 COMPLETED = new CalibrationState_type0(_COMPLETED, true);


    public java.lang.String getValue() {
      return this.localCalibrationState_type0;
    }

    @Override
    public boolean equals(final java.lang.Object obj) {
      return (obj == this);
    }

    @Override
    public int hashCode() {
      return toString().hashCode();
    }

    @Override
    public java.lang.String toString() {

      return this.localCalibrationState_type0.toString();


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it

      java.lang.String namespace = parentQName.getNamespaceURI();
      java.lang.String _localName = parentQName.getLocalPart();

      writeStartElement(null, namespace, _localName, xmlWriter);

      // add the type details if this is used in a simple type
      if (serializeType) {
        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":calibrationState_type0", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "calibrationState_type0",
              xmlWriter);
        }
      }

      if (this.localCalibrationState_type0 == null) {

        throw new org.apache.axis2.databinding.ADBException("calibrationState_type0 cannot be null !!");

      }
      else {

        xmlWriter.writeCharacters(this.localCalibrationState_type0);

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("")) {
        return "";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME, new java.lang.Object[] {
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localCalibrationState_type0) }, null);

    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      public static CalibrationState_type0 fromValue(final java.lang.String value)
          throws java.lang.IllegalArgumentException {
        CalibrationState_type0 enumeration = (CalibrationState_type0)

        _table_.get(value);


        if ((enumeration == null) && !((value == null) || (value.equals("")))) {
          throw new java.lang.IllegalArgumentException();
        }
        return enumeration;
      }

      public static CalibrationState_type0 fromString(final java.lang.String value, final java.lang.String namespaceURI)
          throws java.lang.IllegalArgumentException {
        try {

          return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));


        }
        catch (java.lang.Exception e) {
          throw new java.lang.IllegalArgumentException();
        }
      }

      public static CalibrationState_type0 fromString(final javax.xml.stream.XMLStreamReader xmlStreamReader,
          final java.lang.String content) {
        if (content.indexOf(":") > -1) {
          java.lang.String prefix = content.substring(0, content.indexOf(":"));
          java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
          return CalibrationState_type0.Factory.fromString(content, namespaceUri);
        }
        else {
          return CalibrationState_type0.Factory.fromString(content, "");
        }
      }


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CalibrationState_type0 parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        CalibrationState_type0 object = null;
        // initialize a hash map to keep values
        java.util.Map attributeMap = new java.util.HashMap();
        java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();


        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
              if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                throw new org.apache.axis2.databinding.ADBException("The element: " + "calibrationState_type0"
                    + "  cannot be null");
              }


              java.lang.String content = reader.getElementText();

              if (content.indexOf(":") > 0) {
                // this seems to be a Qname so find the namespace and send
                prefix = content.substring(0, content.indexOf(":"));
                namespaceuri = reader.getNamespaceURI(prefix);
                object = CalibrationState_type0.Factory.fromString(content, namespaceuri);
              }
              else {
                // this seems to be not a qname send and empty namespace incase of it is
                // check is done in fromString method
                object = CalibrationState_type0.Factory.fromString(content, "");
              }


            }
            else {
              reader.next();
            }
          } // end of while loop


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class LoginRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "LoginRequestType", "ns1");


    /**
     * field for DomainName
     */


    protected java.lang.String localDomainName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getDomainName() {
      return this.localDomainName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param DomainName
     */
    public void setDomainName(final java.lang.String param) {

      this.localDomainName = param;


    }


    /**
     * field for PassWord
     */


    protected java.lang.String localPassWord;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getPassWord() {
      return this.localPassWord;
    }


    /**
     * Auto generated setter method
     * 
     * @param param PassWord
     */
    public void setPassWord(final java.lang.String param) {

      this.localPassWord = param;


    }


    /**
     * field for UserName
     */


    protected java.lang.String localUserName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getUserName() {
      return this.localUserName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param UserName
     */
    public void setUserName(final java.lang.String param) {

      this.localUserName = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":LoginRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "LoginRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "DomainName", xmlWriter);


      if (this.localDomainName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("DomainName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localDomainName);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "PassWord", xmlWriter);


      if (this.localPassWord == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("PassWord cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localPassWord);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "UserName", xmlWriter);


      if (this.localUserName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("UserName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localUserName);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "DomainName"));

      if (this.localDomainName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localDomainName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("DomainName cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "PassWord"));

      if (this.localPassWord != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localPassWord));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("PassWord cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "UserName"));

      if (this.localUserName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localUserName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("UserName cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static LoginRequestType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        LoginRequestType object = new LoginRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"LoginRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (LoginRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "DomainName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "DomainName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setDomainName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "PassWord").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "PassWord" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setPassWord(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "UserName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "UserName" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setUserName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ValueCompression_fault implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "ValueCompression_fault", "ns1");


    /**
     * field for CheckInPureHexDST_fault
     */


    protected java.lang.String localCheckInPureHexDST_fault;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getCheckInPureHexDST_fault() {
      return this.localCheckInPureHexDST_fault;
    }


    /**
     * Auto generated setter method
     * 
     * @param param CheckInPureHexDST_fault
     */
    public void setCheckInPureHexDST_fault(final java.lang.String param) {

      this.localCheckInPureHexDST_fault = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ValueCompression_fault", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ValueCompression_fault",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "CheckInPureHexDST_fault", xmlWriter);


      if (this.localCheckInPureHexDST_fault == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("CheckInPureHexDST_fault cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localCheckInPureHexDST_fault);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "CheckInPureHexDST_fault"));

      if (this.localCheckInPureHexDST_fault != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localCheckInPureHexDST_fault));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("CheckInPureHexDST_fault cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ValueCompression_fault parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ValueCompression_fault object = new ValueCompression_fault();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ValueCompression_fault".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ValueCompression_fault) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "CheckInPureHexDST_fault").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "CheckInPureHexDST_fault"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object
                .setCheckInPureHexDST_fault(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetExtendedLoggingResponse implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetExtendedLoggingResponse", "ns1");


    /**
     * field for ExtendedLogging
     */


    protected boolean localExtendedLogging;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getExtendedLogging() {
      return this.localExtendedLogging;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ExtendedLogging
     */
    public void setExtendedLogging(final boolean param) {

      this.localExtendedLogging = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetExtendedLoggingResponse", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SetExtendedLoggingResponse",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "extendedLogging", xmlWriter);

      if (false) {

        throw new org.apache.axis2.databinding.ADBException("extendedLogging cannot be null!!");

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(this.localExtendedLogging));
      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "extendedLogging"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localExtendedLogging));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetExtendedLoggingResponse parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetExtendedLoggingResponse object = new SetExtendedLoggingResponse();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetExtendedLoggingResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetExtendedLoggingResponse) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "extendedLogging").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "extendedLogging"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setExtendedLogging(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class ParameterValueType implements org.apache.axis2.databinding.ADBBean {

    /*
     * This type was generated from the piece of schema that had name = ParameterValueType Namespace URI =
     * http://easee.vector.com/application/cdmservice/ Namespace Prefix = ns1
     */


    /**
     * field for ParameterName
     */


    protected java.lang.String localParameterName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getParameterName() {
      return this.localParameterName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ParameterName
     */
    public void setParameterName(final java.lang.String param) {

      this.localParameterName = param;


    }


    /**
     * field for Criterion
     */


    protected java.lang.String localCriterion;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localCriterionTracker = false;

    public boolean isCriterionSpecified() {
      return this.localCriterionTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getCriterion() {
      return this.localCriterion;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Criterion
     */
    public void setCriterion(final java.lang.String param) {
      this.localCriterionTracker = param != null;

      this.localCriterion = param;


    }


    /**
     * field for Variant
     */


    protected java.lang.String localVariant;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localVariantTracker = false;

    public boolean isVariantSpecified() {
      return this.localVariantTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVariant() {
      return this.localVariant;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Variant
     */
    public void setVariant(final java.lang.String param) {
      this.localVariantTracker = param != null;

      this.localVariant = param;


    }


    /**
     * field for ValueSystemState
     */


    protected ValueSystemState_type1 localValueSystemState;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localValueSystemStateTracker = false;

    public boolean isValueSystemStateSpecified() {
      return this.localValueSystemStateTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ValueSystemState_type1
     */
    public ValueSystemState_type1 getValueSystemState() {
      return this.localValueSystemState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ValueSystemState
     */
    public void setValueSystemState(final ValueSystemState_type1 param) {
      this.localValueSystemStateTracker = param != null;

      this.localValueSystemState = param;


    }


    /**
     * field for CalibrationState
     */


    protected CalibrationState_type1 localCalibrationState;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localCalibrationStateTracker = false;

    public boolean isCalibrationStateSpecified() {
      return this.localCalibrationStateTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return CalibrationState_type1
     */
    public CalibrationState_type1 getCalibrationState() {
      return this.localCalibrationState;
    }


    /**
     * Auto generated setter method
     * 
     * @param param CalibrationState
     */
    public void setCalibrationState(final CalibrationState_type1 param) {
      this.localCalibrationStateTracker = param != null;

      this.localCalibrationState = param;


    }


    /**
     * field for CalibrationRemark
     */


    protected java.lang.String localCalibrationRemark;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localCalibrationRemarkTracker = false;

    public boolean isCalibrationRemarkSpecified() {
      return this.localCalibrationRemarkTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getCalibrationRemark() {
      return this.localCalibrationRemark;
    }


    /**
     * Auto generated setter method
     * 
     * @param param CalibrationRemark
     */
    public void setCalibrationRemark(final java.lang.String param) {
      this.localCalibrationRemarkTracker = param != null;

      this.localCalibrationRemark = param;


    }


    /**
     * field for IntegrationUser
     */


    protected java.lang.String localIntegrationUser;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localIntegrationUserTracker = false;

    public boolean isIntegrationUserSpecified() {
      return this.localIntegrationUserTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getIntegrationUser() {
      return this.localIntegrationUser;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IntegrationUser
     */
    public void setIntegrationUser(final java.lang.String param) {
      this.localIntegrationUserTracker = param != null;

      this.localIntegrationUser = param;


    }


    /**
     * field for IntegrationDate
     */


    protected java.util.Calendar localIntegrationDate;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localIntegrationDateTracker = false;

    public boolean isIntegrationDateSpecified() {
      return this.localIntegrationDateTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.util.Calendar
     */
    public java.util.Calendar getIntegrationDate() {
      return this.localIntegrationDate;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IntegrationDate
     */
    public void setIntegrationDate(final java.util.Calendar param) {
      this.localIntegrationDateTracker = param != null;

      this.localIntegrationDate = param;


    }


    /**
     * field for IntegrationLevel
     */


    protected IntegrationLevel_type1 localIntegrationLevel;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localIntegrationLevelTracker = false;

    public boolean isIntegrationLevelSpecified() {
      return this.localIntegrationLevelTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return IntegrationLevel_type1
     */
    public IntegrationLevel_type1 getIntegrationLevel() {
      return this.localIntegrationLevel;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IntegrationLevel
     */
    public void setIntegrationLevel(final IntegrationLevel_type1 param) {
      this.localIntegrationLevelTracker = param != null;

      this.localIntegrationLevel = param;


    }


    /**
     * field for IntegrationOperation
     */


    protected IntegrationOperation_type1 localIntegrationOperation;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localIntegrationOperationTracker = false;

    public boolean isIntegrationOperationSpecified() {
      return this.localIntegrationOperationTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return IntegrationOperation_type1
     */
    public IntegrationOperation_type1 getIntegrationOperation() {
      return this.localIntegrationOperation;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IntegrationOperation
     */
    public void setIntegrationOperation(final IntegrationOperation_type1 param) {
      this.localIntegrationOperationTracker = param != null;

      this.localIntegrationOperation = param;


    }


    /**
     * field for SourceVersionId
     */


    protected java.lang.String localSourceVersionId;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localSourceVersionIdTracker = false;

    public boolean isSourceVersionIdSpecified() {
      return this.localSourceVersionIdTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSourceVersionId() {
      return this.localSourceVersionId;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SourceVersionId
     */
    public void setSourceVersionId(final java.lang.String param) {
      this.localSourceVersionIdTracker = param != null;

      this.localSourceVersionId = param;


    }


    /**
     * field for IsLatest
     */


    protected boolean localIsLatest;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localIsLatestTracker = false;

    public boolean isIsLatestSpecified() {
      return this.localIsLatestTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsLatest() {
      return this.localIsLatest;
    }


    /**
     * Auto generated setter method
     * 
     * @param param IsLatest
     */
    public void setIsLatest(final boolean param) {

      // setting primitive attribute tracker to true
      this.localIsLatestTracker = true;

      this.localIsLatest = param;


    }


    /**
     * field for Values
     */


    protected ValuesArrayType localValues;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localValuesTracker = false;

    public boolean isValuesSpecified() {
      return this.localValuesTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ValuesArrayType
     */
    public ValuesArrayType getValues() {
      return this.localValues;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Values
     */
    public void setValues(final ValuesArrayType param) {
      this.localValuesTracker = param != null;

      this.localValues = param;


    }


    /**
     * field for AxisValues This was an Array!
     */


    protected ValuesArrayType[] localAxisValues;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localAxisValuesTracker = false;

    public boolean isAxisValuesSpecified() {
      return this.localAxisValuesTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ValuesArrayType[]
     */
    public ValuesArrayType[] getAxisValues() {
      return this.localAxisValues;
    }


    /**
     * validate the array for AxisValues
     */
    protected void validateAxisValues(final ValuesArrayType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param AxisValues
     */
    public void setAxisValues(final ValuesArrayType[] param) {

      validateAxisValues(param);

      this.localAxisValuesTracker = param != null;

      this.localAxisValues = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ValuesArrayType
     */
    public void addAxisValues(final ValuesArrayType param) {
      if (this.localAxisValues == null) {
        this.localAxisValues = new ValuesArrayType[] {};
      }


      // update the setting tracker
      this.localAxisValuesTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localAxisValues);
      list.add(param);
      this.localAxisValues = (ValuesArrayType[]) list.toArray(new ValuesArrayType[list.size()]);

    }


    /**
     * field for DimensionSize This was an Array!
     */


    protected int[] localDimensionSize;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localDimensionSizeTracker = false;

    public boolean isDimensionSizeSpecified() {
      return this.localDimensionSizeTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return int[]
     */
    public int[] getDimensionSize() {
      return this.localDimensionSize;
    }


    /**
     * validate the array for DimensionSize
     */
    protected void validateDimensionSize(final int[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param DimensionSize
     */
    public void setDimensionSize(final int[] param) {

      validateDimensionSize(param);

      this.localDimensionSizeTracker = param != null;

      this.localDimensionSize = param;
    }


    /**
     * field for QualityData This was an Array!
     */


    protected MapEntryType[] localQualityData;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localQualityDataTracker = false;

    public boolean isQualityDataSpecified() {
      return this.localQualityDataTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getQualityData() {
      return this.localQualityData;
    }


    /**
     * validate the array for QualityData
     */
    protected void validateQualityData(final MapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param QualityData
     */
    public void setQualityData(final MapEntryType[] param) {

      validateQualityData(param);

      this.localQualityDataTracker = param != null;

      this.localQualityData = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addQualityData(final MapEntryType param) {
      if (this.localQualityData == null) {
        this.localQualityData = new MapEntryType[] {};
      }


      // update the setting tracker
      this.localQualityDataTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localQualityData);
      list.add(param);
      this.localQualityData = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, parentQName);
      return factory.createOMElement(dataSource, parentQName);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":ParameterValueType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "ParameterValueType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "parameterName", xmlWriter);


      if (this.localParameterName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("parameterName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localParameterName);

      }

      xmlWriter.writeEndElement();
      if (this.localCriterionTracker) {
        namespace = "";
        writeStartElement(null, namespace, "criterion", xmlWriter);


        if (this.localCriterion == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("criterion cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localCriterion);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localVariantTracker) {
        namespace = "";
        writeStartElement(null, namespace, "variant", xmlWriter);


        if (this.localVariant == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("variant cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localVariant);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localValueSystemStateTracker) {
        if (this.localValueSystemState == null) {
          throw new org.apache.axis2.databinding.ADBException("valueSystemState cannot be null!!");
        }
        this.localValueSystemState.serialize(new javax.xml.namespace.QName("", "valueSystemState"), xmlWriter);
      }
      if (this.localCalibrationStateTracker) {
        if (this.localCalibrationState == null) {
          throw new org.apache.axis2.databinding.ADBException("calibrationState cannot be null!!");
        }
        this.localCalibrationState.serialize(new javax.xml.namespace.QName("", "calibrationState"), xmlWriter);
      }
      if (this.localCalibrationRemarkTracker) {
        namespace = "";
        writeStartElement(null, namespace, "calibrationRemark", xmlWriter);


        if (this.localCalibrationRemark == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("calibrationRemark cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localCalibrationRemark);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localIntegrationUserTracker) {
        namespace = "";
        writeStartElement(null, namespace, "integrationUser", xmlWriter);


        if (this.localIntegrationUser == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("integrationUser cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localIntegrationUser);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localIntegrationDateTracker) {
        namespace = "";
        writeStartElement(null, namespace, "integrationDate", xmlWriter);


        if (this.localIntegrationDate == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("integrationDate cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(this.localIntegrationDate));

        }

        xmlWriter.writeEndElement();
      }
      if (this.localIntegrationLevelTracker) {
        if (this.localIntegrationLevel == null) {
          throw new org.apache.axis2.databinding.ADBException("integrationLevel cannot be null!!");
        }
        this.localIntegrationLevel.serialize(new javax.xml.namespace.QName("", "integrationLevel"), xmlWriter);
      }
      if (this.localIntegrationOperationTracker) {
        if (this.localIntegrationOperation == null) {
          throw new org.apache.axis2.databinding.ADBException("integrationOperation cannot be null!!");
        }
        this.localIntegrationOperation.serialize(new javax.xml.namespace.QName("", "integrationOperation"), xmlWriter);
      }
      if (this.localSourceVersionIdTracker) {
        namespace = "";
        writeStartElement(null, namespace, "sourceVersionId", xmlWriter);


        if (this.localSourceVersionId == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("sourceVersionId cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localSourceVersionId);

        }

        xmlWriter.writeEndElement();
      }
      if (this.localIsLatestTracker) {
        namespace = "";
        writeStartElement(null, namespace, "isLatest", xmlWriter);

        if (false) {

          throw new org.apache.axis2.databinding.ADBException("isLatest cannot be null!!");

        }
        else {
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(this.localIsLatest));
        }

        xmlWriter.writeEndElement();
      }
      if (this.localValuesTracker) {
        if (this.localValues == null) {
          throw new org.apache.axis2.databinding.ADBException("values cannot be null!!");
        }
        this.localValues.serialize(new javax.xml.namespace.QName("", "values"), xmlWriter);
      }
      if (this.localAxisValuesTracker) {
        if (this.localAxisValues != null) {
          for (ValuesArrayType localAxisValue : this.localAxisValues) {
            if (localAxisValue != null) {
              localAxisValue.serialize(new javax.xml.namespace.QName("", "axisValues"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("axisValues cannot be null!!");

        }
      }
      if (this.localDimensionSizeTracker) {
        if (this.localDimensionSize != null) {
          namespace = "";
          for (int element : this.localDimensionSize) {

            if (element != java.lang.Integer.MIN_VALUE) {

              writeStartElement(null, namespace, "dimensionSize", xmlWriter);


              xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));
              xmlWriter.writeEndElement();

            }
            else {

              // we have to do nothing since minOccurs is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("dimensionSize cannot be null!!");

        }

      }
      if (this.localQualityDataTracker) {
        if (this.localQualityData != null) {
          for (MapEntryType element : this.localQualityData) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "qualityData"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("qualityData cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "parameterName"));

      if (this.localParameterName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localParameterName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("parameterName cannot be null!!");
      }
      if (this.localCriterionTracker) {
        elementList.add(new javax.xml.namespace.QName("", "criterion"));

        if (this.localCriterion != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localCriterion));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("criterion cannot be null!!");
        }
      }
      if (this.localVariantTracker) {
        elementList.add(new javax.xml.namespace.QName("", "variant"));

        if (this.localVariant != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVariant));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("variant cannot be null!!");
        }
      }
      if (this.localValueSystemStateTracker) {
        elementList.add(new javax.xml.namespace.QName("", "valueSystemState"));


        if (this.localValueSystemState == null) {
          throw new org.apache.axis2.databinding.ADBException("valueSystemState cannot be null!!");
        }
        elementList.add(this.localValueSystemState);
      }
      if (this.localCalibrationStateTracker) {
        elementList.add(new javax.xml.namespace.QName("", "calibrationState"));


        if (this.localCalibrationState == null) {
          throw new org.apache.axis2.databinding.ADBException("calibrationState cannot be null!!");
        }
        elementList.add(this.localCalibrationState);
      }
      if (this.localCalibrationRemarkTracker) {
        elementList.add(new javax.xml.namespace.QName("", "calibrationRemark"));

        if (this.localCalibrationRemark != null) {
          elementList
              .add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localCalibrationRemark));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("calibrationRemark cannot be null!!");
        }
      }
      if (this.localIntegrationUserTracker) {
        elementList.add(new javax.xml.namespace.QName("", "integrationUser"));

        if (this.localIntegrationUser != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIntegrationUser));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("integrationUser cannot be null!!");
        }
      }
      if (this.localIntegrationDateTracker) {
        elementList.add(new javax.xml.namespace.QName("", "integrationDate"));

        if (this.localIntegrationDate != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIntegrationDate));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("integrationDate cannot be null!!");
        }
      }
      if (this.localIntegrationLevelTracker) {
        elementList.add(new javax.xml.namespace.QName("", "integrationLevel"));


        if (this.localIntegrationLevel == null) {
          throw new org.apache.axis2.databinding.ADBException("integrationLevel cannot be null!!");
        }
        elementList.add(this.localIntegrationLevel);
      }
      if (this.localIntegrationOperationTracker) {
        elementList.add(new javax.xml.namespace.QName("", "integrationOperation"));


        if (this.localIntegrationOperation == null) {
          throw new org.apache.axis2.databinding.ADBException("integrationOperation cannot be null!!");
        }
        elementList.add(this.localIntegrationOperation);
      }
      if (this.localSourceVersionIdTracker) {
        elementList.add(new javax.xml.namespace.QName("", "sourceVersionId"));

        if (this.localSourceVersionId != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSourceVersionId));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("sourceVersionId cannot be null!!");
        }
      }
      if (this.localIsLatestTracker) {
        elementList.add(new javax.xml.namespace.QName("", "isLatest"));

        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localIsLatest));
      }
      if (this.localValuesTracker) {
        elementList.add(new javax.xml.namespace.QName("", "values"));


        if (this.localValues == null) {
          throw new org.apache.axis2.databinding.ADBException("values cannot be null!!");
        }
        elementList.add(this.localValues);
      }
      if (this.localAxisValuesTracker) {
        if (this.localAxisValues != null) {
          for (ValuesArrayType localAxisValue : this.localAxisValues) {

            if (localAxisValue != null) {
              elementList.add(new javax.xml.namespace.QName("", "axisValues"));
              elementList.add(localAxisValue);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("axisValues cannot be null!!");

        }

      }
      if (this.localDimensionSizeTracker) {
        if (this.localDimensionSize != null) {
          for (int element : this.localDimensionSize) {

            elementList.add(new javax.xml.namespace.QName("", "dimensionSize"));
            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(element));


          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("dimensionSize cannot be null!!");

        }

      }
      if (this.localQualityDataTracker) {
        if (this.localQualityData != null) {
          for (MapEntryType element : this.localQualityData) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "qualityData"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("qualityData cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static ParameterValueType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ParameterValueType object = new ParameterValueType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"ParameterValueType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (ParameterValueType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list14 = new java.util.ArrayList();

          java.util.ArrayList list15 = new java.util.ArrayList();

          java.util.ArrayList list16 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "parameterName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "parameterName"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setParameterName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "criterion").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "criterion" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setCriterion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "variant").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "variant" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVariant(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "valueSystemState").equals(reader.getName())) {

            object.setValueSystemState(ValueSystemState_type1.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "calibrationState").equals(reader.getName())) {

            object.setCalibrationState(CalibrationState_type1.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "calibrationRemark").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "calibrationRemark"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setCalibrationRemark(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "integrationUser").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "integrationUser"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setIntegrationUser(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "integrationDate").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "integrationDate"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setIntegrationDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "integrationLevel").equals(reader.getName())) {

            object.setIntegrationLevel(IntegrationLevel_type1.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "integrationOperation").equals(reader.getName())) {

            object.setIntegrationOperation(IntegrationOperation_type1.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sourceVersionId").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sourceVersionId"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSourceVersionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "isLatest").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "isLatest" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setIsLatest(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "values").equals(reader.getName())) {

            object.setValues(ValuesArrayType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "axisValues").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list14.add(ValuesArrayType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone14 = false;
            while (!loopDone14) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone14 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "axisValues").equals(reader.getName())) {
                  list14.add(ValuesArrayType.Factory.parse(reader));

                }
                else {
                  loopDone14 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setAxisValues((ValuesArrayType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                ValuesArrayType.class, list14));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "dimensionSize").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list15.add(reader.getElementText());

            // loop until we find a start element that is not part of this array
            boolean loopDone15 = false;
            while (!loopDone15) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone15 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "dimensionSize").equals(reader.getName())) {
                  list15.add(reader.getElementText());

                }
                else {
                  loopDone15 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setDimensionSize((int[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(int.class,
                list15));

          } // End of if for expected property start element

          else {

          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "qualityData").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list16.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone16 = false;
            while (!loopDone16) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone16 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "qualityData").equals(reader.getName())) {
                  list16.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone16 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setQualityData((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list16));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class RenameProductAttributeValuesRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "RenameProductAttributeValuesRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for AttributeName
     */


    protected java.lang.String localAttributeName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAttributeName() {
      return this.localAttributeName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param AttributeName
     */
    public void setAttributeName(final java.lang.String param) {

      this.localAttributeName = param;


    }


    /**
     * field for ValueMapping This was an Array!
     */


    protected MapEntryType[] localValueMapping;


    /**
     * Auto generated getter method
     * 
     * @return MapEntryType[]
     */
    public MapEntryType[] getValueMapping() {
      return this.localValueMapping;
    }


    /**
     * validate the array for ValueMapping
     */
    protected void validateValueMapping(final MapEntryType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param ValueMapping
     */
    public void setValueMapping(final MapEntryType[] param) {

      validateValueMapping(param);


      this.localValueMapping = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MapEntryType
     */
    public void addValueMapping(final MapEntryType param) {
      if (this.localValueMapping == null) {
        this.localValueMapping = new MapEntryType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localValueMapping);
      list.add(param);
      this.localValueMapping = (MapEntryType[]) list.toArray(new MapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":RenameProductAttributeValuesRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "RenameProductAttributeValuesRequestType", xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "attributeName", xmlWriter);


      if (this.localAttributeName == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("attributeName cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localAttributeName);

      }

      xmlWriter.writeEndElement();

      if (this.localValueMapping != null) {
        for (MapEntryType element : this.localValueMapping) {
          if (element != null) {
            element.serialize(new javax.xml.namespace.QName("", "valueMapping"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("valueMapping cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("valueMapping cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "attributeName"));

      if (this.localAttributeName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localAttributeName));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("attributeName cannot be null!!");
      }

      if (this.localValueMapping != null) {
        for (MapEntryType element : this.localValueMapping) {

          if (element != null) {
            elementList.add(new javax.xml.namespace.QName("", "valueMapping"));
            elementList.add(element);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("valueMapping cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("valueMapping cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static RenameProductAttributeValuesRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RenameProductAttributeValuesRequestType object = new RenameProductAttributeValuesRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"RenameProductAttributeValuesRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (RenameProductAttributeValuesRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list3 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "attributeName").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "attributeName"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setAttributeName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "valueMapping").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list3.add(MapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone3 = false;
            while (!loopDone3) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone3 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "valueMapping").equals(reader.getName())) {
                  list3.add(MapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone3 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setValueMapping((MapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                MapEntryType.class, list3));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SearchContentResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SearchContentResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected ObjInfoEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return ObjInfoEntryType[]
     */
    public ObjInfoEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final ObjInfoEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final ObjInfoEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ObjInfoEntryType
     */
    public void addReturnValue(final ObjInfoEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new ObjInfoEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (ObjInfoEntryType[]) list.toArray(new ObjInfoEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SearchContentResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "SearchContentResponseType",
              xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ObjInfoEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (ObjInfoEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SearchContentResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SearchContentResponseType object = new SearchContentResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SearchContentResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SearchContentResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(ObjInfoEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(ObjInfoEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((ObjInfoEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                ObjInfoEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class CheckInResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "CheckInResponseType", "ns1");


    /**
     * field for CheckInItemStates This was an Array!
     */


    protected CheckInItemStateType[] localCheckInItemStates;


    /**
     * Auto generated getter method
     * 
     * @return CheckInItemStateType[]
     */
    public CheckInItemStateType[] getCheckInItemStates() {
      return this.localCheckInItemStates;
    }


    /**
     * validate the array for CheckInItemStates
     */
    protected void validateCheckInItemStates(final CheckInItemStateType[] param) {

      if ((param != null) && (param.length < 1)) {
        throw new java.lang.RuntimeException();
      }

    }


    /**
     * Auto generated setter method
     * 
     * @param param CheckInItemStates
     */
    public void setCheckInItemStates(final CheckInItemStateType[] param) {

      validateCheckInItemStates(param);


      this.localCheckInItemStates = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param CheckInItemStateType
     */
    public void addCheckInItemStates(final CheckInItemStateType param) {
      if (this.localCheckInItemStates == null) {
        this.localCheckInItemStates = new CheckInItemStateType[] {};
      }


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localCheckInItemStates);
      list.add(param);
      this.localCheckInItemStates = (CheckInItemStateType[]) list.toArray(new CheckInItemStateType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":CheckInResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "CheckInResponseType", xmlWriter);
        }


      }

      if (this.localCheckInItemStates != null) {
        for (CheckInItemStateType localCheckInItemState : this.localCheckInItemStates) {
          if (localCheckInItemState != null) {
            localCheckInItemState.serialize(new javax.xml.namespace.QName("", "checkInItemStates"), xmlWriter);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("checkInItemStates cannot be null!!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("checkInItemStates cannot be null!!");

      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      if (this.localCheckInItemStates != null) {
        for (CheckInItemStateType localCheckInItemState : this.localCheckInItemStates) {

          if (localCheckInItemState != null) {
            elementList.add(new javax.xml.namespace.QName("", "checkInItemStates"));
            elementList.add(localCheckInItemState);
          }
          else {

            throw new org.apache.axis2.databinding.ADBException("checkInItemStates cannot be null !!");

          }

        }
      }
      else {

        throw new org.apache.axis2.databinding.ADBException("checkInItemStates cannot be null!!");

      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static CheckInResponseType parse(final javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        CheckInResponseType object = new CheckInResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"CheckInResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (CheckInResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() &&
              new javax.xml.namespace.QName("", "checkInItemStates").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(CheckInItemStateType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "checkInItemStates").equals(reader.getName())) {
                  list1.add(CheckInItemStateType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setCheckInItemStates((CheckInItemStateType[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(CheckInItemStateType.class, list1));

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class IsCheckedInRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "IsCheckedInRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for VersionNo
     */


    protected java.lang.String localVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getVersionNo() {
      return this.localVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param VersionNo
     */
    public void setVersionNo(final java.lang.String param) {

      this.localVersionNo = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":IsCheckedInRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "IsCheckedInRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "versionNo", xmlWriter);


      if (this.localVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localVersionNo);

      }

      xmlWriter.writeEndElement();

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "versionNo"));

      if (this.localVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("versionNo cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static IsCheckedInRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        IsCheckedInRequestType object = new IsCheckedInRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"IsCheckedInRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (IsCheckedInRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "versionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "versionNo" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProductAttributeValuesResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProductAttributeValuesResponseType", "ns1");


    /**
     * field for ReturnValue This was an Array!
     */


    protected AttrMapEntryType[] localReturnValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localReturnValueTracker = false;

    public boolean isReturnValueSpecified() {
      return this.localReturnValueTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return AttrMapEntryType[]
     */
    public AttrMapEntryType[] getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * validate the array for ReturnValue
     */
    protected void validateReturnValue(final AttrMapEntryType[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final AttrMapEntryType[] param) {

      validateReturnValue(param);

      this.localReturnValueTracker = param != null;

      this.localReturnValue = param;
    }


    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param AttrMapEntryType
     */
    public void addReturnValue(final AttrMapEntryType param) {
      if (this.localReturnValue == null) {
        this.localReturnValue = new AttrMapEntryType[] {};
      }


      // update the setting tracker
      this.localReturnValueTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(this.localReturnValue);
      list.add(param);
      this.localReturnValue = (AttrMapEntryType[]) list.toArray(new AttrMapEntryType[list.size()]);

    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProductAttributeValuesResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "GetProductAttributeValuesResponseType", xmlWriter);
        }


      }
      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {
            if (element != null) {
              element.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);
            }
            else {

              // we don't have to do any thing since minOccures is zero

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (this.localReturnValueTracker) {
        if (this.localReturnValue != null) {
          for (AttrMapEntryType element : this.localReturnValue) {

            if (element != null) {
              elementList.add(new javax.xml.namespace.QName("", "returnValue"));
              elementList.add(element);
            }
            else {

              // nothing to do

            }

          }
        }
        else {

          throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProductAttributeValuesResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProductAttributeValuesResponseType object = new GetProductAttributeValuesResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProductAttributeValuesResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProductAttributeValuesResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {


            // Process the array and step past its final element's end.
            list1.add(AttrMapEntryType.Factory.parse(reader));

            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement()) {
                reader.next();
              }
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml structure
                loopDone1 = true;
              }
              else {
                if (new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {
                  list1.add(AttrMapEntryType.Factory.parse(reader));

                }
                else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array

            object.setReturnValue((AttrMapEntryType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                AttrMapEntryType.class, list1));

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class GetProductKeysRequestType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "GetProductKeysRequestType", "ns1");


    /**
     * field for SesHandle
     */


    protected java.lang.String localSesHandle;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSesHandle() {
      return this.localSesHandle;
    }


    /**
     * Auto generated setter method
     * 
     * @param param SesHandle
     */
    public void setSesHandle(final java.lang.String param) {

      this.localSesHandle = param;


    }


    /**
     * field for ProjectVersionNo
     */


    protected java.lang.String localProjectVersionNo;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getProjectVersionNo() {
      return this.localProjectVersionNo;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ProjectVersionNo
     */
    public void setProjectVersionNo(final java.lang.String param) {

      this.localProjectVersionNo = param;


    }


    /**
     * field for Name
     */


    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the set method for this attribute. It will be
     * used to determine whether to include this field in the serialized XML
     */
    protected boolean localNameTracker = false;

    public boolean isNameSpecified() {
      return this.localNameTracker;
    }


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return this.localName;
    }


    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(final java.lang.String param) {
      this.localNameTracker = param != null;

      this.localName = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":GetProductKeysRequestType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "GetProductKeysRequestType",
              xmlWriter);
        }


      }

      namespace = "";
      writeStartElement(null, namespace, "sesHandle", xmlWriter);


      if (this.localSesHandle == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localSesHandle);

      }

      xmlWriter.writeEndElement();

      namespace = "";
      writeStartElement(null, namespace, "projectVersionNo", xmlWriter);


      if (this.localProjectVersionNo == null) {
        // write the nil attribute

        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");

      }
      else {


        xmlWriter.writeCharacters(this.localProjectVersionNo);

      }

      xmlWriter.writeEndElement();
      if (this.localNameTracker) {
        namespace = "";
        writeStartElement(null, namespace, "name", xmlWriter);


        if (this.localName == null) {
          // write the nil attribute

          throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");

        }
        else {


          xmlWriter.writeCharacters(this.localName);

        }

        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "sesHandle"));

      if (this.localSesHandle != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localSesHandle));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("sesHandle cannot be null!!");
      }

      elementList.add(new javax.xml.namespace.QName("", "projectVersionNo"));

      if (this.localProjectVersionNo != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localProjectVersionNo));
      }
      else {
        throw new org.apache.axis2.databinding.ADBException("projectVersionNo cannot be null!!");
      }
      if (this.localNameTracker) {
        elementList.add(new javax.xml.namespace.QName("", "name"));

        if (this.localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(this.localName));
        }
        else {
          throw new org.apache.axis2.databinding.ADBException("name cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static GetProductKeysRequestType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetProductKeysRequestType object = new GetProductKeysRequestType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"GetProductKeysRequestType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (GetProductKeysRequestType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "sesHandle").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "sesHandle" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setSesHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "projectVersionNo").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "projectVersionNo"
                  + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setProjectVersionNo(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "name").equals(reader.getName())) {

            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
              throw new org.apache.axis2.databinding.ADBException("The element: " + "name" + "  cannot be null");
            }


            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {

          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class SetProductAttributeValuesStateResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "SetProductAttributeValuesStateResponseType", "ns1");


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":SetProductAttributeValuesStateResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
              "SetProductAttributeValuesStateResponseType", xmlWriter);
        }


      }

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static SetProductAttributeValuesStateResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        SetProductAttributeValuesStateResponseType object = new SetProductAttributeValuesStateResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"SetProductAttributeValuesStateResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (SetProductAttributeValuesStateResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  public static class FetchArtifactResponseType implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://easee.vector.com/application/cdmservice/", "FetchArtifactResponseType", "ns1");


    /**
     * field for ReturnValue
     */


    protected AttachmentType localReturnValue;


    /**
     * Auto generated getter method
     * 
     * @return AttachmentType
     */
    public AttachmentType getReturnValue() {
      return this.localReturnValue;
    }


    /**
     * Auto generated setter method
     * 
     * @param param ReturnValue
     */
    public void setReturnValue(final AttachmentType param) {

      this.localReturnValue = param;


    }


    /**
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME);
      return factory.createOMElement(dataSource, MY_QNAME);

    }

    public void serialize(final javax.xml.namespace.QName parentQName, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {
      serialize(parentQName, xmlWriter, false);
    }

    public void serialize(final javax.xml.namespace.QName parentQName,
        final javax.xml.stream.XMLStreamWriter xmlWriter, final boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException {


      java.lang.String prefix = null;
      java.lang.String namespace = null;


      prefix = parentQName.getPrefix();
      namespace = parentQName.getNamespaceURI();
      writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

      if (serializeType) {


        java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://easee.vector.com/application/cdmservice/");
        if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", namespacePrefix +
              ":FetchArtifactResponseType", xmlWriter);
        }
        else {
          writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type", "FetchArtifactResponseType",
              xmlWriter);
        }


      }

      if (this.localReturnValue == null) {
        throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");
      }
      this.localReturnValue.serialize(new javax.xml.namespace.QName("", "returnValue"), xmlWriter);

      xmlWriter.writeEndElement();


    }

    private static java.lang.String generatePrefix(final java.lang.String namespace) {
      if (namespace.equals("http://easee.vector.com/application/cdmservice/")) {
        return "ns1";
      }
      return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
    }

    /**
     * Utility method to write an element start tag.
     */
    private void writeStartElement(java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String localPart, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
      if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
      }
      else {
        if (namespace.length() == 0) {
          prefix = "";
        }
        else if (prefix == null) {
          prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
    }

    /**
     * Util method to write an attribute with the ns prefix
     */
    private void writeAttribute(final java.lang.String prefix, final java.lang.String namespace,
        final java.lang.String attName, final java.lang.String attValue,
        final javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
      if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      xmlWriter.writeAttribute(namespace, attName, attValue);
    }

    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeAttribute(final java.lang.String namespace, final java.lang.String attName,
        final java.lang.String attValue, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attValue);
      }
    }


    /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(final java.lang.String namespace, final java.lang.String attName,
        final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      java.lang.String attributeNamespace = qname.getNamespaceURI();
      java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
      if (attributePrefix == null) {
        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
      }
      java.lang.String attributeValue;
      if (attributePrefix.trim().length() > 0) {
        attributeValue = attributePrefix + ":" + qname.getLocalPart();
      }
      else {
        attributeValue = qname.getLocalPart();
      }

      if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName, attributeValue);
      }
      else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace, attName, attributeValue);
      }
    }

    /**
     * method to handle Qnames
     */

    private void writeQName(final javax.xml.namespace.QName qname, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {
      java.lang.String namespaceURI = qname.getNamespaceURI();
      if (namespaceURI != null) {
        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
          prefix = generatePrefix(namespaceURI);
          xmlWriter.writeNamespace(prefix, namespaceURI);
          xmlWriter.setPrefix(prefix, namespaceURI);
        }

        if (prefix.trim().length() > 0) {
          xmlWriter.writeCharacters(prefix + ":" +
              org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }
        else {
          // i.e this is the default namespace
          xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

      }
      else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
      }
    }

    private void writeQNames(final javax.xml.namespace.QName[] qnames, final javax.xml.stream.XMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException {

      if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
        java.lang.String namespaceURI = null;
        java.lang.String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
          if (i > 0) {
            stringToWrite.append(" ");
          }
          namespaceURI = qnames[i].getNamespaceURI();
          if (namespaceURI != null) {
            prefix = xmlWriter.getPrefix(namespaceURI);
            if ((prefix == null) || (prefix.length() == 0)) {
              prefix = generatePrefix(namespaceURI);
              xmlWriter.writeNamespace(prefix, namespaceURI);
              xmlWriter.setPrefix(prefix, namespaceURI);
            }

            if (prefix.trim().length() > 0) {
              stringToWrite.append(prefix).append(":")
                  .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
            else {
              stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
          }
          else {
            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
          }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
      }

    }


    /**
     * Register a namespace prefix
     */
    private java.lang.String registerPrefix(final javax.xml.stream.XMLStreamWriter xmlWriter,
        final java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
      java.lang.String prefix = xmlWriter.getPrefix(namespace);
      if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
          java.lang.String uri = nsContext.getNamespaceURI(prefix);
          if ((uri == null) || (uri.length() == 0)) {
            break;
          }
          prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
      }
      return prefix;
    }


    /**
     * databinding method to get an XML representation of this object
     */
    public javax.xml.stream.XMLStreamReader getPullParser(final javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException {


      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList.add(new javax.xml.namespace.QName("", "returnValue"));


      if (this.localReturnValue == null) {
        throw new org.apache.axis2.databinding.ADBException("returnValue cannot be null!!");
      }
      elementList.add(this.localReturnValue);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(),
          attribList.toArray());


    }


    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an element, the current or next start
       * element starts this object and any intervening reader events are ignorable If this object is not an element, it
       * is a complex type and the reader is at the event just after the outer start element Postcondition: If this
       * object is an element, the reader is positioned at its end element If this object is a complex type, the reader
       * is positioned at the end element of its outer element
       */
      public static FetchArtifactResponseType parse(final javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        FetchArtifactResponseType object = new FetchArtifactResponseType();

        int event;
        java.lang.String nillableValue = null;
        java.lang.String prefix = "";
        java.lang.String namespaceuri = "";
        try {

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }


          if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName =
                reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = null;
              if (fullTypeName.indexOf(":") > -1) {
                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
              }
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);

              if (!"FetchArtifactResponseType".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                return (FetchArtifactResponseType) ExtensionMapper.getTypeObject(nsUri, type, reader);
              }


            }


          }


          // Note all attributes that were handled. Used to differ normal attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement() && new javax.xml.namespace.QName("", "returnValue").equals(reader.getName())) {

            object.setReturnValue(AttachmentType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid parameter was passed
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }

          while (!reader.isStartElement() && !reader.isEndElement()) {
            reader.next();
          }

          if (reader.isStartElement()) {
            // A start element we are not expecting indicates a trailing invalid property
            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
          }


        }
        catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class


  }


  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesRequestType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesResponseType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesRequestType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesResponseType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesRequestType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesResponseType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentResponseType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesRequestType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesResponseType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactResponseType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutResponseType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateResponseType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesResponseType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInResponseType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerResponseType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateResponseType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectResponseType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesRequestType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesResponseType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesRequestType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesResponseType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInResponseType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param
          .getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerResponseType.MY_QNAME,
              org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectRequestType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectRequestType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }

  private org.apache.axiom.om.OMElement toOM(
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectResponseType param,
      final boolean optimizeContent) throws org.apache.axis2.AxisFault {


    try {
      return param.getOMElement(
          com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectResponseType.MY_QNAME,
          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope
          .getBody()
          .addChild(
              param
                  .getOMElement(
                      com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesRequestType.MY_QNAME,
                      factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope
          .getBody()
          .addChild(
              param
                  .getOMElement(
                      com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesRequestType.MY_QNAME,
                      factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope
          .getBody()
          .addChild(
              param
                  .getOMElement(
                      com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesRequestType.MY_QNAME,
                      factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope.getBody().addChild(
          param.getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentRequestType.MY_QNAME,
              factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope
          .getBody()
          .addChild(
              param
                  .getOMElement(
                      com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesRequestType.MY_QNAME,
                      factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope.getBody().addChild(
          param.getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactRequestType.MY_QNAME,
              factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope.getBody().addChild(
          param.getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutRequestType.MY_QNAME,
              factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope.getBody().addChild(
          param.getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateRequestType.MY_QNAME,
              factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope
          .getBody()
          .addChild(
              param
                  .getOMElement(
                      com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesRequestType.MY_QNAME,
                      factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope.getBody().addChild(
          param
              .getOMElement(
                  com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInRequestType.MY_QNAME,
                  factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope
          .getBody()
          .addChild(
              param
                  .getOMElement(
                      com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerRequestType.MY_QNAME,
                      factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope.getBody().addChild(
          param.getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateType.MY_QNAME,
              factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope.getBody().addChild(
          param.getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectRequestType.MY_QNAME,
              factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope
          .getBody()
          .addChild(
              param
                  .getOMElement(
                      com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesRequestType.MY_QNAME,
                      factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope
          .getBody()
          .addChild(
              param
                  .getOMElement(
                      com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesRequestType.MY_QNAME,
                      factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope.getBody().addChild(
          param.getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInRequestType.MY_QNAME,
              factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope
          .getBody()
          .addChild(
              param
                  .getOMElement(
                      com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerRequestType.MY_QNAME,
                      factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory,
      final com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectRequestType param,
      final boolean optimizeContent, final javax.xml.namespace.QName methodQName) throws org.apache.axis2.AxisFault {


    try {

      org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
      emptyEnvelope.getBody().addChild(
          param.getOMElement(
              com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectRequestType.MY_QNAME,
              factory));
      return emptyEnvelope;
    }
    catch (org.apache.axis2.databinding.ADBException e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }


  }


  /* methods to provide back word compatibility */


  /**
   * get the default envelope
   */
  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(final org.apache.axiom.soap.SOAPFactory factory) {
    return factory.getDefaultEnvelope();
  }


  private java.lang.Object fromOM(final org.apache.axiom.om.OMElement param, final java.lang.Class type,
      final java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault {

    try {

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetElementAttributesResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetElementAttributesResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetVersionAttributesResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SearchContentResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetContentAttributesResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.FetchArtifactResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutRequestType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutResponseType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckOutResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetConfigStateResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.GetSystemAttributesResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInRequestType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInResponseType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CheckInResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.InsertIntoContainerResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetLifecycleStateResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.DeleteObjectResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetContentAttributesResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.SetVersionAttributesResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.IsCheckedInResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.RemoveFromContainerResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectRequestType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectRequestType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectResponseType.class
          .equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.CreateObjectResponseType.Factory
            .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.class.equals(type)) {

        return com.vector.easee.application.cdmversionservice.CDMVersionServiceStub.ErrorType.Factory.parse(param
            .getXMLStreamReaderWithoutCaching());


      }

    }
    catch (java.lang.Exception e) {
      throw org.apache.axis2.AxisFault.makeFault(e);
    }
    return null;
  }


}
